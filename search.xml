<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue</title>
      <link href="/2024/04/25/Vue/"/>
      <url>/2024/04/25/Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要学习Vue"><a href="#为什么要学习Vue" class="headerlink" title="为什么要学习Vue"></a>为什么要学习Vue</h1><p>1.前端必备技能</p><p>2.岗位多，绝大互联网公司都在使用Vue</p><p>3.提高开发效率</p><p>4.高薪必备技能（Vue2+Vue3）</p><h1 id="什么是Vue"><a href="#什么是Vue" class="headerlink" title="什么是Vue"></a>什么是Vue</h1><p>概念：Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套 **构建用户界面 ** 的 <strong>渐进式</strong> <strong>框架</strong></p><p>Vue2官网：<a href="https://v2.cn.vuejs.org/">https://v2.cn.vuejs.org/</a></p><h3 id="1-什么是构建用户界面"><a href="#1-什么是构建用户界面" class="headerlink" title="1.什么是构建用户界面"></a>1.什么是构建用户界面</h3><p><strong>基于数据</strong>渲染出用户可以看到的<strong>界面</strong></p><p><img src="/.com//1681875887026.png" alt="68187588702"></p><h3 id="2-什么是渐进式"><a href="#2-什么是渐进式" class="headerlink" title="2.什么是渐进式"></a>2.什么是渐进式</h3><p>所谓渐进式就是循序渐进，不一定非得把Vue中的所有API都学完才能开发Vue，可以学一点开发一点</p><h4 id="Vue的两种开发方式："><a href="#Vue的两种开发方式：" class="headerlink" title="Vue的两种开发方式："></a>Vue的两种开发方式：</h4><ol><li><p>Vue核心包开发</p><p>场景：局部模块改造</p></li><li><p>Vue核心包&amp;Vue插件&amp;工程化</p><p>场景：整站开发</p></li></ol><h3 id="3-什么是框架"><a href="#3-什么是框架" class="headerlink" title="3.什么是框架"></a>3.什么是框架</h3><p>所谓框架：就是一套完整的解决方案</p><p><strong>举个栗子</strong></p><p>如果把一个完整的项目比喻为一个装修好的房子，那么框架就是一个毛坯房。</p><p>我们只需要在“毛坯房”的基础上，增加功能代码即可。</p><p>提到框架，不得不提一下库。</p><ul><li>库，类似工具箱，是一堆方法的集合，比如 axios、lodash、echarts等</li><li>框架，是一套完整的解决方案，实现了大部分功能，我们只需要按照一定的规则去编码即可。</li></ul><p>下图是 库 和 框架的对比。</p><p><img src="/.com//1681876620277.png" alt="68187662027"></p><p>框架的特点：有一套必须让开发者遵守的<strong>规则</strong>或者<strong>约束</strong></p><p>咱们学框架就是学习的这些规则 <a href="https://v2.cn.vuejs.org/">官网</a></p><h3 id="总结：什么是Vue？"><a href="#总结：什么是Vue？" class="headerlink" title="总结：什么是Vue？"></a>总结：什么是Vue？</h3><p>Vue是什么：</p><p>什么是构建用户界面：</p><p>什么是渐进式：</p><p>什么是框架：</p><h1 id="创建Vue实例"><a href="#创建Vue实例" class="headerlink" title="创建Vue实例"></a>创建Vue实例</h1><p>我们已经知道了Vue框架可以 基于数据帮助我们渲染出用户界面，那应该怎么做呢？</p><p><img src="/.com//1681877190137.png" alt="68187719013"></p><p>比如就上面这个数据，基于提供好的msg 怎么渲染后右侧可展示的数据呢？</p><p><strong>核心步骤（4步）：</strong></p><ol><li>准备容器</li><li>引包（官网） — 开发版本&#x2F;生产版本</li><li>创建Vue实例  new Vue()</li><li>指定配置项，渲染数据<ol><li>el:指定挂载点</li><li>data提供数据</li></ol></li></ol><p><img src="/.com//1681877405007.png" alt="68187740500"></p><p><strong>总结：创建Vue实例需要执行哪4步</strong></p><h1 id="插值表达式-“-”"><a href="#插值表达式-“-”" class="headerlink" title="插值表达式 “{}”"></a>插值表达式 “{}”</h1><p>插值表达式是一种Vue的模板语法</p><p>我们可以用插值表达式渲染出Vue提供的数据</p><p><img src="/.com//1681886494417.png" alt="68188649441"></p><h3 id="1-作用：利用表达式进行插值，渲染到页面中"><a href="#1-作用：利用表达式进行插值，渲染到页面中" class="headerlink" title="1.作用：利用表达式进行插值，渲染到页面中"></a>1.作用：利用表达式进行插值，渲染到页面中</h3><p>表达式：是可以被求值的代码，JS引擎会讲其计算出一个结果</p><p>以下的情况都是表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">money + <span class="number">100</span></span><br><span class="line">money - <span class="number">100</span></span><br><span class="line">money * <span class="number">10</span></span><br><span class="line">money / <span class="number">10</span> </span><br><span class="line">price &gt;= <span class="number">100</span> ? <span class="string">&#x27;真贵&#x27;</span>:<span class="string">&#x27;还行&#x27;</span></span><br><span class="line">obj.<span class="property">name</span></span><br><span class="line">arr[<span class="number">0</span>]</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line">obj.<span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h3 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h3><p>插值表达式语法：”{ 表达式 }”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;<span class="string">&quot;&#123;title&#125;&quot;</span>&lt;h3&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&quot;&#123;nickName.toUpperCase()&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&quot;&#123;age &gt;= 18 ? &#x27;成年&#x27;:&#x27;未成年&#x27;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&quot;&#123;obj.name&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&quot;&#123;fn()&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-错误用法"><a href="#3-错误用法" class="headerlink" title="3.错误用法"></a>3.错误用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在插值表达式中使用的数据 必须在data中进行了提供</span><br><span class="line">&lt;p&gt;<span class="string">&quot;&#123;hobby&#125;&quot;</span>&lt;<span class="regexp">/p&gt;  /</span>/如果在data中不存在 则会报错</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>支持的是表达式，而非语句，比如：<span class="keyword">if</span>   <span class="keyword">for</span> ...</span><br><span class="line">&lt;p&gt;<span class="string">&quot;&#123;if&#125;&quot;</span>&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>不能在标签属性中使用 <span class="string">&quot;&#123;  &#125;&quot;</span> 插值 (插值表达式只能标签中间使用)</span><br><span class="line">&lt;p title=<span class="string">&quot;&quot;</span>&#123;username&#125;<span class="string">&quot;&quot;</span>&gt;我是P标签&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>1.插值表达式的作用是什么</p><p>2.语法是什么</p><p>3.插值表达式的注意事项</p><h1 id="响应式特性"><a href="#响应式特性" class="headerlink" title="响应式特性"></a>响应式特性</h1><h3 id="1-什么是响应式？"><a href="#1-什么是响应式？" class="headerlink" title="1.什么是响应式？"></a>1.什么是响应式？</h3><p>​简单理解就是数据变，视图对应变。 </p><h3 id="2-如何访问-和-修改-data中的数据（响应式演示）"><a href="#2-如何访问-和-修改-data中的数据（响应式演示）" class="headerlink" title="2.如何访问 和 修改 data中的数据（响应式演示）"></a>2.如何访问 和 修改 data中的数据（响应式演示）</h3><p>data中的数据, 最终会被添加到实例上</p><p>① 访问数据： “实例.属性名”</p><p>② 修改数据： “实例.属性名”&#x3D; “值”</p><p><img src="/.com//1681888539340.png" alt="68188853934"></p><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><ol><li>什么是响应式</li><li>如何访问和修改data中的数据呢</li></ol><h2 id="Vue开发者工具安装"><a href="#Vue开发者工具安装" class="headerlink" title="Vue开发者工具安装"></a>Vue开发者工具安装</h2><ol><li>通过谷歌应用商店安装（国外网站）</li><li>极简插件下载（推荐） <a href="https://chrome.zzzmh.cn/index">https://chrome.zzzmh.cn/index</a></li></ol><p>安装步骤：</p><p><img src="/.com//1681889390406.png" alt="68188939040"></p><p>安装之后可以F12后看到多一个Vue的调试面板</p><p><img src="/.com//1681889483446.png" alt="68188948344"></p><h1 id="Vue中的常用指令"><a href="#Vue中的常用指令" class="headerlink" title="Vue中的常用指令"></a>Vue中的常用指令</h1><p><strong>概念：</strong>指令（Directives）是 Vue 提供的带有 <strong>v- 前缀</strong> 的 特殊 标签<strong>属性</strong>。</p><p>为啥要学：提高程序员操作 DOM 的效率。</p><p>vue 中的指令按照不同的用途可以分为如下 6 大类：</p><ul><li>内容渲染指令（v-html、v-text）</li><li>条件渲染指令（v-show、v-if、v-else、v-else-if）</li><li>事件绑定指令（v-on）</li><li>属性绑定指令 （v-bind）</li><li>双向绑定指令（v-model）</li><li>列表渲染指令（v-for）</li></ul><p>指令是 vue 开发中最基础、最常用、最简单的知识点。</p><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><p>内容渲染指令用来辅助开发者渲染 DOM 元素的文本内容。常用的内容渲染指令有如下2 个：</p><ul><li><p>v-text（类似innerText）</p></li><li><ul><li>使用语法：<code>&lt;p v-text=&quot;uname&quot;&gt;hello&lt;/p&gt;</code>，意思是将 uame 值渲染到 p 标签中</li><li>类似 innerText，使用该语法，会覆盖 p 标签原有内容</li></ul></li><li><p>v-html（类似 innerHTML）</p></li><li><ul><li>使用语法：<code>&lt;p v-html=&quot;intro&quot;&gt;hello&lt;/p&gt;</code>，意思是将 intro 值渲染到 p 标签中</li><li>类似 innerHTML，使用该语法，会覆盖 p 标签原有内容</li><li>类似 innerHTML，使用该语法，能够将HTML标签的样式呈现出来。</li></ul></li></ul><p>代码演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 既然指令是vue提供的特殊的html属性，所以咱们写的时候就当成属性来用即可</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;uname&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;intro&quot;</span>&gt;</span>简介：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt; </span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">        const app = new Vue(&#123;</span><br><span class="line">            el:&#x27;#app&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                uname:&#x27;张三&#x27;,</span><br><span class="line">                intro:&#x27;&lt;h2&gt;这是一个&lt;strong&gt;非常优秀&lt;/strong&gt;的boy&lt;h2&gt;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="v-show、v-if"><a href="#v-show、v-if" class="headerlink" title="v-show、v-if"></a>v-show、v-if</h2><p>条件判断指令，用来辅助开发者按需控制 DOM 的显示与隐藏。条件渲染指令有如下两个，分别是：</p><ol><li><p>v-show</p><ol><li>作用：  控制元素显示隐藏</li><li>语法：  v-show &#x3D; “表达式”   表达式值为 true 显示， false 隐藏</li><li>原理：  切换 display:none 控制显示隐藏</li><li>场景：频繁切换显示隐藏的场景</li></ol><p><img src="/.com//1681891228284.png" alt="68189122828"></p></li><li><p>v-if</p><ol><li>作用：  控制元素显示隐藏（条件渲染）</li><li>语法：  v-if&#x3D; “表达式”          表达式值 true显示， false 隐藏</li><li>原理：  基于条件判断，是否创建 或 移除元素节点</li><li>场景：  要么显示，要么隐藏，不频繁切换的场景</li></ol><p><img src="/.com//1681891237750.png" alt="68189123775"></p><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是v-show控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是v-if控制的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">   </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">flag</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>v-else 和 v-else-if</p><ol><li>作用：辅助v-if进行判断渲染</li><li>语法：v-else  v-else-if&#x3D;”表达式”</li><li>需要紧接着v-if使用</li></ol></li></ol><p>示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：♂ 男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：♀ 女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>成绩评定A：奖励电脑一台<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>成绩评定B：奖励周末郊游<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>成绩评定C：奖励零食礼包<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>成绩评定D：惩罚一周不能玩手机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">gender</span>: <span class="number">2</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">score</span>: <span class="number">95</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>使用Vue时，如需为DOM注册事件，及其的简单，语法如下：</p><ul><li>&lt;button v-on:事件名&#x3D;”内联语句”&gt;按钮</li><li>&lt;button v-on:事件名&#x3D;”处理函数”&gt;按钮</li><li>&lt;button v-on:事件名&#x3D;”处理函数(实参)”&gt;按钮</li><li><code>v-on:</code> 简写为 <strong>@</strong></li></ul><ol><li><p>内联语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count--&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&quot;&#123; count &#125;&quot;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>事件处理函数</p><p>注意：</p><ul><li>事件处理函数应该写到一个跟data同级的配置项（methods）中</li><li>methods中的函数内部的this都指向Vue实例</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>切换显示隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">isShow</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>  3.给事件处理函数传参</p><ul><li><p>如果不传递任何参数，则方法无需加小括号；methods方法中可以直接使用 e 当做事件对象</p></li><li><p>如果传递了参数，则实参 <code>$event</code> 表示事件对象，固定用法。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   .<span class="property">box</span> &#123;</span><br><span class="line">     <span class="attr">border</span>: 3px solid #<span class="number">000000</span>;</span><br><span class="line">     border-<span class="attr">radius</span>: 10px;</span><br><span class="line">     <span class="attr">padding</span>: 20px;</span><br><span class="line">     <span class="attr">margin</span>: 20px;</span><br><span class="line">     <span class="attr">width</span>: 200px;</span><br><span class="line">   &#125;</span><br><span class="line">   h3 &#123;</span><br><span class="line">     <span class="attr">margin</span>: 10px <span class="number">0</span> 20px <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   p &#123;</span><br><span class="line">     <span class="attr">margin</span>: 20px;</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑自动售货机<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">button</span>&gt;</span>可乐5元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">button</span>&gt;</span>咖啡10元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">button</span>&gt;</span>牛奶8元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>银行卡余额：&quot;&#123; money &#125;&quot;元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">money</span>: <span class="number">100</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ol><li><strong>作用：</strong>动态设置html的标签属性 比如：src、url、title</li><li><strong>语法</strong>：**v-bind:**属性名&#x3D;“表达式”</li><li>**v-bind:**可以简写成 &#x3D;&gt;   <strong>:</strong></li></ol><p>比如，有一个图片，它的 <code>src</code> 属性值，是一个图片地址。这个地址在数据 data 中存储。</p><p>则可以这样设置属性值：</p><ul><li><code>&lt;img v-bind:src=&quot;url&quot; /&gt;</code></li><li><code>&lt;img :src=&quot;url&quot; /&gt;</code>   （v-bind可以省略）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgUrl&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">imgUrl</span>: <span class="string">&#x27;./imgs/10-02.png&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">msg</span>: <span class="string">&#x27;hello 波仔&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>Vue 提供了 v-for 列表渲染指令，用来辅助开发者基于一个数组来循环渲染一个列表结构。</p><p>v-for 指令需要使用 <code>(item, index) in arr</code> 形式的特殊语法，其中：</p><ul><li>item 是数组中的每一项</li><li>index 是每一项的索引，不需要可以省略</li><li>arr 是被遍历的数组</li></ul><p>此语法也可以遍历<strong>对象和数字</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历对象</span></span><br><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">&quot;(value, key, index) in object&quot;</span>&gt;<span class="string">&quot;&#123;value&#125;&quot;</span>&lt;/div&gt;</span><br><span class="line"><span class="attr">value</span>:对象中的值</span><br><span class="line"><span class="attr">key</span>:对象中的键</span><br><span class="line"><span class="attr">index</span>:遍历索引从<span class="number">0</span>开始</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数字</span></span><br><span class="line">&lt;p v-<span class="keyword">for</span>=<span class="string">&quot;item in 10&quot;</span>&gt;<span class="string">&quot;&#123;item&#125;&quot;</span>&lt;/p&gt;</span><br><span class="line">item从<span class="number">1</span> 开始</span><br></pre></td></tr></table></figure><h2 id="v-for中的key"><a href="#v-for中的key" class="headerlink" title="v-for中的key"></a>v-for中的key</h2><p><strong>语法：</strong> key&#x3D;”唯一值”</p><p><strong>作用：</strong>给列表项添加的<strong>唯一标识</strong>。便于Vue进行列表项的<strong>正确排序复用</strong>。</p><p><strong>为什么加key：</strong>Vue 的默认行为会尝试原地修改元素（<strong>就地复用</strong>）</p><p>实例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in booksList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&quot;&#123; item.name &#125;&quot;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&quot;&#123; item.author &#125;&quot;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>key 的值只能是字符串 或 数字类型</li><li>key 的值必须具有唯一性</li><li>推荐使用  id 作为 key（唯一），不推荐使用 index 作为 key（会变化，不对应）</li></ol><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>所谓双向绑定就是：</p><ol><li>数据改变后，呈现的页面结果会更新</li><li>页面结果更新后，数据也会随之而变</li></ol><p><strong>作用：</strong> 给<strong>表单元素</strong>（input、radio、select）使用，双向绑定数据，可以快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素内容</p><p><strong>语法：</strong>v-model&#x3D;”变量”</p><p><strong>需求：</strong>使用双向绑定实现以下需求</p><ol><li>点击登录按钮获取表单中的内容</li><li>点击重置按钮清空表单中的内容</li></ol><p><img src="/.com//1681913125738.png" alt="68191312573"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    账户：&lt;input type=<span class="string">&quot;text&quot;</span>&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h2><h3 id="1-什么是指令修饰符？"><a href="#1-什么是指令修饰符？" class="headerlink" title="1.什么是指令修饰符？"></a>1.什么是指令修饰符？</h3><p>​所谓指令修饰符就是通过“.”指明一些指令<strong>后缀</strong> 不同的<strong>后缀</strong>封装了不同的处理操作  —&gt; 简化代码</p><h3 id="2-按键修饰符"><a href="#2-按键修饰符" class="headerlink" title="2.按键修饰符"></a>2.按键修饰符</h3><ul><li>@keyup.enter  —&gt;当点击enter键的时候才触发</li></ul><p>代码演示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>@keyup.enter  →  监听键盘回车事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-v-model修饰符"><a href="#3-v-model修饰符" class="headerlink" title="3.v-model修饰符"></a>3.v-model修饰符</h3><ul><li>v-model.trim  —&gt;去除首位空格</li><li>v-model.number —&gt;转数字</li></ul><h3 id="4-事件修饰符"><a href="#4-事件修饰符" class="headerlink" title="4.事件修饰符"></a>4.事件修饰符</h3><ul><li>@事件名.stop —&gt; 阻止冒泡</li><li>@事件名.prevent  —&gt;阻止默认行为</li><li>@事件名.stop.prevent —&gt;可以连用 即阻止事件冒泡也阻止默认行为</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   .<span class="property">father</span> &#123;</span><br><span class="line">     <span class="attr">width</span>: 200px;</span><br><span class="line">     <span class="attr">height</span>: 200px;</span><br><span class="line">     background-<span class="attr">color</span>: pink;</span><br><span class="line">     margin-<span class="attr">top</span>: 20px;</span><br><span class="line">   &#125;</span><br><span class="line">   .<span class="property">son</span> &#123;</span><br><span class="line">     <span class="attr">width</span>: 100px;</span><br><span class="line">     <span class="attr">height</span>: 100px;</span><br><span class="line">     background-<span class="attr">color</span>: skyblue;</span><br><span class="line">   &#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">   &lt;h3&gt;v-model修饰符 .trim .number&lt;/h3&gt;</span><br><span class="line">   姓名：&lt;input v-model=&quot;username&quot; type=&quot;text&quot;&gt;&lt;br&gt;</span><br><span class="line">   年纪：&lt;input v-model=&quot;age&quot; type=&quot;text&quot;&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   &lt;h3&gt;@事件名.stop     →  阻止冒泡&lt;/h3&gt;</span><br><span class="line">   &lt;div @click=&quot;fatherFn&quot; class=&quot;father&quot;&gt;</span><br><span class="line">     &lt;div @click=&quot;sonFn&quot; class=&quot;son&quot;&gt;儿子&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;h3&gt;@事件名.prevent  →  阻止默认行为&lt;/h3&gt;</span><br><span class="line">   &lt;a @click href=&quot;http://www.baidu.com&quot;&gt;阻止默认行为&lt;/a&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">   const app = new Vue(&#123;</span><br><span class="line">     el: &#x27;#app&#x27;,</span><br><span class="line">     data: &#123;</span><br><span class="line">       username: &#x27;&#x27;,</span><br><span class="line">       age: &#x27;&#x27;,</span><br><span class="line">     &#125;,</span><br><span class="line">     methods: &#123;</span><br><span class="line">       fatherFn () &#123;</span><br><span class="line">         alert(&#x27;老父亲被点击了&#x27;)</span><br><span class="line">       &#125;,</span><br><span class="line">       sonFn (e) &#123;</span><br><span class="line">         // e.stopPropagation()</span><br><span class="line">         alert(&#x27;儿子被点击了&#x27;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="v-bind对样式控制的增强"><a href="#v-bind对样式控制的增强" class="headerlink" title="v-bind对样式控制的增强"></a>v-bind对样式控制的增强</h1><h2 id="v-bind对样式控制的增强-操作class"><a href="#v-bind对样式控制的增强-操作class" class="headerlink" title="v-bind对样式控制的增强-操作class"></a>v-bind对样式控制的增强-操作class</h2><p>为了方便开发者进行样式控制， Vue 扩展了 v-bind 的语法，可以针对 <strong>class 类名</strong> 和 <strong>style 行内样式</strong> 进行控制 。</p><h3 id="1-语法："><a href="#1-语法：" class="headerlink" title="1.语法："></a>1.语法：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> :class = &quot;对象/数组&quot;&gt;这是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-对象语法"><a href="#2-对象语法" class="headerlink" title="2.对象语法"></a>2.对象语法</h3><p>当class动态绑定的是<strong>对象</strong>时，<strong>键就是类名，值就是布尔值</strong>，如果值是<strong>true</strong>，就有这个类，否则没有这个类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; 类名1: 布尔值, 类名2: 布尔值 &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    适用场景：一个类名，来回切换</p><h3 id="3-数组语法"><a href="#3-数组语法" class="headerlink" title="3.数组语法"></a>3.数组语法</h3><p>当class动态绑定的是<strong>数组</strong>时 → 数组中所有的类，都会添加到盒子上，本质就是一个 class 列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[ 类名1, 类名2, 类名3 ]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   使用场景:批量添加或删除类</p><h2 id="v-bind对有样式控制的增强-操作style"><a href="#v-bind对有样式控制的增强-操作style" class="headerlink" title="v-bind对有样式控制的增强-操作style"></a>v-bind对有样式控制的增强-操作style</h2><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; CSS属性名1: CSS属性值, CSS属性名2: CSS属性值 &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-代码练习"><a href="#2-代码练习" class="headerlink" title="2.代码练习"></a>2.代码练习</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">187</span>, <span class="number">150</span>, <span class="number">156</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="v-model在其他表单元素的使用"><a href="#v-model在其他表单元素的使用" class="headerlink" title="v-model在其他表单元素的使用"></a>v-model在其他表单元素的使用</h1><h2 id="1-讲解内容："><a href="#1-讲解内容：" class="headerlink" title="1.讲解内容："></a>1.讲解内容：</h2><p>常见的表单元素都可以用 v-model 绑定关联  →  快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素的值</p><p>它会根据  <strong>控件类型</strong> 自动选取  <strong>正确的方法</strong> 来更新元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入框  <span class="attr">input</span>:text   ——&gt; value</span><br><span class="line">文本域  textarea ——&gt; value</span><br><span class="line">复选框  <span class="attr">input</span>:checkbox  ——&gt; checked</span><br><span class="line">单选框  <span class="attr">input</span>:radio   ——&gt; checked</span><br><span class="line">下拉菜单 select    ——&gt; value</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>基于<strong>现有的数据</strong>，计算出来的<strong>新属性</strong>。 <strong>依赖</strong>的数据变化，<strong>自动</strong>重新计算。</p><h2 id="2-语法-1"><a href="#2-语法-1" class="headerlink" title="2.语法"></a>2.语法</h2><ol><li>声明在 <strong>computed 配置项</strong>中，一个计算属性对应一个函数</li><li>使用起来和普通属性一样使用  “{ 计算属性名}”</li></ol><h2 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h2><ol><li>computed配置项和data配置项是<strong>同级</strong>的</li><li>computed中的计算属性<strong>虽然是函数的写法</strong>，但他<strong>依然是个属性</strong></li><li>computed中的计算属性<strong>不能</strong>和data中的属性<strong>同名</strong></li><li>使用computed中的计算属性和使用data中的属性是一样的用法</li><li>computed中计算属性内部的<strong>this</strong>依然<strong>指向的是Vue实例</strong></li></ol><h1 id="computed计算属性-VS-methods方法"><a href="#computed计算属性-VS-methods方法" class="headerlink" title="computed计算属性 VS methods方法"></a>computed计算属性 VS methods方法</h1><h2 id="1-computed计算属性"><a href="#1-computed计算属性" class="headerlink" title="1.computed计算属性"></a>1.computed计算属性</h2><p>作用：封装了一段对于<strong>数据</strong>的处理，求得一个<strong>结果</strong></p><p>语法：</p><ol><li>写在computed配置项中</li><li>作为属性，直接使用<ul><li>js中使用计算属性： this.计算属性</li><li>模板中使用计算属性：”{计算属性}”</li></ul></li></ol><h2 id="2-methods计算属性"><a href="#2-methods计算属性" class="headerlink" title="2.methods计算属性"></a>2.methods计算属性</h2><p>作用：给Vue实例提供一个<strong>方法</strong>，调用以<strong>处理业务逻辑</strong>。</p><p>语法：</p><ol><li>写在methods配置项中</li><li>作为方法调用<ul><li>js中调用：this.方法名()</li><li>模板中调用 “{方法名()}”  或者 @事件名&#x3D;“方法名”</li></ul></li></ol><h2 id="3-计算属性的优势"><a href="#3-计算属性的优势" class="headerlink" title="3.计算属性的优势"></a>3.计算属性的优势</h2><ol><li><p>缓存特性（提升性能）</p><p>计算属性会对计算出来的结果缓存，再次使用直接读取缓存，</p><p>依赖项变化了，会自动重新计算 → 并再次缓存</p></li><li><p>methods没有缓存特性</p></li><li><p>通过代码比较</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>,<span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">145px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: -<span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#e63f32</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>小黑的礼物清单🛒<span class="tag">&lt;<span class="name">span</span>&gt;</span>?<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot;&#123; item.name &#125;&quot;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&quot;&#123; item.num &#125;&quot;个<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>礼物总数：&quot;&#123; totalCount &#125;&quot; 个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 现有的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">list</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;篮球&#x27;</span>, <span class="attr">num</span>: <span class="number">3</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;玩具&#x27;</span>, <span class="attr">num</span>: <span class="number">2</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;铅笔&#x27;</span>, <span class="attr">num</span>: <span class="number">5</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        totalCount () &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> total = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">num</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> total</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-总结-1"><a href="#4-总结-1" class="headerlink" title="4.总结"></a>4.总结</h2><p>1.computed<strong>有缓存特性</strong>，methods<strong>没有缓存</strong></p><p>2.当一个结果依赖其他多个值时，推荐使用计算属性</p><p>3.当处理业务逻辑时，推荐使用methods方法，比如事件的处理函数</p><h1 id="计算属性的完整写法"><a href="#计算属性的完整写法" class="headerlink" title="计算属性的完整写法"></a>计算属性的完整写法</h1><p><strong>既然计算属性也是属性，能访问，应该也能修改了？</strong></p><ol><li>计算属性默认的简写，只能读取访问，不能 “修改”</li><li>如果要 “修改”  → 需要写计算属性的完整写法</li></ol><p><img src="/.com//1682041822963.png" alt="68204182296"></p><p>完整写法代码演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span> +</span><br><span class="line">   名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span> =</span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span>&gt;</span>改名卡<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">firstName</span>: <span class="string">&#x27;刘&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">lastName</span>: <span class="string">&#x27;备&#x27;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="watch侦听器（监视器）"><a href="#watch侦听器（监视器）" class="headerlink" title="watch侦听器（监视器）"></a>watch侦听器（监视器）</h1><h2 id="1-作用："><a href="#1-作用：" class="headerlink" title="1.作用："></a>1.作用：</h2><p>​<strong>监视数据变化</strong>，执行一些业务逻辑或异步操作</p><h2 id="2-语法："><a href="#2-语法：" class="headerlink" title="2.语法："></a>2.语法：</h2><ol><li><p>watch同样声明在跟data同级的配置项中</p></li><li><p>简单写法： 简单类型数据直接监视</p></li><li><p>完整写法：添加额外配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123; </span><br><span class="line">  <span class="attr">words</span>: <span class="string">&#x27;苹果&#x27;</span>,</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">words</span>: <span class="string">&#x27;苹果&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="comment">// 该方法会在数据变化时，触发执行</span></span><br><span class="line">  数据属性名 (newValue, oldValue) &#123;</span><br><span class="line">    一些业务逻辑 或 异步操作。 </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;对象.属性名&#x27;</span> (newValue, oldValue) &#123;</span><br><span class="line">    一些业务逻辑 或 异步操作。 </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-完整写法"><a href="#3-完整写法" class="headerlink" title="3.完整写法"></a>3.完整写法</h2><p>完整写法 —&gt;添加额外的配置项</p><ol><li>deep:true 对复杂类型进行深度监听</li><li>immdiate:true 初始化 立刻执行一次</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">words</span>: <span class="string">&#x27;苹果&#x27;</span>,</span><br><span class="line">    <span class="attr">lang</span>: <span class="string">&#x27;italy&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">watch</span>: &#123;<span class="comment">// watch 完整写法</span></span><br><span class="line">  对象: &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 深度监视</span></span><br><span class="line">    <span class="attr">immdiate</span>:<span class="literal">true</span>,<span class="comment">//立即执行handler函数</span></span><br><span class="line">    handler (newValue) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-总结-2"><a href="#4-总结-2" class="headerlink" title="4.总结"></a>4.总结</h2><p>watch侦听器的写法有几种？</p><p>1.简单写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  数据属性名 (newValue, oldValue) &#123;</span><br><span class="line">    一些业务逻辑 或 异步操作。 </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;对象.属性名&#x27;</span> (newValue, oldValue) &#123;</span><br><span class="line">    一些业务逻辑 或 异步操作。 </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.完整写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;<span class="comment">// watch 完整写法</span></span><br><span class="line">  数据属性名: &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 深度监视(针对复杂类型)</span></span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">// 是否立刻执行一次handler</span></span><br><span class="line">    handler (newValue) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vue声明周期和生命周期的四个阶段"><a href="#Vue声明周期和生命周期的四个阶段" class="headerlink" title="Vue声明周期和生命周期的四个阶段"></a>Vue声明周期和生命周期的四个阶段</h1><p>思考：什么时候可以发送<strong>初始化渲染请求</strong>？(越早越好)什么时候可以开始<strong>操作dom</strong>？(至少得dom渲染出来)</p><p>Vue声明周期：一个Vue实例从<strong>创建</strong>到<strong>销毁</strong>的过程</p><p>生命周期四个阶段：1.创建 2.挂载 3.更新 4.销毁</p><p><img src="/.com//image-20240418171447366.png" alt="image-20240418171447366"></p><h1 id="Vue声明周期函数（钩子函数）"><a href="#Vue声明周期函数（钩子函数）" class="headerlink" title="Vue声明周期函数（钩子函数）"></a>Vue声明周期函数（钩子函数）</h1><p>Vue生命周期过程，会自动运行一些函数，被称为【生命周期钩子】→让开发者 在【特定阶段】运行自己的代码</p><p><img src="/.com//image-20240418171711663.png" alt="image-20240418171711663"></p><p><img src="/.com//image-20240418171649423.png" alt="image-20240418171649423"></p><p>created：发送初始化渲染请求</p><p>mounted：操作dom</p><p>before destory：释放Vue以外的资源（清除定时器，延时器….）</p><h1 id="工程化开发-脚手架Vue-CLI"><a href="#工程化开发-脚手架Vue-CLI" class="headerlink" title="工程化开发 &amp; 脚手架Vue CLI"></a>工程化开发 &amp; 脚手架Vue CLI</h1><h2 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a><strong>基本介绍：</strong></h2><p>Vue CLI 是Vue官方提供的一个全局命令工具</p><p>可以帮助我们快速创建一个开发Vue项目的标准化基础架子，【集成了webspack配置】</p><p><strong>好处：</strong></p><p>1.开箱即用，零配置</p><p>2.内置babel</p><p>3.标准化</p><h2 id="运行流程："><a href="#运行流程：" class="headerlink" title="运行流程："></a>运行流程：</h2><p><img src="/.com//image-20240419091402170.png" alt="image-20240419091402170"></p><h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><ul><li>页面可以拆分成一个个组件，每个组件有着独立的结构、行为、样式</li><li>好处：便于维护，利用复用 → 提升开发效率</li><li>组件分类：普通组件、根组件</li></ul><h2 id="根组件"><a href="#根组件" class="headerlink" title="根组件"></a>根组件</h2><p>整个应用最上层的组件、包裹所有普通小组件</p><p>一个组件App.vue 包含的三个部分：</p><ul><li>template：结构（有且只能有一个根元素）</li><li>script：js逻辑</li><li>style：样式（可支持less，需要装包）</li></ul><h2 id="普通组件的注册使用"><a href="#普通组件的注册使用" class="headerlink" title="普通组件的注册使用"></a>普通组件的注册使用</h2><h3 id="组件注册的两种方式："><a href="#组件注册的两种方式：" class="headerlink" title="组件注册的两种方式："></a>组件注册的两种方式：</h3><ol><li>局部注册：只能在注册的组件中使用<ol><li>创建.vue文件<ul><li><img src="/.com//image-20240419100716370.png" alt="image-20240419100716370"></li></ul></li><li>在使用的组件内导入并注册（在App.vue中完成）<ul><li><img src="/.com//image-20240419100739919.png" alt="image-20240419100739919"></li></ul></li><li>调用<ul><li><img src="/.com//image-20240419100800332.png" alt="image-20240419100800332"></li></ul></li></ol></li><li>全局注册：所有组件都能使用<ol><li>在main.js中导入<ul><li><img src="/.com//image-20240419100548570.png" alt="image-20240419100548570"></li></ul></li><li>在main.js进行全局注册<ul><li><img src="/.com//image-20240419100607199.png" alt="image-20240419100607199"></li></ul></li><li>去需要用到组件的vue中进行使用即可<ul><li><img src="/.com//image-20240419100645668.png" alt="image-20240419100645668"></li></ul></li></ol></li></ol><h1 id="Scoped"><a href="#Scoped" class="headerlink" title="Scoped"></a>Scoped</h1><p><strong>默认情况</strong>：写在组件中的样式会 <strong>全局生效</strong> → 因此很容易造成多个组件之间的样式冲突问题</p><ul><li><strong>全局样式</strong>：默认组件中的样式会作用到全局</li><li><strong>局部样式</strong>：可以给组件加上<strong>scoped</strong>属性，<strong>可以让样式只作用于当前组件</strong></li></ul><p><strong>原理：</strong></p><ol><li>当前组件内标签都被添加 <code>data-v-hash值</code> 的属性<ul><li><img src="/.com//image-20240419120757751.png" alt="image-20240419120757751"></li></ul></li><li>css 选择器都被添加 [data-v-hash值] 的属性选择器<ul><li><img src="/.com//image-20240419120808041.png" alt="image-20240419120808041"></li></ul></li></ol><p><strong>最终效果：</strong>必须是当前组件的元素，才会有这个自定义属性，才会被这个样式作用到</p><h1 id="data函数"><a href="#data函数" class="headerlink" title="data函数"></a>data函数</h1><p>组件中的data是一个函数，并非之前的data对象 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">count: 100</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="两种组件关系分类-和-对应的组件通信方案"><a href="#两种组件关系分类-和-对应的组件通信方案" class="headerlink" title="两种组件关系分类 和 对应的组件通信方案"></a>两种组件关系分类 和 对应的组件通信方案</h1><p>父子关系 ——→**props **&amp; <strong>$emit</strong></p><p>非父子关系——→<strong>provide</strong> &amp; <strong>inject</strong> 或 <strong>eventbus</strong></p><p>通用方案——→<strong>vuex</strong></p><h2 id="父子通信方案的核心流程"><a href="#父子通信方案的核心流程" class="headerlink" title="父子通信方案的核心流程"></a>父子通信方案的核心流程</h2><h3 id="父-→-子-props"><a href="#父-→-子-props" class="headerlink" title="父 → 子 props"></a>父 → 子 props</h3><ul><li>父中给子添加属性传值</li><li>子props接收</li><li>使用</li></ul><p><img src="/.com//image-20240419131754371.png" alt="image-20240419131754371"></p><h3 id="子-→-父-emit"><a href="#子-→-父-emit" class="headerlink" title="子 → 父 $emit"></a>子 → 父 $emit</h3><ul><li>子$emit发送消息</li><li>父中给子添加消息监听</li><li>父中实现处理函数</li></ul><p><img src="/.com//image-20240419131827371.png" alt="image-20240419131827371"></p><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><h3 id="Prop定义"><a href="#Prop定义" class="headerlink" title="Prop定义"></a>Prop定义</h3><p>组件上注册一些自定义属性</p><h3 id="Prop作用"><a href="#Prop作用" class="headerlink" title="Prop作用"></a>Prop作用</h3><p>向子组件传递数据</p><p>特点：</p><ul><li>​可以 传递 任意<strong>数量</strong> 的prop</li><li>​    可以 传递 任意<strong>类型</strong> 的prop</li></ul><p><img src="/.com//image-20240419134855205.png" alt="image-20240419134855205"></p><h3 id="prop校验"><a href="#prop校验" class="headerlink" title="prop校验"></a>prop校验</h3><p><strong>思考</strong>：组件的prop 可以乱穿么？  不可以</p><p><strong>作用</strong>：为组件的prop指定验证要求，不符合要求，控制台就会有错误提示 → 帮助开发者，快速发现错误</p><p><strong>语法</strong>：</p><ul><li>类型校验</li><li>非空校验</li><li>默认值</li><li>自定义校验</li></ul><p><img src="/.com//image-20240419135923055.png" alt="image-20240419135923055"><br><img src="/.com//image-20240419140715188.png" alt="image-20240419140715188"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">w: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">props: &#123;</span><br><span class="line">w: &#123;</span><br><span class="line">type: 类型,</span><br><span class="line">required: true,  // 是否必填</span><br><span class="line">default:默认值,  //默认值</span><br><span class="line">validator(value) &#123;</span><br><span class="line">if(逻辑判断) &#123;</span><br><span class="line">// 自定义校验逻辑</span><br><span class="line">return true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prop-data、单向数据流"><a href="#prop-data、单向数据流" class="headerlink" title="prop &amp; data、单向数据流"></a>prop &amp; data、单向数据流</h3><p>共同点：都可以给组件提供数据</p><p>区别：</p><ul><li>data 的数据是自己的 → 随便改</li><li>prop 的数据是外部的 → 不能随便改， 要遵循单向数据流</li></ul><p>单项数据流：父级prop的数据更新，会向下流动，影响子组件。这个数据流动是单项的</p><p><img src="/.com//image-20240419141355768.png" alt="image-20240419141355768"></p><h2 id="非父子通信（拓展）-event-bus-事件总线"><a href="#非父子通信（拓展）-event-bus-事件总线" class="headerlink" title="非父子通信（拓展）-event bus 事件总线"></a>非父子通信（拓展）-event bus 事件总线</h2><p><img src="/.com//image-20240419154933160.png" alt="image-20240419154933160"></p><p><strong>作用</strong>：非父子组件之间，进行简易消息传递。（复杂场景 → Vuex）</p><ol><li>创建一个都能访问到的事件总线（空Vue实例） → utils&#x2F;EventBus.js<ul><li><img src="/.com//image-20240419154832119.png" alt="image-20240419154832119"></li></ul></li><li>A组件（接收方），监听Bus实例的事件<ul><li><img src="/.com//image-20240419154858841.png" alt="image-20240419154858841"></li></ul></li><li>B组件（发送方），触发Bus实例的事件<ul><li><img src="/.com//image-20240419154924207.png" alt="image-20240419154924207"></li></ul></li></ol><p><strong>实现</strong></p><p>组件A：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;base-a&quot;&gt;</span><br><span class="line">    我是A组件（接受方）</span><br><span class="line">    &lt;p&gt;&quot;&#123;msg&#125;&quot;&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &#x27;../utils/EventBus&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    Bus.$on(&#x27;sendMsg&#x27;, (msg) =&gt; &#123;</span><br><span class="line">      this.msg = msg</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>组件B：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;base-b&quot;&gt;</span><br><span class="line">    &lt;div&gt;我是B组件（发布方）&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;sendMsgFn&quot;&gt;发送消息&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &#x27;../utils/EventBus&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendMsgFn() &#123;</span><br><span class="line">      Bus.$emit(&#x27;sendMsg&#x27;, &#x27;今天天气不错，适合旅游&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="非父子通信-provide-inject"><a href="#非父子通信-provide-inject" class="headerlink" title="非父子通信-provide &amp; inject"></a>非父子通信-<strong>provide</strong> &amp; <strong>inject</strong></h2><p><strong>provide &amp; inject的作用：</strong>跨层级共享数据</p><p><strong>父组件： provide 提供数据</strong></p><p><img src="/.com//image-20240420094110639.png" alt="image-20240420094110639"></p><p>响应式：当修改数据时 页面会做出响应</p><p>非响应式：当修改数据时，页面不会做出响应</p><p><strong>子&#x2F;孙组件： inject 取值使用</strong></p><p><img src="/.com//image-20240420094226560.png" alt="image-20240420094226560"></p><h1 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h1><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>v-model本质上是一个语法糖。例如应用在输入框上，就是value属性 和 input事件 的合写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot; &gt;</span><br><span class="line">    &lt;input v-model=&quot;msg&quot; type=&quot;text&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input :value=&quot;msg&quot; @input=&quot;msg = $event.target.value&quot; type=&quot;text&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>提供数据的双向绑定</p><ul><li>数据变，视图跟着变：value</li><li>视图变，数据跟着变：@input</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>$event</strong> 用于在模板中，获取事件的形参</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot;  /&gt;</span><br><span class="line">    &lt;br /&gt; </span><br><span class="line">    &lt;input type=&quot;text&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg1: &#x27;&#x27;,</span><br><span class="line">      msg2: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="v-model使用在其他表单元素上的原理"><a href="#v-model使用在其他表单元素上的原理" class="headerlink" title="v-model使用在其他表单元素上的原理"></a>v-model使用在其他表单元素上的原理</h3><p>不同的表单元素， v-model在底层的处理机制是不一样的。比如给checkbox使用v-model</p><p>底层处理的是 checked属性和change事件。</p><p><strong>不过咱们只需要掌握应用在文本框上的原理即可</strong></p><h1 id="表单类组件封装-v-model-简化代码"><a href="#表单类组件封装-v-model-简化代码" class="headerlink" title="表单类组件封装 &amp; v-model 简化代码"></a>表单类组件封装 &amp; <strong>v-model</strong> 简化代码</h1><h2 id="1-表单类组件封装"><a href="#1-表单类组件封装" class="headerlink" title="1.表单类组件封装"></a><strong>1.表单类组件封装</strong></h2><ul><li>父传子：数据 应该时父组件<strong>props</strong>传递 过来的， v-model拆解绑定数据</li><li>子传父：监听输入，子传父传值给父组件修改</li></ul><p><img src="/.com//image-20240420101931245.png" alt="image-20240420101931245"></p><p><img src="/.com//image-20240420101937810.png" alt="image-20240420101937810"></p><h2 id="2-v-model简化代码"><a href="#2-v-model简化代码" class="headerlink" title="2.v-model简化代码"></a><strong>2.v-model简化代码</strong></h2><p>其实就是凑value和input这两个变量名</p><ul><li>子组件中：props 通过 value 接收，事件触发 input</li><li>父组件中：v-model 给组件直接绑定数据（:value + @input）</li></ul><p><img src="/.com//image-20240420103350723.png" alt="image-20240420103350723"></p><h1 id="sycn修饰符"><a href="#sycn修饰符" class="headerlink" title=".sycn修饰符"></a>.sycn修饰符</h1><p>作用：可以实现 <strong>子组件</strong> 与 **父组件数据 ** 的 <strong>双向绑定</strong>，简化代码</p><p>特点：prop属性名，可以<strong>自定义</strong>，非固定为 <strong>value</strong></p><p>场景：封装弹框类的基础组件，<strong>visible 属性</strong>，true显示 false隐藏</p><p>本质：就是 <code>:属性名</code> 和 <code>@update:属性名</code> 合写</p><p><img src="/.com//image-20240420110430553.png" alt="image-20240420110430553"></p><p><img src="/.com//image-20240420110554179.png" alt="image-20240420110554179"></p><h1 id="ref-和-refs"><a href="#ref-和-refs" class="headerlink" title="ref 和 $refs"></a>ref 和 $refs</h1><p><strong>作用：</strong>利用ref 和 $refs 可以用于<strong>获取 dom 元素</strong> 或<strong>组件实例</strong></p><p><strong>特点：</strong>查找范围 → 当前组件内（更精确稳定）</p><ul><li>获取dom<ul><li>目标标签 - 添加ref属性<ul><li><img src="/.com//image-20240420113017419.png" alt="image-20240420113017419"></li></ul></li><li>恰当时机，通过<code>this.$refs.xxx</code>，获取目标标签<ul><li><img src="/.com//image-20240420113105006.png" alt="image-20240420113105006"></li></ul></li></ul></li></ul><p><strong>案例1：</strong></p><p>​<img src="/.com//image-20240420113439198.png" alt="image-20240420113439198"></p><p><img src="/.com//image-20240420113612685.png" alt="image-20240420113612685"></p><p><strong>案例2：</strong></p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h4&gt;父组件 -- &lt;button&gt;获取组件实例&lt;/button&gt;&lt;/h4&gt;</span><br><span class="line">    &lt;BaseForm ref=&quot;BaseForm&quot;&gt;&lt;/BaseForm&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button @click=&quot;handleGet&quot;&gt;获取数据&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;handleReset&quot;&gt;重置数据&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import BaseForm from &#x27;./components/BaseForm.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    BaseForm,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleGet () &#123;</span><br><span class="line">      console.log(this.$refs.BaseForm.getValues())</span><br><span class="line">    &#125;,</span><br><span class="line">    handleReset () &#123;</span><br><span class="line">      this.$refs.BaseForm.resetValues()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>BaseForm.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      账号: &lt;input v-model=&quot;username&quot; type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">      密码: &lt;input v-model=&quot;password&quot; type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      username: &#x27;&#x27;,</span><br><span class="line">      password: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getValues() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        username: this.username,</span><br><span class="line">        password: this.password</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    resetValues() &#123;</span><br><span class="line">      this.username = &#x27;&#x27;</span><br><span class="line">      this.password = &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p>获取输入框里面的值</p><p><img src="/.com//image-20240420113737083.png" alt="image-20240420113737083"></p><h1 id="Vue异步更新-nextTick"><a href="#Vue异步更新-nextTick" class="headerlink" title="Vue异步更新 &amp; $nextTick"></a>Vue异步更新 &amp; $nextTick</h1><h2 id="Vue是异步更新DOM的"><a href="#Vue是异步更新DOM的" class="headerlink" title="Vue是异步更新DOM的"></a><strong>Vue是异步更新DOM的</strong></h2><p>Vue.js是一种用于构建用户界面的渐进式 JavaScript 框架。其中一个非常重要的特性是异步更新。异步更新是指当数据发生变化时，Vue不会立即更新DOM。相反，它会在下一个“tick”或渲染循环中异步执行DOM更新。这种机制可以提高性能，减少不必要的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当我们直接修改 Vue 实例的数据时，Vue 会在内部将数据更新操作放入一个异步队列中，而不是立即进行更新。</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 当点击编辑按钮时，输入框显示 并且自动获取焦点</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 编辑状态 --&gt;</span><br><span class="line">    &lt;div v-if=&quot;isShowEdit&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; v-model=&quot;editValue&quot; ref=&quot;inp&quot; /&gt;</span><br><span class="line">      &lt;button&gt;确认&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 默认状态 --&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">      &lt;span&gt;&quot;&#123; title &#125;&quot;&lt;/span&gt;</span><br><span class="line">      &lt;button @click=&quot;handleAppearance&quot;&gt;编辑&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      title: &#x27;大标题&#x27;,</span><br><span class="line">      isShowEdit: false,</span><br><span class="line">      editValue: &#x27;&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mehods: &#123;</span><br><span class="line">    handleAppearance() &#123;</span><br><span class="line">      // 显示输入框 (Vue异步更新的)</span><br><span class="line">      this.isShowEdit = true</span><br><span class="line">        // this.$refs.inp.focus()  直接这么写 是不能获取焦点的 因为Vue是异步更新的，而$nextTick 可以实现同步更新</span><br><span class="line">      // 获取焦点 ($nextTick 等dom渲染完毕后 立即执行)</span><br><span class="line">      this.$nextTick(() =&gt; &#123;</span><br><span class="line">        this.$refs.inp.focus()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h2><p>$nextTick：等DOM更新后，才会触发执行此方法里的函数体</p><p>语法：this.$nextTick(函数体)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">someDataProperty = newValue; // 异步更新</span><br><span class="line"></span><br><span class="line">this.$nextTick(() =&gt; &#123;</span><br><span class="line">  // 在更新操作完成后执行回调函数</span><br><span class="line">  // 可以获取最新的数据状态</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于那些依赖于 Vue 更新的 DOM 操作，我们需要使用 `$nextTick` 方法来确保在DOM更新完成后执行操作。</span><br></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>自己定义的指令：可以定义的一些指令，可以封装一些 dom 操作，扩展额外功能</p><ul><li><p>在需要绑定的标签上写上自定义的指令</p><ul><li><img src="/.com//image-20240421102351808.png" alt="image-20240421102351808"></li></ul></li><li><p>全局注册 - 语法</p><ul><li>在main.js中注册<ul><li><img src="/.com//image-20240421102218477.png" alt="image-20240421102218477"></li></ul></li></ul></li><li><p>局部注册 - 语法</p><ul><li>在app.vue中注册<ul><li><img src="/.com//image-20240421102316638.png" alt="image-20240421102316638"></li></ul></li></ul></li></ul><h2 id="自定义指令-指令的值"><a href="#自定义指令-指令的值" class="headerlink" title="自定义指令 - 指令的值"></a>自定义指令 - 指令的值</h2><p>需求：实现一个color指令 - 传入不同的颜色，给标签设置文字颜色</p><ul><li>语法：在绑定指令时，可以通过 “等号” 的形式 为指令绑定 具体的参数值 <code>v-指令名= &quot;指令值&quot;</code><ul><li><img src="/.com//image-20240421104209131.png" alt="image-20240421104209131"></li></ul></li><li>而后通过  <code>binding.value</code> 可以拿到指令值，指令值修改会触发update函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：inserted函数 是当元素添加到页面中时才会触发，如果已经添加到页面中，再去修改属性值 是不会触发的 这个时候 要用到一个update函数</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20240421104436281.png" alt="image-20240421104436281"></p><h2 id="自定义指令-封装v-loading指令"><a href="#自定义指令-封装v-loading指令" class="headerlink" title="自定义指令 - 封装v-loading指令"></a>自定义指令 - 封装v-loading指令</h2><p>效果：当我们去请求数据时，页面可能会空白一段时间，我们想要在空白的这段时间内 让他显示加载的动画</p><ul><li><p>实现步骤</p><ul><li><p><img src="/.com//image-20240421111012155.png" alt="image-20240421111012155"></p></li><li><p><img src="/.com//image-20240421111145791.png" alt="image-20240421111145791"></p></li></ul></li></ul><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><h2 id="插槽-默认插槽"><a href="#插槽-默认插槽" class="headerlink" title="插槽 - 默认插槽"></a>插槽 - 默认插槽</h2><p><strong>作用</strong>：让组件内部的一些 <strong>结构</strong> 支持 <strong>自定义</strong></p><p><strong>场景</strong>：当组内某一部分结构不确定，想要自定义时。</p><p><strong>需求</strong>：要在页面中显示一个对话框，封装成一个组件</p><p><strong>问题</strong>：组件的内部部分，<strong>不希望写死</strong>，希望能使用的时候<strong>自定义</strong>。怎么办？</p><p><img src="/.com//image-20240421115110618.png" alt="image-20240421115110618"></p><p>插槽基本语法：</p><ol><li>组件内需要定制的结构部分，改用<slot></slot>占位</li><li>使用组件时，<MyDialog></MyDialog>标签内部，传入结构替代slot</li></ol><p>案例：</p><p><img src="/.com//image-20240421115716517.png" alt="image-20240421115716517"></p><p><img src="/.com//image-20240421115722869.png" alt="image-20240421115722869"></p><p><img src="/.com//image-20240421115726763.png" alt="image-20240421115726763"></p><h2 id="插槽-后备插槽"><a href="#插槽-后备插槽" class="headerlink" title="插槽 - 后备插槽"></a>插槽 - 后备插槽</h2><p>插槽后备内容：封装组件时，可以为预留的 <code>&lt;slot&gt;</code> 插槽提供<strong>后备内容</strong>（默认内容）</p><ul><li>语法：在<slot> 标签内，放置内容，作为默认显示内容</slot></li><li>效果：<ul><li>外部使用组件时，步传东西，则slot会显示后备内容<ul><li><MyDialog></MyDialog></li></ul></li><li>外部使用组件时，传东西了，则slot整体会被换掉<ul><li><MyDialog>我是内容</MyDialog></li></ul></li></ul></li></ul><p><img src="/.com//image-20240421120721410.png" alt="image-20240421120721410"></p><h2 id="插槽-具名插槽"><a href="#插槽-具名插槽" class="headerlink" title="插槽 - 具名插槽"></a>插槽 - 具名插槽</h2><p><strong>组件内 有多处不确定的结构 怎么办？</strong></p><p><strong>具名插槽</strong></p><ul><li>slot占位，给name属性起名字来区分</li><li>template配合 <strong>v-slot:插槽名</strong> 分发内容v-slot:插槽名 可以简化成什么？<ul><li><strong>#插槽名</strong></li></ul></li></ul><p><img src="/.com//image-20240421122052310.png" alt="image-20240421122052310"></p><h2 id="插槽-作用域插槽"><a href="#插槽-作用域插槽" class="headerlink" title="插槽 - 作用域插槽"></a>插槽 - 作用域插槽</h2><p>作用域插槽：定义slot插槽的同时，是可以传值的。给插槽上可以绑定数据，将来 使用组件时可以使用</p><p>场景：封装表格组件</p><ol><li>子传父，动态渲染表格内容</li><li>利用默认插槽，定制操作列</li><li>删除或查看都需要用到<strong>当前项的id</strong>，属于<strong>组件内部的数据</strong>通过<strong>作用域插槽</strong>传值绑定，进而使用</li></ol><p><img src="/.com//image-20240421160300672.png" alt="image-20240421160300672"></p><p><img src="/.com//image-20240421160240117.png" alt="image-20240421160240117"></p><p><strong>作用域插槽的作用</strong>：可以给插槽上绑定数据，供将来使用组件时使用</p><p><strong>作用域插槽使用步骤？</strong></p><ul><li>给slot标签，以添加属性的方式传值<ul><li><img src="/.com//image-20240421160527128.png" alt="image-20240421160527128"></li></ul></li><li>所有属性都会被收集到一个对象中<ul><li><img src="/.com//image-20240421160535688.png" alt="image-20240421160535688"></li></ul></li><li>template中，通过 <code>#插槽名= &quot;obj&quot;</code> 接收<ul><li><img src="/.com//image-20240421160545873.png" alt="image-20240421160545873"></li></ul></li></ul><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是路由？"><a href="#什么是路由？" class="headerlink" title="什么是路由？"></a>什么是路由？</h3><p>路由是一种映射关系</p><h3 id="Vue中的路由是什么？"><a href="#Vue中的路由是什么？" class="headerlink" title="Vue中的路由是什么？"></a>Vue中的路由是什么？</h3><p><strong>路径和组件的映射关系</strong></p><p>根据路由就能知道不同路径的，应该匹配渲染哪个组件</p><h2 id="VueRouter的使用（5-2）"><a href="#VueRouter的使用（5-2）" class="headerlink" title="VueRouter的使用（5+2）"></a>VueRouter的使用（5+2）</h2><ul><li>5个基础步骤（固定）<ol><li>下载：下载VueRouter模块到工程中<ul><li>vue2 → vueRouter3 → Vuex3               vue4 → vueRouter4 → Vuex4</li><li><img src="/.com//image-20240422111024686.png" alt="image-20240422111024686"></li></ul></li><li>引入<ul><li><img src="/.com//image-20240422111041771.png" alt="image-20240422111041771"></li></ul></li><li>安装注册<ul><li><img src="/.com//image-20240422111058438.png" alt="image-20240422111058438"></li></ul></li><li>创建路由对象<ul><li><img src="/.com//image-20240422111110375.png" alt="image-20240422111110375"></li></ul></li><li>注入，将路由对象注入到new Vue实例中，建立关联<ul><li><img src="/.com//image-20240422111133017.png" alt="image-20240422111133017"></li></ul></li></ol></li><li>2个核心步骤<ol><li>创建需要的组件(放在views目录下)，配置路由规则<ul><li><strong>Find.vue  My.vue Friend.vue</strong></li><li><img src="/.com//image-20240422112132161.png" alt="image-20240422112132161"></li></ul></li><li>配置导航，配置路由出口（路径匹配的组件显示的位置）<ul><li><img src="/.com//image-20240422112213300.png" alt="image-20240422112213300"></li></ul></li></ol></li></ul><h2 id="Vue组件的分类"><a href="#Vue组件的分类" class="headerlink" title="Vue组件的分类"></a>Vue组件的分类</h2><ol><li>组件分类有哪几类？ 分类的目的是什么？<ul><li>页面组件 和 分类组件      便于维护</li></ul></li><li>放在什么文件夹？作用分别是什么？<ul><li>页面组件 - <strong>views</strong>文件夹 &#x3D;&gt; 配合路由，页面展示</li><li>复用组件 - <strong>components</strong>文件夹 &#x3D;&gt; 封装复用</li></ul></li></ol><h2 id="路由的封装抽离"><a href="#路由的封装抽离" class="headerlink" title="路由的封装抽离"></a>路由的封装抽离</h2><p>问题：所有的路由配置都堆在main.js中合适么？</p><p>目标：将路由模块抽离出来。好处：<strong>拆分模块，利于维护</strong></p><ol><li>创建router&#x2F;index.js文件<ul><li>将main.js中路由的配置 剪贴到index.js</li><li><img src="/.com//image-20240422143533462.png" alt="image-20240422143533462"></li></ul></li><li>在main.js中引入router<ul><li><img src="/.com//image-20240422143436011.png" alt="image-20240422143436011"></li></ul></li></ol><h2 id="声明式导航-导航链接"><a href="#声明式导航-导航链接" class="headerlink" title="声明式导航 - 导航链接"></a>声明式导航 - 导航链接</h2><p>需求：实现导航高亮效果</p><p>Vue-router 提供了一个全局组件 router-link （取代a标签）</p><ul><li><strong>能跳转</strong>，配置 to 属性执行路径（<strong>必须</strong>）。本质还是 a 标签， <strong>to无需 #</strong></li><li><strong>能高亮</strong>，默认就会提供<strong>高亮类名</strong>，可以直接设置高亮样式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/find&quot;&gt;发现音乐&lt;/router-link&gt;</span><br><span class="line">   &lt;router-link to=&quot;/my&quot;&gt;我的音乐&lt;/router-link&gt;</span><br><span class="line">   &lt;router-link to=&quot;/friend&quot;&gt;朋友&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>声明式导航 - 两个类名</p><p>说明：我们发现 router-link 自动给当前导航添加了<strong>两个高亮类名</strong></p><ul><li><code>router-link-active</code> 模糊匹配(用的多)<ul><li>to&#x3D;”&#x2F;my” 可以匹配 &#x2F;my    &#x2F;my&#x2F;a    &#x2F;my&#x2F;b    ….</li></ul></li><li><code>router-link-exact-active</code> 精确匹配<ul><li>to&#x3D;”&#x2F;my”   尽可以匹配   &#x2F;my</li></ul></li></ul><p><strong>如何自定义router-link 的两个高亮类名？</strong></p><ul><li><code>linkActiveClass</code> 模糊匹配 类名自定义</li><li><code>linkExactActiveClass</code> 精确匹配 类名自定义</li></ul><h2 id="声明式导航-跳转传参"><a href="#声明式导航-跳转传参" class="headerlink" title="声明式导航 - 跳转传参"></a>声明式导航 - 跳转传参</h2><ul><li><strong>查询参数查询（多个参数）</strong><ul><li>路由<ul><li><img src="/.com//image-20240422155413600.png" alt="image-20240422155413600"></li></ul></li><li>跳转：<code>to=&quot;/path?参数名=值&quot;</code><ul><li><img src="/.com//image-20240422155050008.png" alt="image-20240422155050008"></li></ul></li><li>接收：<code>$route.query.参数名</code><ul><li><img src="/.com//image-20240422155142353.png" alt="image-20240422155142353"></li></ul></li></ul></li><li><strong>动态参数查询（简洁优雅）</strong><ul><li>路由：<code>/path/:参数名</code><ul><li><img src="/.com//image-20240422155244854.png" alt="image-20240422155244854"></li></ul></li><li>跳转：<code>to=&quot;/path/值&quot;</code><ul><li><img src="/.com//image-20240422155200504.png" alt="image-20240422155200504"></li></ul></li><li>接收：<code>$route.params.参数名</code><ul><li><img src="/.com//image-20240422155210918.png" alt="image-20240422155210918"></li></ul></li></ul></li></ul><p><strong>动态参数查询有一个问题：</strong>当我们不通过传参的方式访问搜索页  而是直接访问搜索页时，会发现 没有任何页面</p><p><img src="/.com//image-20240422155930937.png" alt="image-20240422155930937"></p><p>原因：<code>/search/:words</code> 表示，必须要传参数。如果不传参数，也希望匹配，可以加一个可选符 “?”</p><p><img src="/.com//image-20240422160108022.png" alt="image-20240422160108022"></p><p><img src="/.com//image-20240422160120338.png" alt="image-20240422160120338"></p><h2 id="Vue路由-重定向"><a href="#Vue路由-重定向" class="headerlink" title="Vue路由 - 重定向"></a>Vue路由 - 重定向</h2><p>问题：网页打开，url默认是 &#x2F; 路径，未匹配到组件时，会出现空白</p><p>说明：重定向 → 匹配path后，强制跳转path路径</p><p>语法：{path: 匹配路径, redirect: 重定向到的路径}</p><p><img src="/.com//image-20240422160707625.png" alt="image-20240422160707625"></p><p><img src="/.com//image-20240422160647127.png" alt="image-20240422160647127"></p><h2 id="Vue路由-404"><a href="#Vue路由-404" class="headerlink" title="Vue路由-404"></a>Vue路由-404</h2><p>作用：当路径找不到匹配时，给个提示页面</p><p>位置：配在路由最后</p><p>语法：<code>path: &quot;*&quot;</code> （任意路径） - 前面不匹配就命中最后这个</p><p><img src="/.com//image-20240422162333727.png" alt="image-20240422162333727"></p><h2 id="Vue路由-模式设置"><a href="#Vue路由-模式设置" class="headerlink" title="Vue路由 - 模式设置"></a>Vue路由 - 模式设置</h2><p>问题：路由的路径看起来不自然，有#，能都切成真正路径形式？</p><ul><li>hash路由(默认)例如：<a href="http://localhost:8080/#/home">http://localhost:8080/#/home</a></li><li>history路由(常用)例如：<a href="http://localhost:8080/home">http://localhost:8080/home</a>(以后上线需要服务器端支持)</li></ul><p><img src="/.com//image-20240422162624077.png" alt="image-20240422162624077"></p><h2 id="Vue路由-基本跳转"><a href="#Vue路由-基本跳转" class="headerlink" title="Vue路由 - 基本跳转"></a>Vue路由 - 基本跳转</h2><p>问题：点击按钮跳转如何实现</p><p>两种语法：</p><ul><li><code>path 路径跳转(简单方便)</code>    注意这里是 <code>$router</code> 不是 <code>$route</code><ul><li><img src="/.com//image-20240423153004901.png" alt="image-20240423153004901"></li></ul></li><li><code>name 命名路由跳转(适合path超长的场景)</code> <ul><li><img src="/.com//image-20240423153406895.png" alt="image-20240423153406895"></li><li><img src="/.com//image-20240423153152450.png" alt="image-20240423153152450"></li></ul></li></ul><h2 id="Vue路由-两种跳转方式传参"><a href="#Vue路由-两种跳转方式传参" class="headerlink" title="Vue路由 - 两种跳转方式传参"></a>Vue路由 - 两种跳转方式传参</h2><ul><li><code>path 路径跳转带参数</code><ul><li>简写方式<ul><li><img src="/.com//image-20240423160230082.png" alt="image-20240423160230082"></li><li><img src="/.com//image-20240423160238246.png" alt="image-20240423160238246"></li></ul></li><li>完整写法（适合传参时，使用）<ul><li><img src="/.com//image-20240423160435212.png" alt="image-20240423160435212"></li><li><img src="/.com//image-20240423160442688.png" alt="image-20240423160442688"></li></ul></li><li><code>name 命名路径跳转带参数</code><ul><li><img src="/.com//image-20240423161131934.png" alt="image-20240423161131934"></li><li>对应的如果是params 则是 <code>$route.query.参数名</code></li><li>对应的如果是query 则是 <code>$route.params.参数名</code>   注意：这里的参数名是配置动态路径参数时写的<code>:参数名</code></li></ul></li></ul></li></ul><p>总结：</p><ul><li>​<img src="/.com//image-20240423161645115.png" alt="image-20240423161645115"></li><li><img src="/.com//image-20240423161703948.png" alt="image-20240423161703948"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">路径短用path 路径长用name</span><br></pre></td></tr></table></figure><h2 id="Vue路由-子路由（嵌套路由）"><a href="#Vue路由-子路由（嵌套路由）" class="headerlink" title="Vue路由 - 子路由（嵌套路由）"></a>Vue路由 - 子路由（嵌套路由）</h2><ul><li>在children属性中，配置属性<ul><li><img src="/.com//image-20240423195103501.png" alt="image-20240423195103501"></li></ul></li><li>配置路由出口<ul><li><img src="/.com//image-20240423194955155.png" alt="image-20240423194955155"></li></ul></li></ul><h2 id="面经项目"><a href="#面经项目" class="headerlink" title="面经项目"></a>面经项目</h2><p>参考D:&#x2F;vscode&#x2F;Vue&#x2F;vue-mianJ-projiect文件</p><p><img src="/.com//image-20240423162529145.png" alt="image-20240423162529145"></p><h2 id="组件缓存"><a href="#组件缓存" class="headerlink" title="组件缓存"></a>组件缓存</h2><p>当我通过路由跳转到其他页面时，这个页面会被销毁，再次返回的时候会被重新加载 这个时候可以用一个数据缓存</p><ul><li>keep-alive 是什么？<ul><li>Vue的内置组件，包裹动态组件时，可以缓存</li></ul></li><li>keep-alive的优点<ul><li>组件切换过程中，把切换出去的组件保留在内存中（提升性能）</li></ul></li><li>keep-alive的三个属性（了解）<ul><li><strong>include：组件名数组，只有匹配的组件会被缓存</strong></li><li>exclude：组件名数组，任何匹配的组件都不会被缓存</li><li>max：最多可以缓存多少组件实例</li></ul></li><li>keep-alive的使用会触发两个生命周期函数（了解） 当组件被缓存时，created，mounted函数就不会执行了<ul><li>activated 当组件被激活（使用）的时候触发 → 进入页面触发</li><li>deactivated 当组件不被使用的时候触发 → 离开页面触发</li></ul></li></ul><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>目标：明确vuex 是什么？应用场景，优势</p><ol><li><p>是什么？</p><ul><li>vuex 是一个vue的<strong>状态管理工具</strong> （状态就是数据）</li><li>大白话：vuex是一个插件，可以帮我们管理 vue 通用的数据 （多组间共享的数据）</li></ul></li><li><p>场景：</p><ul><li>某个状态在 很多个组件 来使用（个人信息）</li><li>多个组件共同维护一份数据（购物车）</li></ul></li><li><p>优势</p><ul><li>共同维护一份数据，数据集中化管理</li><li>响应式变化</li><li>操作简洁（vuex提供了一些辅助函数）</li></ul></li></ol><h2 id="vuex-的使用-创建仓库"><a href="#vuex-的使用-创建仓库" class="headerlink" title="vuex 的使用 - 创建仓库"></a>vuex 的使用 - 创建仓库</h2><p><img src="/.com//1683212784179.png" alt="68321278417"></p><h3 id="1-安装-vuex"><a href="#1-安装-vuex" class="headerlink" title="1.安装 vuex"></a>1.安装 vuex</h3><p>安装vuex与vue-router类似，vuex是一个独立存在的插件，如果脚手架初始化没有选 vuex，就需要额外安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuex@3 或者 npm i vuex@3</span><br></pre></td></tr></table></figure><h3 id="2-新建-store-index-js-专门存放-vuex"><a href="#2-新建-store-index-js-专门存放-vuex" class="headerlink" title="2.新建 store/index.js 专门存放 vuex"></a>2.新建 <code>store/index.js</code> 专门存放 vuex</h3><p>​为了维护项目目录的整洁，在src目录下新建一个store目录其下放置一个index.js文件。 (和 <code>router/index.js</code> 类似)</p><p>​<img src="/.com//1683212805824.png" alt="68321280582"></p><h3 id="3-创建仓库-store-index-js"><a href="#3-创建仓库-store-index-js" class="headerlink" title="3.创建仓库 store/index.js"></a>3.创建仓库 <code>store/index.js</code></h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入 vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// vuex也是vue的插件, 需要use一下, 进行插件的安装初始化</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建仓库 store</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出仓库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h3 id="4-在-main-js-中导入挂载到-Vue-实例上"><a href="#4-在-main-js-中导入挂载到-Vue-实例上" class="headerlink" title="4 在 main.js 中导入挂载到 Vue 实例上"></a>4 在 main.js 中导入挂载到 Vue 实例上</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此刻起, 就成功创建了一个 <strong>空仓库!!</strong></p><h3 id="5-测试打印Vuex"><a href="#5-测试打印Vuex" class="headerlink" title="5.测试打印Vuex"></a>5.测试打印Vuex</h3><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心概念-state状态"><a href="#核心概念-state状态" class="headerlink" title="核心概念 - state状态"></a>核心概念 - state状态</h2><p>目标：明确如何给仓库 <strong>提供</strong> 数据，如何 使用 仓库的数据</p><p><img src="/.com//image-20240424145605209.png" alt="image-20240424145605209"></p><p>使用数据：</p><ul><li>通过store直接访问<ul><li>模板中：”{ $store.state.xxx }”</li><li>组件逻辑中：this.$store.state.xxx</li><li>JS模块中：store.state.xxx</li></ul></li><li>通过辅助函数（简化）<ul><li>导入mapState<ul><li><img src="/.com//image-20240424150816193.png" alt="image-20240424150816193"></li></ul></li><li>封装到computed属性中<ul><li><img src="/.com//image-20240424150832149.png" alt="image-20240424150832149"></li></ul></li><li>直接调用属性名<ul><li><img src="/.com//image-20240424150906678.png" alt="image-20240424150906678"></li></ul></li></ul></li></ul><h2 id="核心概念-mutations"><a href="#核心概念-mutations" class="headerlink" title="核心概念 - mutations"></a>核心概念 - mutations</h2><p>vuex同样<strong>遵循单行数据流</strong>，组件中不能直接修改仓库的数据</p><p>掌握mutations对象，对象中存放修改state的方法</p><ul><li>定义mutations对象，对象中存放修改state的方法<ul><li><img src="/.com//image-20240424152950268.png" alt="image-20240424152950268"></li></ul></li><li>组件中提交调用mutations<ul><li><img src="/.com//image-20240424153031490.png" alt="image-20240424153031490"></li></ul></li></ul><h3 id="mutation传参"><a href="#mutation传参" class="headerlink" title="mutation传参"></a>mutation传参</h3><p>目标：掌握mutations传参语法</p><p>提交mutation是可以传递参数的 <code>this.$store.commit(&#39;xxx&#39;, 参数)</code></p><ul><li>提供mutation 函数 (带参数 - 提交载荷 payload)<ul><li><img src="/.com//image-20240424155414155.png" alt="image-20240424155414155"></li></ul></li><li>页面中提交调用 mutation<ul><li><img src="/.com//image-20240424155446162.png" alt="image-20240424155446162"></li></ul></li></ul><p>注意：</p><ul><li>所有mutation函数，第一个参数，都是state</li><li>mutation参数有且只有一个，state除外，如果需要多个参数，包装成一个对象<ul><li><img src="/.com//image-20240424155638070.png" alt="image-20240424155638070"></li><li><img src="/.com//image-20240424155652632.png" alt="image-20240424155652632"></li></ul></li></ul><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><p>目标：实时输入，实施更新</p><p><img src="/.com//image-20240424162014664.png" alt="image-20240424162014664"></p><p><img src="/.com//image-20240424162019320.png" alt="image-20240424162019320"></p><ul><li>输入框内容渲染<ul><li><img src="/.com//image-20240424162131956.png" alt="image-20240424162131956"></li></ul></li><li>监听输入获取内容<ul><li><img src="/.com//image-20240424162347473.png" alt="image-20240424162347473"></li></ul></li><li>封装mutation处理函数<ul><li><img src="/.com//image-20240424162230980.png" alt="image-20240424162230980"></li></ul></li><li>调用传参<ul><li><img src="/.com//image-20240424162354835.png" alt="image-20240424162354835"></li></ul></li></ul><h2 id="辅助函数：mapMutations"><a href="#辅助函数：mapMutations" class="headerlink" title="辅助函数：mapMutations"></a>辅助函数：mapMutations</h2><p>mapMutations 和 mapState 很像，它是把位于mutations中的方法提取了出来，映射到组件methods中</p><ul><li>在mutation创建方法<ul><li><img src="/.com//image-20240424165023840.png" alt="image-20240424165023840"></li></ul></li><li>导入mapMutation的包 在需要用到的组件中   只需要写左边<ul><li><img src="/.com//image-20240424165445012.png" alt="image-20240424165445012"></li><li><img src="/.com//image-20240424165110169.png" alt="image-20240424165110169"></li></ul></li><li>直接调用<ul><li><img src="/.com//image-20240425132514363.png" alt="image-20240425132514363"></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架</title>
      <link href="/2024/04/25/SSM%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/04/25/SSM%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2024/04/25/Redis/"/>
      <url>/2024/04/25/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h1><p>Redis是一个基于<strong>内存</strong>的key-value结构数据库</p><ul><li>基于内存存储，读写性能高</li><li>适合存储热点数据（热点商品、资讯、新闻）</li><li>企业应用广泛</li></ul><p>启动服务</p><p><img src="/.com//image-20240408102615968.png" alt="image-20240408102615968"></p><p>连接redis</p><p><img src="/.com//image-20240408102700977.png" alt="image-20240408102700977"></p><p>连接其他redis服务</p><p><img src="/.com//image-20240408102804692.png" alt="image-20240408102804692"></p><h1 id="5种常用数据库类型介绍"><a href="#5种常用数据库类型介绍" class="headerlink" title="5种常用数据库类型介绍"></a>5种常用数据库类型介绍</h1><p>Redis存储时key-value结构的数据，其中key是 字符串类型，value有5种常用的数据类型</p><ul><li>字符串String</li><li>哈希Hash</li><li>列表list</li><li>集合set</li><li>有序集合sorted set &#x2F; zset</li></ul><h1 id="各数据类型特点"><a href="#各数据类型特点" class="headerlink" title="各数据类型特点"></a>各数据类型特点</h1><p><img src="/.com//image-20240408104129563.png" alt="image-20240408104129563"></p><h1 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h1><h2 id="字符串操作命令"><a href="#字符串操作命令" class="headerlink" title="字符串操作命令"></a>字符串操作命令</h2><p><strong>Redis 字符串类型 常用命令</strong></p><ul><li>set key value     设置指定key的值<ul><li><img src="/.com//image-20240408105300833.png" alt="image-20240408105300833"></li></ul></li><li>get key               获取指定key的值<ul><li><img src="/.com//image-20240408105311681.png" alt="image-20240408105311681"></li></ul></li><li>setex key seconds value        设置指定key的值，并将key的过期时间设为seconds秒<ul><li><img src="/.com//image-20240408105412543.png" alt="image-20240408105412543"></li></ul></li><li>setnx key value          只有在key不存在时设置key的值<ul><li><img src="/.com//image-20240408105512093.png" alt="image-20240408105512093"></li></ul></li></ul><h2 id="哈希操作命令"><a href="#哈希操作命令" class="headerlink" title="哈希操作命令"></a>哈希操作命令</h2><p><strong>Redis hash 是一个string类型的 filed 和 value 的映射表， hash特别适合用于存储对象</strong></p><ul><li>hset key filed value将哈希表key中的filed的值设置成value<ul><li><img src="/.com//image-20240408110412162.png" alt="image-20240408110412162"></li></ul></li><li>hget key filed获取存储在哈希表中指定字段的值<ul><li><img src="/.com//image-20240408110433969.png" alt="image-20240408110433969"></li></ul></li><li>hdel key filed value删除存储在哈希表中的指定字段<ul><li><img src="/.com//image-20240408110505990.png" alt="image-20240408110505990"></li></ul></li><li>hkeys key获取哈希表中所有的字段<ul><li><img src="/.com//image-20240408110535436.png" alt="image-20240408110535436"></li></ul></li><li>hvals key获取哈希表中所有的值<ul><li><img src="/.com//image-20240408110623166.png" alt="image-20240408110623166"></li></ul></li></ul><h2 id="列表操作命令"><a href="#列表操作命令" class="headerlink" title="列表操作命令"></a>列表操作命令</h2><p><strong>Redis 列表是简单的字符串列表，按照插入顺序排序</strong></p><ul><li>lpush key value [value2]将一个或者多个值插入到列表头部<ul><li><img src="/.com//image-20240408111903507.png" alt="image-20240408111903507"></li></ul></li><li>lrange key start stop获取列表指定范围内的数据<ul><li><img src="/.com//image-20240408111956978.png" alt="image-20240408111956978"></li></ul></li><li>rpop key移除并获取列表最后一个元素<ul><li><img src="/.com//image-20240408112009063.png" alt="image-20240408112009063"></li></ul></li><li>llen key获取列表长度<ul><li><img src="/.com//image-20240408112016775.png" alt="image-20240408112016775"></li></ul></li></ul><h2 id="集合操作命令"><a href="#集合操作命令" class="headerlink" title="集合操作命令"></a>集合操作命令</h2><p>Redis set 是 string 类型的 无序集合。 集合成员是唯一的，集合中不能出现重复的数据</p><ul><li>sadd key  member1 [member2]向集合添加一个或多个成员<ul><li><img src="/.com//image-20240408113216289.png" alt="image-20240408113216289"></li></ul></li><li>smembers key返回集合中的所有成员<ul><li><img src="/.com//image-20240408113234669.png" alt="image-20240408113234669"></li></ul></li><li>scard key获取集合的成员数<ul><li><img src="/.com//image-20240408113251073.png" alt="image-20240408113251073"></li></ul></li><li>sinter key1 [key2]返回给定所有集合的交集<ul><li><img src="/.com//image-20240408113340416.png" alt="image-20240408113340416"></li></ul></li><li>sunion key1 [key2]返回所有给定集合的并集<ul><li><img src="/.com//image-20240408113355141.png" alt="image-20240408113355141"></li></ul></li><li>srem key member1 [member2]删除集合中一个或多个成员<ul><li><img src="/.com//image-20240408113445398.png" alt="image-20240408113445398"></li></ul></li></ul><h2 id="有序集合操作命令"><a href="#有序集合操作命令" class="headerlink" title="有序集合操作命令"></a>有序集合操作命令</h2><p>Redis 有序集合是string 类型元素的集合，且不允许有重复成员，每个元素都会关联一个double类型的分</p><ul><li>zadd key score1 member1 [score2 member2]向有序集合添加一个或多个成员<ul><li><img src="/.com//image-20240408124225573.png" alt="image-20240408124225573"></li></ul></li><li>zrange key start stop [withscores]通过索引区间返回有序集合中指定区间的成员<ul><li><img src="/.com//image-20240408124253610.png" alt="image-20240408124253610"></li></ul></li><li>zincrby key increment member有序集合中对指定成员的分数加上增量increment<ul><li><img src="/.com//image-20240408124310049.png" alt="image-20240408124310049"></li></ul></li><li>zrem key member [member…]移除有序集合中的一个或多个成员<ul><li><img src="/.com//image-20240408124334951.png" alt="image-20240408124334951"></li></ul></li></ul><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><p>Redis 的通用命令是不分数据类型的，都可以使用的命令</p><ul><li>keys pattern查找所有符合给定模式（pattern）的key<ul><li><img src="/.com//image-20240408125039326.png" alt="image-20240408125039326"></li></ul></li><li>exists key检查给定key是否存在<ul><li><img src="/.com//image-20240408125055452.png" alt="image-20240408125055452"></li></ul></li><li>type key返回key所存储的值的类型<ul><li><img src="/.com//image-20240408125155737.png" alt="image-20240408125155737"></li></ul></li><li>del key该命令用于在key存在时删除key<ul><li><img src="/.com//image-20240408125231997.png" alt="image-20240408125231997"></li></ul></li></ul><h1 id="Redi的Java客户端"><a href="#Redi的Java客户端" class="headerlink" title="Redi的Java客户端"></a>Redi的Java客户端</h1><p>Redis 的 Java 客户端有很多，常用的有：</p><ul><li>Jedis</li><li>Lettuce</li><li>Spring Data Redis<ul><li>Spring Data Redis 是Spring 的一部分，对Redis 底层开发包进行了高度的封装，在Spring项目中，可以使用Spring Data Redis来简化操作</li></ul></li></ul><h2 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h2><p><img src="/.com//image-20240408142455534.png" alt="image-20240408142455534"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2024/04/25/Linux/"/>
      <url>/2024/04/25/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h1><p>$$<br>ls [-a -l -h] [Linux路径]<br>$$</p><h3 id="1-ls命令的参数的作用"><a href="#1-ls命令的参数的作用" class="headerlink" title="1.ls命令的参数的作用"></a>1.<strong>ls命令的参数的作用</strong></h3><p>可以指定要查看的文件夹（目录）的内容，如果不给定参数，就查看当前工作目录的内容</p><h3 id="2-ls命令的选项"><a href="#2-ls命令的选项" class="headerlink" title="2.ls命令的选项"></a>2.ls命令的选项</h3><ul><li><p>-a选项，可以展示出隐藏的内容</p><p>​以 . 开头的文件或文件夹默认被隐藏，需要-a才能显示出来</p></li><li><p>-l选项，以列表的形式展示内容，并展示更多细节</p></li><li><p>-h选项，需要和-l选项搭配使用，以更人性化的方式显示文件的大小单位</p></li></ul><h3 id="3-命令的选项组合使用"><a href="#3-命令的选项组合使用" class="headerlink" title="3.命令的选项组合使用"></a>3.命令的选项组合使用</h3><ul><li>命令的选项是可以组合使用的，如：ls -lah，等同于 ls -l -a -h</li></ul><h1 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h1><p><strong>Change Directory</strong></p><p>cd命令可以切换当前工作目录，语法是：cd [Linux 目录]</p><ul><li>没有选项，只有参数，表示目标路径</li><li>使用参数，切换到指定路径</li><li>不适用参数，切换工作目录到当前用户的HOME</li></ul><h1 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h1><p><strong>Print Work Directory</strong></p><ul><li><p>pwd命令，没有选项，没有参数，直接使用即可</p></li><li><p>作用是：输出当前所在的工作目录</p></li></ul><h1 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h1><h3 id="相对路径和绝对路径-1"><a href="#相对路径和绝对路径-1" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><ul><li>绝对路径：以根路径为起点，描述路径的方式，路径以&#x2F;开头</li><li>相对路径：以当前目录为起点，描述路径的方式，路径不需要&#x2F;开头</li><li>如无特殊需求，后续学习，将经常使用相对路径表示</li></ul><h3 id="特殊路径符有哪些？"><a href="#特殊路径符有哪些？" class="headerlink" title="特殊路径符有哪些？"></a>特殊路径符有哪些？</h3><ul><li>. 表示当前目录，比如cd . 或 cd .&#x2F;Desktop</li><li>.. 表示上一级目录，比如：cd .. 或 cd ..&#x2F;        cd..&#x2F;..&#x2F;代表上二级目录</li><li>~ 表示用户的Home目录，比如 cd ~ 或 cd ~&#x2F;Desktop</li></ul><h1 id="mkdir创建文件夹"><a href="#mkdir创建文件夹" class="headerlink" title="mkdir创建文件夹"></a>mkdir创建文件夹</h1><h3 id="mkdir命令的语法和功能"><a href="#mkdir命令的语法和功能" class="headerlink" title="mkdir命令的语法和功能"></a>mkdir命令的语法和功能</h3><ul><li>mkdir用以创建新的目录(文件夹)</li><li>语法： <strong>mkdir [-p] Linux路径</strong></li><li>参数必填，表示要创建的目录的路径，相对，绝对，特殊路径符都可以使用</li></ul><h3 id="p选项的作用"><a href="#p选项的作用" class="headerlink" title="-p选项的作用"></a>-p选项的作用</h3><ul><li>可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录</li></ul><h1 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a>touch创建文件</h1><ul><li><p>用于创建一个新文件</p></li><li><p>语法：<strong>touch Linux路径</strong></p></li><li><p>参数必填，表示要创建的文件路径，相对、绝对、特殊路径都可以使用</p></li></ul><h1 id="cat查看文件"><a href="#cat查看文件" class="headerlink" title="cat查看文件"></a>cat查看文件</h1><ul><li>用于查看文件的内容</li><li>语法：<strong>cat Linux路径</strong></li><li>参数必填，表示要查看的文件的路径，相对、绝对、特殊路径符都可以使用</li></ul><h1 id="more查看文件"><a href="#more查看文件" class="headerlink" title="more查看文件"></a>more查看文件</h1><ul><li><p>用于查看文件内容，可翻页查看</p></li><li><p>语法：<strong>more Linux路径</strong></p></li><li><p>参数必填，表示要查看的文件的路径，相对，绝对，特殊路径符都可以使用</p></li><li><p>使用空格进行翻页，使用q推出查看</p></li></ul><h1 id="cp复制"><a href="#cp复制" class="headerlink" title="cp复制"></a>cp复制</h1><ul><li>用于复制文件或文件夹</li><li>语法：cp [-r] 参数1 参数2</li><li>-r选项，可选，用于复制文件夹使用，表示递归</li><li>参数1，Linux路径，表示被复制的文件或文件夹</li><li>参数2，Linux路径，表示要复制去的地方</li></ul><h1 id="mv移动"><a href="#mv移动" class="headerlink" title="mv移动"></a>mv移动</h1><ul><li>用于移动文件或文件夹</li><li>语法：mv 参数1 参数2</li><li>参数1，Linux路径 ，表示被移动的文件或文件夹</li><li>参数2，Linux路径，表示移动去的地方，如果目标不存在，则进行改名，确保目标文件存在</li></ul><h1 id="rm删除"><a href="#rm删除" class="headerlink" title="rm删除"></a>rm删除</h1><ul><li>用于删除文件或文件夹</li><li>语法：rm [-r -f] 参数1 参数2….参数n</li><li>-r 选项，可选，文件夹删除</li><li>-f 选项，可选，用于强制删除（不提示，一般用于root用户）</li><li>参数，表示被删除的文件或文件夹路径，支持多个，空格隔开</li><li>参数也支持通配符*，用以做模糊匹配</li><li>text* 匹配以text开头的文件或文件夹</li><li>*text  匹配text结尾的文件或文件夹</li><li>*text *  匹配包含text的文件或文件夹</li></ul><h1 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h1><ul><li>查找命令的程序文件</li><li>语法：which 要查找的命令</li><li>无需选项，只需要参数表示查找那个命令</li></ul><h1 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h1><ul><li><p>用于查找指定的文件</p></li><li><p>按文件名查找： <code>find 起始路径 -name &quot;被查找文件名&quot;</code></p></li><li><p><code>find / name &quot;文件名&quot;</code></p></li><li><p>支持通配符</p></li><li><p>按文件大小查找：<code>find 起始路径 -size +|-n [KMG]</code></p></li><li><pre><code>查找小于10KB的文件：find / -size -10k查找小于100MB的文件：find / -size -100mb查找大于1GB的文件：find / -size +1GB<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"># grep命令</span><br><span class="line"></span><br><span class="line">- 从文件种通过关键字过滤文件行</span><br><span class="line">- 语法：`grep [-n] 关键字 文件路径`</span><br><span class="line">- 选项 -n, 可选 ，表示在结果中显示匹配的行的行号</span><br><span class="line">- 参数，关键字，必填，表示过滤的关键字，建议使用&quot; &quot;讲关键字包围起来</span><br><span class="line">- 参数，文件路径，必填，表示要过滤内容的文件路径，**可作为管道符的输入**</span><br><span class="line"></span><br><span class="line"># **WC**命令</span><br><span class="line"></span><br><span class="line">- 命令统计文件的行数，单词数量、字节数、字符数等</span><br><span class="line">- 语法：`wc [-c  -m  -l  -w]  文件路径`</span><br><span class="line">- 不带选项默认统计：行数、单词数、字节数</span><br><span class="line">- -c 字节数、-m 字符数、 -l 行数、-w单词数</span><br><span class="line">- 参数，被统计的文件路径，**可作为管道符的输入** </span><br><span class="line"></span><br><span class="line"># 管道符  “|”</span><br><span class="line"></span><br><span class="line">- 讲管道符左边命令的结果，作为右边命令的输入</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line"></span><br><span class="line">对创建的text.txt 进行统计</span><br><span class="line"></span><br><span class="line">请使用cat、grep、管道符、wc命令组合，进行统计</span><br><span class="line"></span><br></pre></td></tr></table></figure>统计文件中带有itcast关键字的有几行  cat test.txt | grep itcast | wc -l统计文件中带有itheima关键字的结果中有几个单词  cat test.txt | grep itheima | wc -w<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># echo命令</span><br><span class="line"></span><br><span class="line">可以使用echo命令在命令行内输出指定的额内容</span><br><span class="line"></span><br><span class="line">语法：`echo 输出的内容`</span><br><span class="line"></span><br><span class="line">- 无需选选个，只有一个参数，表示哟啊输出的内容，复杂内容可以用“ &quot;包围</span><br><span class="line"></span><br><span class="line">  演示：</span><br><span class="line"></span><br><span class="line">  - 在终端上显示：Hello Linux</span><br><span class="line"></span><br></pre></td></tr></table></figure>  echo Hello Linux  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 带有空格或\等特殊符号，建议使用双引号包围</span><br><span class="line"></span><br><span class="line">  - ​因为不包围的话，空格很容易被识别为参数2，尽管echo不受影响</span><br><span class="line"></span><br></pre></td></tr></table></figure>  echo &quot;Hello Linux&quot;  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 反引号`  （飘号）</span><br><span class="line"></span><br><span class="line">看一下如下命令：echo pwd</span><br><span class="line"></span><br><span class="line">![Snipaste_2024-02-29_09-57-38](./Linux/Snipaste_2024-02-29_09-57-38.jpg)</span><br><span class="line"></span><br><span class="line">他会直接输出pwd   但我此时想让他输出pwd的结果 </span><br><span class="line"></span><br><span class="line">这个时候 就要用到 ` 符号</span><br><span class="line"></span><br><span class="line">![Snipaste_2024-02-29_09-58-58](./Linux/Snipaste_2024-02-29_09-58-58.jpg)</span><br><span class="line"></span><br><span class="line">被 ` 包围的内容 会被当成命令执行 而非普通字符</span><br><span class="line"></span><br><span class="line"># 重定向符 &gt; 和 &gt;&gt;</span><br><span class="line"></span><br><span class="line">- **&quot; &gt; &quot;，将左侧命令的结果，覆盖写入到符号右侧指定的文件中**</span><br><span class="line"></span><br><span class="line">- **&quot; &gt;&gt; &quot;, 将左侧命令的结果，追加写入到符号右侧指定的文件中**</span><br><span class="line"></span><br><span class="line">  演示：</span><br><span class="line"></span><br><span class="line">  ![Snipaste_2024-02-29_10-06-08](./Linux/Snipaste_2024-02-29_10-06-08.jpg)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"># vi\vim编辑器</span><br><span class="line"></span><br><span class="line">**vi\vim是visual interface的简称，是Linux中最经典的文本编辑器**</span><br><span class="line"></span><br><span class="line">**同图形化界面中的文本编辑器一样，vi是命令行下对文本文件进行编辑的绝佳选择**</span><br><span class="line"></span><br><span class="line">vim是vi的加强版本，兼容vi的所有指令，不仅能编辑文本，而且还具有shell程序编辑的功能，可以不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性</span><br><span class="line"></span><br><span class="line">![Snipaste_2024-02-29_10-56-46](./Linux/Snipaste_2024-02-29_10-56-46.jpg)</span><br><span class="line"></span><br><span class="line">![Snipaste_2024-02-29_10-57-24](./Linux/Snipaste_2024-02-29_10-57-24.jpg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>vim hello.txt  如果hello.txt文件不存在  则会自动创建输入i\a\o 进入编辑模式  esc退出编辑   :wq  保存退出<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">| 模式         | 命令  | 描述                              |</span><br><span class="line">| ------------ | ----- | --------------------------------- |</span><br><span class="line">| **命令模式** | `i`   | 在当前光标位置进入 `输入模式`     |</span><br><span class="line">| **命令模式** | `a`   | 在当前光标位置之后进入 `输入模式` |</span><br><span class="line">| **命令模式** | `I`   | 在当前行的开头进入 `输入模式`     |</span><br><span class="line">| **命令模式** | `A`   | 在当前行的结尾进入 `输入模式`     |</span><br><span class="line">| **命令模式** | `o`   | 在当前光标下一行进入 `输入模式`   |</span><br><span class="line">| **命令模式** | `O`   | 在当前光标上一行进入 `输入模式`   |</span><br><span class="line">| **输入模式** | `esc` | 任何情况下`esc` 都能回到命令模式  |</span><br><span class="line"></span><br><span class="line">****</span><br><span class="line"></span><br><span class="line">| 模式         | 命令             | 描述                   |</span><br><span class="line">| ------------ | ---------------- | ---------------------- |</span><br><span class="line">| **命令模式** | `键盘上、键盘k`  | 向上移动光标           |</span><br><span class="line">| **命令模式** | `键盘下、键盘j`  | 向下移动光标           |</span><br><span class="line">| **命令模式** | `键盘左、键盘h`  | 向左移动光标           |</span><br><span class="line">| **命令模式** | `键盘右、键盘l`  | 向右移动光标           |</span><br><span class="line">| **命令模式** | `0`              | 移动光标到当前行的开头 |</span><br><span class="line">| **命令模式** | `$`              | 移动光标到当前行的结尾 |</span><br><span class="line">| **命令模式** | `pageup(Pgup)`   | 向上翻页               |</span><br><span class="line">| **命令模式** | `pagedown(PgDn)` | 向下翻页               |</span><br><span class="line">| **命令模式** | `/`              | 进入搜索模式           |</span><br><span class="line">| **命令模式** | `n`              | 向下继续搜索           |</span><br><span class="line">| **命令模式** | `N`              | 向上继续搜索           |</span><br><span class="line"></span><br><span class="line">| **模式**     | 命令       | 描述                             |</span><br><span class="line">| ------------ | ---------- | -------------------------------- |</span><br><span class="line">| **命令模式** | `dd`       | 删除光标所在行的内容             |</span><br><span class="line">| **命令模式** | `ndd`      | n是数字，表示删除当前光标向下n行 |</span><br><span class="line">| **命令模式** | `yy`       | 复制当前行                       |</span><br><span class="line">| **命令模式** | `nyy`      | n是数字，复制当前行和下面的n行   |</span><br><span class="line">| **命令模式** | `p`        | 粘贴复制的内容                   |</span><br><span class="line">| **命令模式** | `u`        | 撤销修改                         |</span><br><span class="line">| **命令模式** | `ctrl + r` | 反向撤销修改                     |</span><br><span class="line">| **命令模式** | `gg`       | 跳到首行                         |</span><br><span class="line">| **命令模式** | `G`        | 跳到行尾                         |</span><br><span class="line">| **命令模式** | `dG`       | 从当前行开始，向下全部删除       |</span><br><span class="line">| **命令模式** | `dgg`      | 从当前行开始，向上全部删除       |</span><br><span class="line">| **命令模式** | `d$`       | 从当前光标开始，删除到本行的结尾 |</span><br><span class="line">| **命令模式** | `d0`       | 从当前光标开始，删除到本行的开头 |</span><br><span class="line"></span><br><span class="line"># SU命令</span><br><span class="line"></span><br><span class="line">- 可以切换用户，语法：`su [-] [用户名]`</span><br><span class="line">- ‘ - ’ 表示切换后加载环境变量，建议带上</span><br><span class="line">- 用户可以省略 省略默认是root</span><br><span class="line"></span><br><span class="line"># sudo命令</span><br><span class="line"></span><br><span class="line">- 可以让一条普通命令带有root权限，语法：sudo 其他命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>sudo mkdir raehp<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- 需要以root用户执行sudo命令，增加配置方法可以让普通用户有sudo命令的执行权限</span><br><span class="line"></span><br><span class="line"># 用户组</span><br><span class="line"></span><br><span class="line">## 用户管理</span><br><span class="line"></span><br><span class="line">以下命令需要root用户执行</span><br><span class="line"></span><br><span class="line">1.**创建用户 `useradd [ -g -d ] 用户名`**</span><br><span class="line"></span><br><span class="line">- 选项：-g 指定用户的组，不指定 -g 会创建同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g</span><br><span class="line"></span><br><span class="line">- -d 指定用户的HOME路径，不指定，HOME路径默认在：/home/用户名</span><br><span class="line"></span><br><span class="line">2.**删除用户 `userdel [-r] 用户名`**</span><br><span class="line"></span><br><span class="line">- 选项 ： -r 删除用户HOME目录，不适用-r，删除用户时，HOME目录保留</span><br><span class="line"></span><br><span class="line">3.**查看用户所属组 `id [用户名]`**</span><br><span class="line"></span><br><span class="line">- 参数：用户名，被查看的用户，如果不提供则查看自身</span><br><span class="line"></span><br><span class="line">4.**修改用户所属组 `usermod -aG 用户组 用户名`**</span><br><span class="line"></span><br><span class="line">- 将指定用户加入到用户组</span><br><span class="line"></span><br><span class="line">## getent</span><br><span class="line"></span><br><span class="line">- 使用getent命令，可以查看当前系统中有那些用户</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语法：`getent passwd`</span><br><span class="line"></span><br><span class="line">![11](./Linux/11.jpg)</span><br><span class="line"></span><br><span class="line">- 查看系统和全部组信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语法：`getent group`</span><br><span class="line"></span><br><span class="line">![image-20240306104503796](./Linux/image-20240306104503796.png)</span><br><span class="line"></span><br><span class="line">## 权限控制信息</span><br><span class="line"></span><br><span class="line">`ls -l`  列出的权限信息如何解读</span><br><span class="line"></span><br><span class="line">![image-20240306115310673](./Linux/image-20240306115310673.png)</span><br><span class="line"></span><br><span class="line">- 序号1：表示文件、文件夹的控制信息</span><br><span class="line">- 序号2：表示文件、文件夹所属用户</span><br><span class="line">- 序号3：表示文件、文件夹所属用户组</span><br><span class="line"></span><br><span class="line">## 权限细节解读</span><br><span class="line"></span><br><span class="line">![image-20240306115336924](./Linux/image-20240306115336924.png)</span><br><span class="line"></span><br><span class="line">## rwx分别代表什么</span><br><span class="line"></span><br><span class="line">- r，针对文件可以查看文件内容</span><br><span class="line">  - 针对文件夹，可以查看文件夹内容，如 ls 命令</span><br><span class="line"></span><br><span class="line">- w，针对文件表示可以修改此文件</span><br><span class="line">  - 针对文件夹，可以在文件夹内：创建、删除、改名等操作</span><br><span class="line"></span><br><span class="line">- x，针对文件表示可以将文件作为程序执行</span><br><span class="line">  - 针对文件夹，表示可以更改工作目录到此文件夹，即cd进入</span><br><span class="line"></span><br><span class="line"># chmod命令修改权限</span><br><span class="line"></span><br><span class="line">- 功能，修改文件、文件夹的权限细节</span><br><span class="line"></span><br><span class="line">- 限制，只能是文件、文件夹的所属用户或root有权修改</span><br><span class="line"></span><br><span class="line">- 语法：`chmod -R 权限 文件夹路径`</span><br><span class="line"></span><br><span class="line">- 选项：-R ，对文件夹内的全部内容应用同样规则</span><br><span class="line"></span><br><span class="line">权限的数组序号</span><br><span class="line"></span><br><span class="line">- r代表4，w代表2，x代表1</span><br><span class="line">- rwx的相互组合可以得到从0到7的8中权限组合</span><br><span class="line">- 如7代表rwx 5 代表r-x 1代表--x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![image-20240307090457051](./Linux/image-20240307090457051.png)</span><br><span class="line"></span><br><span class="line">![image-20240307090659129](./Linux/image-20240307090659129.png)</span><br><span class="line"></span><br></pre></td></tr></table></figure>将hello.txt的权限修改为：r-x--xr-x，数字序号代表为：515将hello.txt的权限修改为：-wx-w-rw-，数字序号代表为：326序号123代表的权限是：--x-w--wx<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># chown命令</span><br><span class="line"></span><br><span class="line">使用chown命令可以修改文件、文件夹的所属用户和组</span><br><span class="line"></span><br><span class="line">普通用户无法修改所属为其他用户或组，所以此命令只适用于root用户执行</span><br><span class="line"></span><br><span class="line">语法：`chown [-R] [用户][:][用户组] 文件或文件夹`</span><br><span class="line"></span><br><span class="line">- 选项，-R，同chmod，对文件夹内全部内容应用同样规则</span><br><span class="line">- 选项，用户，修改所属用户</span><br><span class="line">- 选项，用户组， 修改所属用户组</span><br><span class="line">- : 用于分割用户和用户组</span><br><span class="line"></span><br><span class="line">![image-20240307092821107](./Linux/image-20240307092821107.png)</span><br><span class="line"></span><br><span class="line">![image-20240307092909489](./Linux/image-20240307092909489.png)</span><br><span class="line"></span><br><span class="line"># 光标移动快捷键</span><br><span class="line"></span><br><span class="line">- ctrl + a，跳到命令开头</span><br><span class="line">- ctrl + e，跳到命令结尾</span><br><span class="line">- ctrl + 键盘左键，向左跳一个单词</span><br><span class="line">- ctrl + 键盘右键，向右跳一个单词</span><br><span class="line"></span><br><span class="line"># systemctl命令</span><br><span class="line"></span><br><span class="line">`systemctl start|stop|status|enable（开启开机自启）|disable（关闭开机自启） 服务名`</span><br><span class="line"></span><br><span class="line">Linux系统很多软件（内置或第三方）均支持使用systemctl命令</span><br><span class="line"></span><br><span class="line">系统内置服务均可被syetemctl控制</span><br><span class="line"></span><br><span class="line">第三方软件，如果自动注册了可以被syetemctl控制</span><br><span class="line"></span><br><span class="line">第三方软件，如果没有自动注册，可以自动注册</span><br><span class="line"></span><br><span class="line">系统内置的服务比较多，如：</span><br><span class="line"></span><br><span class="line">- NetworkManager，主网络服务</span><br><span class="line">- network，副网络服务</span><br><span class="line">- firewalld，防火墙服务</span><br><span class="line">- sshd，ssh（FinalShell远程登陆Linux使用的就是这个服务）</span><br><span class="line"></span><br><span class="line">- `yum install -y ntp`  安装ntp软件</span><br><span class="line">  - 可以通过ntpd服务名，配合systemctl进行控制</span><br><span class="line"></span><br><span class="line">- `yum install -y httpd`  安装apache服务器软件</span><br><span class="line">  - 可以通过httpd服务名，配合systemctl进行控制</span><br><span class="line"></span><br><span class="line">**部分软件安装后没有自动集成到systermctl中，我们可以手动添加，这部分内容在后续章节和大家详细讲解**</span><br><span class="line"></span><br><span class="line"># 软连接</span><br><span class="line"></span><br><span class="line">在系统中创建软连接，可以将文件、文件夹链接到其他位置</span><br><span class="line"></span><br><span class="line">类似于Windows系统中的《快捷方式》</span><br><span class="line"></span><br><span class="line">语法：`ln -s 参数1 参数2`</span><br><span class="line"></span><br><span class="line">- -s 选项，创建软链接</span><br><span class="line">- 参数1：被链接的文件或文件夹</span><br><span class="line">- 参数2：要链接去的目的地</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"></span><br></pre></td></tr></table></figure>ln -s /etc/yum.conf ~/yum.confln -s /etc/yum ~/yum<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Date命令</span><br><span class="line"></span><br><span class="line">##### 1.date命令可以查看日期时，并可以格式化显示形式以及做日期计算</span><br><span class="line"></span><br><span class="line">语法：`date [-d] [+格式化字符串]`</span><br><span class="line"></span><br><span class="line">![image-20240307171852955](./Linux/image-20240307171852955.png)</span><br><span class="line"></span><br><span class="line">##### 2.如何修改Linux时区</span><br><span class="line"></span><br></pre></td></tr></table></figure>rm -f /etc/localtimesudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 3.ntp作用</span><br><span class="line"></span><br><span class="line">可以自动联网同步时间也可以通过`ntpdate -u ntp.aliyun.com`手动校准时间</span><br><span class="line"></span><br><span class="line">也可以安装ntp实现自动同步</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul><p>###自动联网同步时间</p><p>yum -y install ntp</p><h1 id="启动ntp服务"><a href="#启动ntp服务" class="headerlink" title="启动ntp服务"></a>启动ntp服务</h1><p>systemctl start ntpd</p><h1 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h1><p>systemctl enable ntpd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># hostname主机名</span><br><span class="line"></span><br><span class="line">hostname查看主机名</span><br><span class="line"></span><br><span class="line">![image-20240313090859828](./Linux/image-20240313090859828.png)</span><br><span class="line"></span><br><span class="line">修改主机名</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hostnamectl set-hostname 主机名<br>但是要用root用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20240313091025722](./Linux/image-20240313091025722.png)</span><br><span class="line"></span><br><span class="line">**什么是主机名？**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主机名就是一些主机的名称，用于标识一个计算机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># IP</span><br><span class="line"></span><br><span class="line">**1.什么是IP地址，有什么作用？**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>IP地址是互联网计算机的网络地址，用于在网络中进行定位</p><p>格式是： a.b.c.d ，其中abcd是0~255之间的数字</p><p>特殊IP有127.0.0.1，本机回环IP，表示本机</p><p>0.0.0.0：也可以表示本机，也可以在一些白名单中表示任意IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**2.什么是域名解析？（主机名映射）**</span><br><span class="line"></span><br><span class="line">可以通过主机名找到对应计算机的IP地址，这就是主机名映射（域名解析）</span><br><span class="line"></span><br><span class="line">先通过系统本地的记录去寻找，找不到就联网去公开的DNS服务器寻找</span><br><span class="line"></span><br><span class="line"># Ping</span><br><span class="line"></span><br><span class="line">使用ping命令可以测试到某服务器是否可联通</span><br><span class="line"></span><br><span class="line">语法：`ping [-c num] ip或主机名`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-c  测试的次数 如果不声明 那么他将一直测试下去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20240320092924539](./Linux/image-20240320092924539.png)</span><br><span class="line"></span><br><span class="line"># Wget命令</span><br><span class="line"></span><br><span class="line">使用wget命令可以进行网络文件下载</span><br><span class="line"></span><br><span class="line">语法：`wget [-b] url`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-b 代表后台下载<br>  使用后台下载后 可以通过 tail -f 跟踪查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># netstat命令</span><br><span class="line"></span><br><span class="line">功能：查看端口占用</span><br><span class="line"></span><br><span class="line">用法：`netstat -anp | grep xxx`</span><br><span class="line"></span><br><span class="line"># curl</span><br><span class="line"></span><br><span class="line">使用curl命令可以发起网络请求</span><br><span class="line"></span><br><span class="line">语法：`curl [-O] url`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-O  用于下载使用</p><p>带个python 还可以爬取数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20240320093007913](./Linux/image-20240320093007913.png)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>curl cip.cc  向cip.cc发起网络请求<br>可以获取公网ip  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20240320093114739](./Linux/image-20240320093114739.png)</span><br><span class="line"></span><br><span class="line"># 端口</span><br><span class="line"></span><br><span class="line">## 简介</span><br><span class="line"></span><br><span class="line">端口是指计算机和外部交互的出入口，可以分为物理端口和虚拟端口</span><br><span class="line"></span><br><span class="line">- 物理端口：USB、HDMI、DP、VGA、RJ45等</span><br><span class="line">- 虚拟端口：虚拟系统和外部交互的出入口</span><br><span class="line"></span><br><span class="line">IP只能确定计算机，通过端口才能锁定要交互的程序</span><br><span class="line"></span><br><span class="line">## 端口的划分</span><br><span class="line"></span><br><span class="line">![image-20240320095755940](./Linux/image-20240320095755940.png)</span><br><span class="line"></span><br><span class="line">## 查看端口占用</span><br><span class="line"></span><br><span class="line">- `nmap ip地址`  查看指定ip的对外暴露端口</span><br><span class="line"></span><br><span class="line">![image-20240320100027215](./Linux/image-20240320100027215.png)</span><br><span class="line"></span><br><span class="line">- `netstat -anp | grep 端口号/进程号` 查看本机端口的占用情况 或某个进程占用了那个端口</span><br><span class="line"></span><br><span class="line">![image-20240320100106053](./Linux/image-20240320100106053.png)</span><br><span class="line"></span><br><span class="line">![image-20240320100119855](./Linux/image-20240320100119855.png)</span><br><span class="line"></span><br><span class="line"># 进程</span><br><span class="line"></span><br><span class="line">## 什么是进程？</span><br><span class="line"></span><br><span class="line">​进程是指程序在操作系统内运行后被注册为系统内的一个进程，并拥有独立的进程ID（进程号）</span><br><span class="line"></span><br><span class="line">## ps -ef 查看进程</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ps [-e -f]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![image-20240328190916823](./Linux/image-20240328190916823.png)</span><br><span class="line"></span><br><span class="line">![image-20240328190949580](./Linux/image-20240328190949580.png)</span><br><span class="line"></span><br><span class="line">## ps -ef | grep 关键字</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ps [-e -f] | grep 关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- -e ： 显示出全部的进程</span><br><span class="line">- -f ： 以完全格式化的形式展示信息(展示全部信息)</span><br><span class="line">- 一般来说固定用法就是：ps -ef 列出全部进程的全部信息</span><br><span class="line"></span><br><span class="line">![image-20240328191021697](./Linux/image-20240328191021697.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## kill关闭进程</span><br><span class="line"></span><br><span class="line">在windows系统中，可以通过任务管理器选择进程后，点击结束进程从而关闭它</span><br><span class="line"></span><br><span class="line">同样，在Linux中，可以通过kill命令关闭进程</span><br><span class="line"></span><br><span class="line">语法：`kill -9 进程ID`</span><br><span class="line"></span><br><span class="line">选项：-9，表示强制关闭进程，不使用此选项会向进程发送信号要求其关闭，但是否关闭要看自身的处理机制</span><br><span class="line"></span><br><span class="line">查看tail的进程号</span><br><span class="line"></span><br><span class="line">![image-20240328191519625](./Linux/image-20240328191519625.png)</span><br><span class="line"></span><br><span class="line">![image-20240328191542526](./Linux/image-20240328191542526.png)</span><br><span class="line"></span><br><span class="line">![image-20240328191548133](./Linux/image-20240328191548133.png)</span><br><span class="line"></span><br><span class="line"># top命令</span><br><span class="line"></span><br><span class="line">## 查看系统占用资源</span><br><span class="line"></span><br><span class="line">- 可以通过top命令查看CPU、内存使用情况，类似Windows的任务管理器 默认是每5秒刷新一次，语法：直接输入top即可，按`q` 或`crtl + c` 退出</span><br><span class="line">- ![image-20240329133044941](./Linux/image-20240329133044941.png)</span><br><span class="line"></span><br><span class="line">其中 顶部有5行固定内容  他们分别代表</span><br><span class="line"></span><br><span class="line">![image-20240329133114514](./Linux/image-20240329133114514.png)</span><br><span class="line"></span><br><span class="line">## **top命令内容详解**</span><br><span class="line"></span><br><span class="line">- PID：进程id</span><br><span class="line">- USER：进程所属用户</span><br><span class="line">- PR：进程优先级，越小越高</span><br><span class="line">- NI：负值表示高优先级，正值表示低优先级</span><br><span class="line">- VIRT：进程使用虚拟内存，单位KB</span><br><span class="line">- SHR：进程使用物理内存，单位KB</span><br><span class="line">- S：进程状态（S休眠、R运行、Z僵死状态、N负数优先级、I空闲状态）</span><br><span class="line">- @CPU：进程CPU占用率</span><br><span class="line">- %MEM：进程内存占用率</span><br><span class="line">- TIME+P：进程使用CPU时间总计，单位10毫秒</span><br><span class="line">- COMMAND：进程的命令或名称或程序文件路径</span><br><span class="line"></span><br><span class="line">## **top命令选项**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-p   只显示某个进程的信息<br>-d   设置刷新时间默认是5s<br>-c   显示产生进程的完整命令，默认是进程名<br>-n   指定刷新次数，比如top -n 3，刷新输出3次后退出<br>-b   以非交互非全屏模式运行，以批次的方式执行top 一般配合-n指定输出几次统计信息，将输出重定向到指定文件 比如 top -b -n 3 &gt; 1.txt<br>-i   不显示任何希纳是（idle） 或无用（zombie）的进程<br>-u   查找特定用户启动的进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## top交互式选项</span><br><span class="line"></span><br><span class="line">![image-20240329133948591](./Linux/image-20240329133948591.png)</span><br><span class="line"></span><br><span class="line"># df 磁盘信息监控</span><br><span class="line"></span><br><span class="line">- 使用`df` 命令，可以查看硬盘的使用情况</span><br><span class="line">- 语法：`df [-h]`</span><br><span class="line">- 选项：-h ，以更加人性化的单位显示</span><br><span class="line"></span><br><span class="line">![image-20240329134415294](./Linux/image-20240329134415294.png)</span><br><span class="line"></span><br><span class="line">-h切换单位</span><br><span class="line"></span><br><span class="line">![image-20240329134436245](./Linux/image-20240329134436245.png)</span><br><span class="line"></span><br><span class="line"># iostat 查看CPU、磁盘信息</span><br><span class="line"></span><br><span class="line">- 可以使用iostat查看CPU、磁盘的相关信息</span><br><span class="line">- 语法：`iostat [-x] [num1] [num2]` </span><br><span class="line">- 选项：-x  显示更多信息</span><br><span class="line">- num1：数字，刷新间隔  </span><br><span class="line">- num2：数字，刷新几次</span><br><span class="line"></span><br><span class="line">不加参数：</span><br><span class="line"></span><br><span class="line">![image-20240329134641902](./Linux/image-20240329134641902.png)</span><br><span class="line"></span><br><span class="line">给了2个参数：</span><br><span class="line"></span><br><span class="line">![image-20240329134715850](./Linux/image-20240329134715850.png)</span><br><span class="line"></span><br><span class="line">如果只给1个参数：代表每1s刷新1次 一直刷新下去</span><br><span class="line"></span><br><span class="line">![image-20240329134740665](./Linux/image-20240329134740665.png)</span><br><span class="line"></span><br><span class="line">`iostat -x` 显示更多信息</span><br><span class="line"></span><br><span class="line">![image-20240329134852166](./Linux/image-20240329134852166.png)</span><br><span class="line"></span><br><span class="line">每个参数代表的意思：</span><br><span class="line"></span><br><span class="line">![image-20240329134915425](./Linux/image-20240329134915425.png)</span><br><span class="line"></span><br><span class="line"># sar 网络状态监控</span><br><span class="line"></span><br><span class="line">- 可以使用`sar` 命令查看网络的相关统计（sar 命令非常复杂，这里仅简单用于统计网络）</span><br><span class="line">- 语法：`sar -n DEV num1 num2`</span><br><span class="line">- 选项：-p 查看网络  DEV 表示查看网络接口</span><br><span class="line">- num1：刷新间隔（不填就查看1次结束）</span><br><span class="line">- num2：查看次数（不填无限次数）</span><br><span class="line"></span><br><span class="line">每2s刷新1次 查看2次：</span><br><span class="line"></span><br><span class="line">![image-20240329135313423](./Linux/image-20240329135313423.png)</span><br><span class="line"></span><br><span class="line">参数信息：</span><br><span class="line"></span><br><span class="line">- IFACE：本地网卡接口的名称</span><br><span class="line">- rxpck/s：每秒钟接受的数据包</span><br><span class="line">- txpck/s：每秒钟发送的数据包</span><br><span class="line">- rxKB/s：每秒钟接收的数据包大小、单位KB</span><br><span class="line">- txKB/s：每秒钟发送的数据包大小、单位为KB</span><br><span class="line">- rxcmp/s：每秒钟接收的压缩数据包</span><br><span class="line">- txcmp/s：每秒钟发送的压缩包</span><br><span class="line">- rxmcst/s：每秒钟接收的多播数据包</span><br><span class="line"></span><br><span class="line">**其中`rxKB/s` `txKB/s` 代表我们的网卡每秒接收多少KB 和 每秒发送多少KB** 如果想看网卡的速度 直接查看这两个即可</span><br><span class="line"></span><br><span class="line"># 环境变量</span><br><span class="line"></span><br><span class="line">环境变量是（Windows、Linux、Mac）在运行的时候，记录的一些关键性信息，用以辅助系统运行  在Linux系统中执行：env命令即可查看当前系统中记录的环境变量</span><br><span class="line"></span><br><span class="line">环境变量是一种KeyValue型结构，即名称和值</span><br><span class="line"></span><br><span class="line">![image-20240329142531073](./Linux/image-20240329142531073.png)</span><br><span class="line"></span><br><span class="line">![image-20240329142537983](./Linux/image-20240329142537983.png)</span><br><span class="line"></span><br><span class="line">## $符</span><br><span class="line"></span><br><span class="line">在Linux中，`$` 符号被用于取”变量“的值</span><br><span class="line"></span><br><span class="line">环境变量记录的信息，除了给操作系统自己使用外，如果我们想要取用，也是可以的</span><br><span class="line"></span><br><span class="line">取环境变量的值就可以通过：`$环境变量名` 来取得</span><br><span class="line"></span><br><span class="line">比如：`echo $PATH`</span><br><span class="line"></span><br><span class="line">![image-20240329143003558](./Linux/image-20240329143003558.png)</span><br><span class="line"></span><br><span class="line">又或者：`echo $&#123;PATH&#125;ABC`</span><br><span class="line"></span><br><span class="line">![image-20240329143049236](./Linux/image-20240329143049236.png)</span><br><span class="line"></span><br><span class="line">当和其他内容混合在一起的时候，可以通过&#123;&#125; 来标注取得变量是谁</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 自行设置环境</span><br><span class="line"></span><br><span class="line">Linux环境变量可以用户自行设置，其中分为：</span><br><span class="line"></span><br><span class="line">- 临时设置，语法：export 变量名=变量值</span><br><span class="line">- 永久生效</span><br><span class="line">  - 针对当前用户生效：配置当前用户的： ~/bashrc文件中</span><br><span class="line">  - 针对所有用户生效，配置在系统的：/ect/profile文件中</span><br><span class="line">  - 并通过语法：`source 配置文件` 进行立刻生效，或重新登录finalshell生效</span><br><span class="line"></span><br><span class="line">临时设置：</span><br><span class="line"></span><br><span class="line">​![image-20240329145101055](./Linux/image-20240329145101055.png)</span><br><span class="line"></span><br><span class="line">但是 当我们重启finalshell或者重启虚拟机的时候就会失效</span><br><span class="line"></span><br><span class="line">永久生效</span><br><span class="line"></span><br><span class="line">- 针对当前用户：</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  # vi ~/bashrc</span><br><span class="line">  # export MYNAME=raehp</span><br><span class="line">  # 退出vi编辑器</span><br><span class="line">  # source ~/bashrc 更新</span><br></pre></td></tr></table></figure><p>  <img src="/.com//image-20240329153851648.png" alt="image-20240329153851648"></p><ul><li><p>针对所有用户：</p></li><li><pre><code># vi /etc/profile# export MYNAME=raehp## 退出vi编辑器# source /etc/profile 更新<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">## 自定义环境变量PATH</span><br><span class="line"></span><br><span class="line">环境变量PATH这个项目里面记录了系统执行命令的搜索路径</span><br><span class="line"></span><br><span class="line">这些搜索路径我们也可以自行添加到PATH中去</span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line"></span><br><span class="line">- 在当前HOME目录内创建文件夹，myenv  在文件夹内创建mkhahaha</span><br><span class="line">- 通过vim编辑器，在mkhahaha文件内填入：`echo 哈哈哈`</span><br><span class="line"></span><br><span class="line">完成上述操作后，随意切换工作目录，执行mkhahaha命令尝试以下，会发现无法执行</span><br><span class="line"></span><br><span class="line">- 修改PATH的值</span><br><span class="line"></span><br><span class="line">  - 临时修改PATH：`export PATH=$PATH:/home/raehp/myenv`  在运行mkhahaha，无论在哪里都能执行了，或将`export PATH=$PATH:/home/raehp/myenv`  填入用户环境变量文件或系统环境变量文件中去</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    # 首先创建myenv</span><br><span class="line">    mkdir myenv</span><br><span class="line">    # 进入myenv 并创建mkhaha文件</span><br><span class="line">    cd myenv</span><br><span class="line">    vim mkhaha</span><br><span class="line">    # 修改mkhaha的权限为755  因为一个文件想要以程序执行 需要x权限</span><br><span class="line">    chmod 755 mkhaha</span><br><span class="line">    # 运行</span><br><span class="line">    ./mkhaha</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    # 这个时候会发现 只在当前文件夹下可以执行 这个时候就要配置环境变量</span><br><span class="line">    vim /etc/profile</span><br><span class="line">    # 插入</span><br><span class="line">    export PATH=$PATH:/root/myenv</span><br><span class="line">    # 保存退出 并且source 更新</span><br><span class="line">    source /etc/profile</span><br><span class="line">    # 这时 不管在那个文件夹下 都可以运行</span><br></pre></td></tr></table></figure></code></pre></li></ul><h1 id="上传和下载"><a href="#上传和下载" class="headerlink" title="上传和下载"></a>上传和下载</h1><p>可通过FinalShell工具，方便的和虚拟机进行数据交互</p><p>在FinalShell软件的下方窗体中，提供了Linux的文件系统视图，可方便的：</p><ul><li>浏览文件系统，找到合适的文件，右键点击下载，即可传输到本地电脑</li><li>浏览文件系统，找到合适的目录，将本地电脑中的文件拓展拖入，即可方便的传输到Linux系统</li></ul><p><img src="/.com//image-20240330095434715.png" alt="image-20240330095434715"></p><h1 id="rz、sz命令上传、下载"><a href="#rz、sz命令上传、下载" class="headerlink" title="rz、sz命令上传、下载"></a>rz、sz命令上传、下载</h1><p>rz、sz命令需要安装，通过：<code>yum -y install lrzsz</code> 即可</p><ul><li><code>rz</code> 命令，进行上传，语法：<code>直接输入rz</code><ul><li><img src="/.com//image-20240330095747985.png" alt="image-20240330095747985"></li></ul></li><li><code>sz</code> 命令，进行下载，语法：<code>sz 需要上传的文件</code> <ul><li><img src="/.com//image-20240330095812176.png" alt="image-20240330095812176"></li></ul></li></ul><p>文件会自动下载到：桌面的fsdownload中</p><h1 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux和Mac系统常有2中压缩格式，后缀名分别是：</p><ul><li><code>.tar</code> 称之为tarball，归档文件，即简单的将文件组装到一个<code>.tar</code> 的文件内，并没有太多文件体积的减少，仅仅是简单的封装</li><li><code>.gz</code> 也常见为.<code>tar.gz</code>，<code>gzip</code>的格式压缩文件，即使用<code>gzip</code> 压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积</li></ul><p>针对这两种格式，使用tar命令均可以进行压缩和解压缩的操作</p><h2 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>语法：<code>tar [-c -v -x -f -z -C] 参数1 参数2 ...</code></p><ul><li>-c，创建压缩文件，用于压缩模式</li><li>-v，显示压缩、解压过程，用于查看进度</li><li>-x，解压模式</li><li>-f，要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个</li><li>-z，gzip模式，不使用 -z就是普通的tarball格式</li><li>-C，选择解压的目的地，用于解压模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将1.txt 2.txt 3.txt 压缩到test.tar文件内</span><br><span class="line">tar -cvf test.txt 1.txt 2.txt 3.txt</span><br><span class="line"># 将1.txt 2.txt 3.txt 压缩到test.tar.gz文件内，使用gzip模式</span><br><span class="line">tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>-z 选项如果使用的话，一般处于选项位第一个</li><li>-f 选项，必须在选项位最后一个</li></ul><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 解压test.tar 将文件解压至当前目录</span><br><span class="line">tar -xvf test.tar</span><br><span class="line"># 解压test.tar 将文件解压至指定目录(/home/reahp)</span><br><span class="line">tar -xvf test.tar -C /home/raehp</span><br><span class="line"># 以Gzip模式解压test.tar.gz 将文件解压至指定目录(/home/raehp)</span><br><span class="line">tar -zxvf test.tar.gz -C /home/raehp</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>-f 选项，必须在选项组合体的最后一位</li><li>-z 选项，建议在开头位置</li><li>-C 选项单独使用，和解压所需的其他参数分开</li></ul><h2 id="zip命令压缩"><a href="#zip命令压缩" class="headerlink" title="zip命令压缩"></a>zip命令压缩</h2><p>可以使用zip命令，压缩文件位zip压缩包</p><p>语法：<code>zip [-r] 参数1 参数2 参数3</code></p><ul><li>-r，被压缩的包含文件夹的时候，需要使用-r  选项，和rm、cp等命令的 -r 效果一致</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将a.txt b.txt c.txt 压缩到test.zip文件内</span><br><span class="line">zip test.zip a.txt b.txt c.txt</span><br><span class="line"># 将test、itraehp 这两个文件夹和a.txt 一起压缩到 test.zip文件内</span><br><span class="line">zip -r test.zip test itraeph a.txt</span><br></pre></td></tr></table></figure><h2 id="unzip命令解压"><a href="#unzip命令解压" class="headerlink" title="unzip命令解压"></a>unzip命令解压</h2><p>使用unzip命令，可以方便的解压zip压缩包</p><p>语法：<code>unzip [-d] 参数</code></p><ul><li>-d 指定要解压去的位置，同tar命令的 -C 选项</li><li>参数，被解压的zip压缩包文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将test.zip 解压到当前目录</span><br><span class="line">unzip test.zip</span><br><span class="line"># 将test.zip 解压到指定文件夹内(/home/raehp)</span><br><span class="line">unzip test.zip -d /home/raehp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>私服配置说明</title>
      <link href="/2024/04/25/%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/"/>
      <url>/2024/04/25/%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="私服配置说明"><a href="#私服配置说明" class="headerlink" title="私服配置说明"></a>私服配置说明</h2><p>访问私服：<a href="http://192.168.150.101:8081/">http://192.168.150.101:8081</a></p><p>访问密码：admin&#x2F;admin</p><p>使用私服，需要在maven的settings.xml配置文件中，做如下配置：</p><ol><li><p>需要在 <strong>servers</strong> 标签中，配置访问私服的个人凭证(访问的用户名和密码)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <strong>mirrors</strong> 中只配置我们自己私服的连接地址(如果之前配置过阿里云，需要直接替换掉)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>需要在 <strong>profiles</strong> 中，增加如下配置，来指定snapshot快照版本的依赖，依然允许使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>allow-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果需要上传自己的项目到私服上，需要在项目的pom.xml文件中，增加如下配置，来配置项目发布的地址(也就是私服的地址)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- release版本的发布地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- snapshot版本的发布地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>发布项目，直接运行 deploy 生命周期即可 (发布时，建议跳过单元测试)</p></li></ol><p>​</p><h2 id="启动本地私服"><a href="#启动本地私服" class="headerlink" title="启动本地私服"></a>启动本地私服</h2><ol><li><p>解压： apache-maven-nexus.zip</p></li><li><p>进入目录： apache-maven-nexus\nexus-3.39.0-01\bin</p></li><li><p>启动服务：双击 start.bat </p></li><li><p>访问服务：localhost:8081</p></li><li><p>私服配置说明：将上述配置私服信息的 192.168.150.101 改为 localhost</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>白盒测试</title>
      <link href="/2024/04/25/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/04/25/%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a><strong>白盒测试</strong></h1><p>代码逻辑的测试</p><p><strong>定义：</strong> 白盒测试是一种测试方法，测试人员考虑程序的内部结构、<strong>代码逻辑</strong>和<strong>算法</strong>来验证软件的正确性</p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a><strong>特点：</strong></h2><p>优点：代码覆盖率高</p><p>缺点：1.覆盖所有代码路径难度大 2.业务功能可能覆盖不全 3.测试开销大</p><h2 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a><strong>使用场景：</strong></h2><ul><li><strong>单元测试(主要)：</strong> 白盒测试常用于测试单个模块、函数或方法，确保其在各种输入条件下都能正确执行。</li><li><strong>集成测试：</strong> 在系统集成的过程中，白盒测试可以用于验证各个模块之间的接口和数据流是否正确。</li><li><strong>性能测试：</strong> 白盒测试也可用于评估系统的性能，例如检查代码中的效率和资源利用情况。</li></ul><h2 id="白盒设计方法（先静态后动态）"><a href="#白盒设计方法（先静态后动态）" class="headerlink" title="白盒设计方法（先静态后动态）"></a><strong>白盒设计方法（先静态后动态）</strong></h2><p>设计用例一般使用基本路径测试，重点模块使用多种覆盖率标准</p><p><strong>静态</strong>&#x3D;&#x3D;&gt;【1.桌面检查 2.代码审查 3.代码走查 】（手动）【4.代码扫描工具】（自动化）</p><p><strong>动态</strong>&#x3D;&#x3D;&gt;1.逻辑覆盖法&#x3D;&#x3D;&gt;1.语句覆盖 2.判定覆盖 3.条件覆盖 4.判定条件覆盖 5.条件组合覆盖 6.路径覆盖</p><p>&#x9;  2.基本路径测试法</p><h2 id="动态测试方法"><a href="#动态测试方法" class="headerlink" title="动态测试方法"></a>动态测试方法</h2><h3 id="1-逻辑覆盖法"><a href="#1-逻辑覆盖法" class="headerlink" title="1.逻辑覆盖法"></a><strong>1.逻辑覆盖法</strong></h3><p>是对程序逻辑结构的遍历实现程序的覆盖</p><h4 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a><strong>语句覆盖</strong></h4><p>介绍：设计测试用例，使得程序中每条语句都至少执行一次 （基本要求:尽可能的满足100%覆盖率）</p><p>局限性：标准最弱、不能准确的判断运算中的逻辑错误</p><h4 id="判定覆盖"><a href="#判定覆盖" class="headerlink" title="判定覆盖"></a><strong>判定覆盖</strong></h4><p>介绍：只要满足了判定覆盖标准就一定满足语句覆盖标，</p><p>局限性：判定覆盖会忽略条件中取或(or)的情况</p><h4 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h4><p>介绍：设计测试用例，使得判定中的每个条件至少有一次取真值，有一次取假值</p><p>局限性：条件覆盖不能保证判定覆盖</p><h4 id="判定条件覆盖"><a href="#判定条件覆盖" class="headerlink" title="判定条件覆盖"></a>判定条件覆盖</h4><p>设计测试用例，使得被测试程序中的每个判断本身的判定结果(真假)至少被满足一次，同时，每个逻辑条件的可能值(真假)也至少满足一次，即同时满足100%判定覆盖和100%条件覆盖的标准&#x3D;&#x3D;【满足判定-条件覆盖标准一定能够满足条件覆盖、判定覆盖和语句覆盖】&#x3D;&#x3D;</p><p>局限性：判定覆盖会忽略条件中取或(or)的情况</p><h4 id="条件组合覆盖"><a href="#条件组合覆盖" class="headerlink" title="条件组合覆盖"></a><strong>条件组合覆盖</strong></h4><p>介绍：设计测试用例，使得被测试程序中的每个判定中条件结果的所有可能组合至少执行一次</p><p>局限性：条件组合覆盖不能保证所有路径被执行</p><h4 id="路径覆盖"><a href="#路径覆盖" class="headerlink" title="路径覆盖"></a><strong>路径覆盖</strong></h4><p>设计测试用例，覆盖程序中所有可能的路径</p><p>局限性：但是满足路径覆盖，并不一定能满足条件覆盖，也就不能满足条件组合盖</p><h3 id="2-基本路径测试："><a href="#2-基本路径测试：" class="headerlink" title="2.基本路径测试："></a><strong>2.基本路径测试：</strong></h3><h4 id="在程序控制流图的基础上，通过分析程序的环路复杂性，导出基本可执行路径集合，从而设计测试用例"><a href="#在程序控制流图的基础上，通过分析程序的环路复杂性，导出基本可执行路径集合，从而设计测试用例" class="headerlink" title="在程序控制流图的基础上，通过分析程序的环路复杂性，导出基本可执行路径集合，从而设计测试用例"></a><strong>在程序控制流图的基础上，通过分析程序的环路复杂性，导出基本可执行路径集合，从而设计测试用例</strong></h4><p><strong>计算程序的环路复杂度：</strong></p><p>方法有三种：</p><ul><li><p>流图中区域的数量对应于环型的复杂性</p></li><li><p>给定流图G的圈复杂度V(G)、定义为V(G)&#x3D;E-N+2, E是流图中边的数量，N是流图中节点的数量</p></li><li><p>给定流图G的圈复杂度V(G)、定义为V(G) &#x3D; P + 1 , P是流图G中判定节点的数量</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2024/04/25/git/"/>
      <url>/2024/04/25/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><p>什么是Git？</p><ul><li>Git是一个分布式版本控制工具，主要用于管理开发过程中的源代码文件（Java类、xml文件、html页面等）在软件开发过程中被广泛使用  </li><li>Git仓库分为两种：<ul><li>本地仓库：开发人员自己电脑上的Git仓库</li><li>远程仓库：远程服务器上的Git仓库</li></ul></li></ul><p><img src="/.com//image-20240403113135925-1712116181119-1.png" alt="image-20240403113135925"></p><ul><li>commit：提交，将本地文件和版本信息 保存到本地仓库</li><li>push：推送，将本地仓库文件和版本信息上传到远程仓库</li><li>pull：拉取，将远程仓库文件和版本信息下载到本地仓库</li></ul><h1 id="Git下载与操作"><a href="#Git下载与操作" class="headerlink" title="Git下载与操作"></a>Git下载与操作</h1><p><img src="/.com//image-20240403113332699-1712116181119-2.png" alt="image-20240403113332699"></p><h1 id="工作区、暂存区、版本库-概念"><a href="#工作区、暂存区、版本库-概念" class="headerlink" title="工作区、暂存区、版本库 概念"></a>工作区、暂存区、版本库 概念</h1><ul><li>版本库：.git隐藏文件夹就是版本库，版本库中 存储了很多配置信息，日志信息和文件版本信息</li><li>工作区：包含.git 文件夹的目录就是 工作区 ，也成为工作目录，主要用于存放开发的代码</li><li>暂存区：.git 文件夹中有很多文件，其中一个index文件就是暂存区，也叫做stage 暂存区是一个临时保存修改文件的地方</li></ul><p><img src="/.com//image-20240403121021210.png" alt="image-20240403121021210"></p><h1 id="工作区中文件的状态"><a href="#工作区中文件的状态" class="headerlink" title="工作区中文件的状态"></a>工作区中文件的状态</h1><p><strong>Git工作区中的文件存在两种状态：</strong></p><ul><li>untracked 未跟踪 （未被纳入版本控制）</li><li>tracked 已跟踪 （被纳入版本控制）<ul><li>Unmodified 未修改状态</li><li>Modified 已修改状态</li><li>Staged 已暂存状态</li></ul></li></ul><h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="本地仓库常用命令："><a href="#本地仓库常用命令：" class="headerlink" title="本地仓库常用命令："></a>本地仓库常用命令：</h2><ul><li><code>git status</code>    查看文件状态</li><li><code>git add</code>              将文件的修改加入暂存区</li><li><code>git reset </code>          将暂存区的文件取消暂存 或者 切换到指定版本<ul><li><code>git reset 文件名</code> 将文件取消暂存<ul><li><img src="/.com//image-20240403122357867.png" alt="image-20240403122357867"></li></ul></li><li><code>git reset --hard 版本号</code> 切换到指定版本<ul><li><img src="/.com//image-20240403123039124.png" alt="image-20240403123039124"></li></ul></li></ul></li><li><code>git commit</code>        将暂存区的文件修改提交到版本库</li><li><code>git log</code>               查看日志<ul><li><img src="/.com//image-20240403123138085.png" alt="image-20240403123138085"></li></ul></li></ul><h2 id="远程仓库常见命令"><a href="#远程仓库常见命令" class="headerlink" title="远程仓库常见命令:"></a>远程仓库常见命令:</h2><ul><li><code>git remote</code>   <strong>查看远程仓库</strong><ul><li><img src="/.com//image-20240403123729559.png" alt="image-20240403123729559"></li></ul></li><li><code>git remote add &lt;shortname 可引用的简写&gt; &lt;url&gt;</code>   <strong>添加远程仓库</strong><ul><li><img src="/.com//image-20240403123744362.png" alt="image-20240403123744362"></li></ul></li><li><code>git clone [url]</code>  <strong>克隆远程仓库</strong><ul><li><img src="/.com//image-20240403123859314.png" alt="image-20240403123859314"></li></ul></li><li><code>git push [remote-name(简写的名字)] [brach-name(推送到的位置 分支)] </code>    <strong>推送至远程仓库</strong><ul><li><img src="/.com//image-20240403124122805.png" alt="image-20240403124122805"></li></ul></li><li><code>git pull [short-name] [branch-name 分支的名字  表示从哪个分支来拉取]</code>  从远程仓库拉取数据 合并到本地仓库<ul><li><img src="/.com//image-20240403133815133.png" alt="image-20240403133815133"></li></ul></li></ul><p><strong>注意：</strong> 如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉去文件的时候会报错（fatal：refusing to merge unrelated histories ）</p><p>解决此问题可以在 <code>git pull</code> 命令后加入参数：<code>--allow-unrelated-histories</code></p><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><p>分支是Git 使用过程中 非常重要的概念，使用分支意味着 你可以把你的工作 从开发主线上分离开来 以免避免开发主线。同一个仓库 可以有多个分支，各个分支相互独立，互不干扰 通过 <code>git init</code> 命令创建本地仓库时默认会创建一个master分支。</p><ul><li><p><code>git branch</code>  查看分支</p><ul><li><pre><code>git checkout<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `git branch [name]`  创建分支</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    git checkout b1</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><code>git checkout[name]</code>  切换分支</p><ul><li><pre><code>git checkout b1<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `git push [shortName] [name]`  推送至远程仓库分支</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    git push origin master</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p><code>git merge [name]</code>  合并分支</p><ul><li><pre><code># 把b1分支下的b1.txt合并到主分支git merge b1# 把b2分支下的b2.txt合并到主分支git merge b2</code></pre></li></ul></li></ul><h2 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h2><p>Git中的标签，指的是某个分支某个特定时间点的状态，通过标签，可以很方便的切换到标记时的状态，比较有代表性的是人们会使用这个功能来标记发布结点（v1.0  v1.2）</p><ul><li><code>git tag</code>   列出已有标签<ul><li><img src="/.com//image-20240403141948827.png" alt="image-20240403141948827"></li></ul></li><li><code>git tag [name]</code>   创建标签<ul><li><img src="/.com//image-20240403141942391.png" alt="image-20240403141942391"></li></ul></li><li><code>git push [shortname] [name]</code>    将标签推送至远程仓库<ul><li><img src="/.com//image-20240403141959742.png" alt="image-20240403141959742"></li></ul></li><li><code>git checkout -b [branch] [name]</code>    检出标签       检出标签时需要创建一个新分支来指向某个标签<ul><li><img src="/.com//image-20240425132313132.png" alt="image-20240425132313132"></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb笔记</title>
      <link href="/2024/04/25/JavaWeb%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/04/25/JavaWeb%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>概念：Asynchronous JavaScript And XML  异步的JavaScript和XML</li><li>作用：<ul><li>数据交换：通过Ajax 可以给服务器发送请求 并获取服务器响应的数据</li><li>异步交互：可以在不重新加载整个页面的情况下，与服务器交换数据并更新部分网页的技术，如：搜索联想功能， 用户是否可用的校验等等</li></ul></li></ul><p><img src="/.com//image-20240402142928139.png" alt="image-20240402142928139"></p><p><img src="/.com//image-20240402142945802.png" alt="image-20240402142945802"></p><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><ul><li><p>同步请求发送过程如下图所示：</p><p><img src="/.com//image-20240402145607937.png" alt="image-20240402145607937"></p><p>浏览器页面在发送请求给服务器，在服务器处理请求的过程中，浏览器页面不能做其他的操作。只能等到服务器响应结束后才能，浏览器页面才能继续做其他的操作。 </p></li><li><p>异步请求发送过程如下图所示：</p><p><img src="/.com//image-20240402145617356.png" alt="image-20240402145617356"></p><p>浏览器页面发送请求给服务器，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</p></li></ul><h2 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h2><p><img src="/.com//image-20240402143127485.png" alt="image-20240402143127485"></p><h2 id="axious"><a href="#axious" class="headerlink" title="axious"></a>axious</h2><h3 id="axious入门"><a href="#axious入门" class="headerlink" title="axious入门"></a>axious入门</h3><ol><li>引入axious的js文件<ul><li><img src="/.com//image-20240402143936720.png" alt="image-20240402143936720"></li></ul></li><li>使用Axious 发送请求，并获取响应结果<ul><li><img src="/.com//image-20240402144032628.png" alt="image-20240402144032628"></li></ul></li></ol><h3 id="请求式别名"><a href="#请求式别名" class="headerlink" title="请求式别名"></a>请求式别名</h3><p>Axios还针对不同的请求，提供了别名方式的api,具体如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>axios.get(url [, config])</td><td>发送get请求</td></tr><tr><td>axios.delete(url [, config])</td><td>发送delete请求</td></tr><tr><td>axios.post(url [, data[, config]])</td><td>发送post请求</td></tr><tr><td>axios.put(url [, data[, config]])</td><td>发送put请求</td></tr></tbody></table><p>我们目前只关注get和post请求，所以在上述的入门案例中，我们可以将get请求代码改写成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>post请求改写成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,<span class="string">&quot;id=1&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h1><h2 id="前端工程化介绍"><a href="#前端工程化介绍" class="headerlink" title="前端工程化介绍"></a>前端工程化介绍</h2><p>我们目前的前端开发中，当我们需要使用一些资源时，例如：vue.js，和axios.js文件，都是直接再工程中导入的，如下图所示：</p><p><img src="/.com//image-20240402150033718.png" alt="image-20240402150033718"></p><p>但是上述开发模式存在如下问题：</p><ul><li>每次开发都是从零开始，比较麻烦</li><li>多个页面中的组件共用性不好</li><li>js、图片等资源没有规范化的存储目录，没有统一的标准，不方便维护</li></ul><p>所以现在企业开发中更加讲究前端工程化方式的开发，主要包括如下4个特点</p><ul><li>模块化：将js和css等，做成一个个可复用模块</li><li>组件化：我们将UI组件，css样式，js行为封装成一个个的组件，便于管理</li><li>规范化：我们提供一套标准的规范的目录接口和编码规范，所有开发人员遵循这套规范</li><li>自动化：项目的构建，测试，部署全部都是自动完成</li></ul><p>所以对于前端工程化，说白了，就是在企业级的前端项目开发中，把前端开发所需要的工具、技术、流程、经验进行规范化和标准化。从而提升开发效率，降低开发难度等等。接下来我们就需要学习vue的官方提供的脚手架帮我们完成前端的工程化。</p><h2 id="前端工程化入门"><a href="#前端工程化入门" class="headerlink" title="前端工程化入门"></a>前端工程化入门</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>我们的前端工程化是通过vue官方提供的脚手架Vue-cli来完成的，用于快速的生成一个Vue的项目模板。Vue-cli主要提供了如下功能：</p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ul><p>我们需要运行Vue-cli，需要依赖NodeJS，NodeJS是前端工程化依赖的环境。所以我们需要先安装NodeJS，然后才能安装Vue-cli</p><ul><li><p>NodeJS安装和Vue-cli安装</p><p>详细安装步骤，请参考<strong>资料&#x2F;NodeJS安装文档&#x2F;NodeJS安装文档.md</strong>文件</p><p><img src="/.com//image-20240402150046192.png" alt="image-20240402150046192"></p></li></ul><h3 id="Vue项目简介"><a href="#Vue项目简介" class="headerlink" title="Vue项目简介"></a>Vue项目简介</h3><p>环境准备好了，接下来我们需要通过Vue-cli创建一个vue项目，然后再学习一下vue项目的目录结构。Vue-cli提供了如下2种方式创建vue项目:</p><ul><li><p>命令行：直接通过命令行方式创建vue项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-project01</span><br></pre></td></tr></table></figure></li><li><p>图形化界面：通过命令先进入到图形化界面，然后再进行vue工程的创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>图形化界面如下：</p><p><img src="/.com//image-20240402150054903.png" alt="image-20240402150054903"></p></li></ul><h4 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h4><p>此处我们通过第二种图形化界面方式给大家演示。</p><p>首先，我们再桌面创建vue文件夹，然后双击进入文件夹，来到地址目录，输入cmd，然后进入到vue文件夹的cmd窗口界面，如下图所示：</p><p><img src="/.com//image-20240402150103289.png" alt="image-20240402150103289"></p><p>然后进入如下界面：</p><p><img src="/.com//image-20240402150109917.png" alt="image-20240402150109917"></p><p>然后再当前目录下，直接输入命令<code>vue ui</code>进入到vue的图形化界面，如下图所示：</p><p><img src="/.com//image-20240402150109917.png" alt="image-20240402150109917"></p><p>然后我门选择创建按钮，在vue文件夹下创建项目，如下图所示：</p><p><img src="/.com//image-20240402150256855.png" alt="image-20240402150256855"></p><p>然后来到如下界面，进行vue项目的创建</p><p><img src="/.com//image-20240402150304160.png" alt="image-20240402150304160"></p><p>然后预设模板选择手动，如下图所示：</p><p> <img src="/.com//image-20240402150311550.png" alt="image-20240402150311550"></p><p>然后再功能页面开启路由功能，如下图所示：</p><p><img src="/.com//image-20240402150319794.png" alt="image-20240402150319794"></p><p>然后再配置页面选择语言版本和语法检查规范，如下图所示：</p><p><img src="/.com//image-20240402150329318.png" alt="image-20240402150329318"></p><p>然后创建项目，进入如下界面：</p><p><img src="/.com//image-20240402150336719.png" alt="image-20240402150336719"></p><p>最后我们只需要等待片刻，即可进入到创建创建成功的界面，如下图所示：</p><p><img src="/.com//image-20240402150348301.png" alt="image-20240402150348301"></p><p> 到此，vue项目创建结束</p><h4 id="vue项目目录结构介绍"><a href="#vue项目目录结构介绍" class="headerlink" title="vue项目目录结构介绍"></a>vue项目目录结构介绍</h4><p>我们通过VS Code打开之前创建的vue文件夹，打开之后，呈现如下图所示页面：</p><p><img src="/.com//image-20240402150417197.png" alt="image-20240402150417197"></p><p>vue项目的标准目录结构以及目录对应的解释如下图所示:</p><p><img src="/.com//image-20240402150425648.png" alt="image-20240402150425648"></p><p>其中我们平时开发代码就是在<strong>src目录</strong>下</p><h4 id="运行vue项目"><a href="#运行vue项目" class="headerlink" title="运行vue项目"></a>运行vue项目</h4><p>那么vue项目开发好了，我们应该怎么运行vue项目呢？主要提供了2种方式</p><ul><li><p>第一种方式：通过VS Code提供的图形化界面 ，如下图所示：（注意：NPM脚本窗口默认不显示，可以参考本节的最后调试出来）</p><p><img src="/.com//image-20240402150441617.png" alt="image-20240402150441617"></p><p>点击之后，我们等待片刻，即可运行，在终端界面中，我们发现项目是运行在本地服务的8080端口，我们直接通过浏览器打开地址</p><p><img src="/.com//image-20240402150454884.png" alt="image-20240402150454884"></p><p>最终浏览器打开后，呈现如下界面，表示项目运行成功</p><p><img src="/.com//image-20240402150510067.png" alt="image-20240402150510067"></p><p>其实此时访问的是 <strong>src&#x2F;App.vue</strong>这个根组件，此时我们打开这个组件，修改代码：添加内容Vue</p><p><img src="/.com//image-20240402150532507.png" alt="image-20240402150532507"></p><p>只要我们保存更新的代码，我们直接打开浏览器，不需要做任何刷新，发现页面呈现内容发生了变化，如下图所示：</p><p><img src="/.com//image-20240402150544053.png" alt="image-20240402150544053"></p><p>这就是我们vue项目的热更新功能 </p><p>对于8080端口，经常被占用，所以我们可以去修改默认的8080端口。我们修改vue.config.js文件的内容，添加如下代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    port<span class="punctuation">:</span><span class="number">7000</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如下图所示，然后我们关闭服务器，并且重新启动，</p><p><img src="/.com//image-20240402150605365.png" alt="image-20240402150605365"></p></li></ul><p>​       重新启动如下图所示：</p><p><img src="/.com//image-20240402150615513.png" alt="image-20240402150615513"></p><p>​端口更改成功，可以通过浏览器访问7000端口来访问我们之前的项目</p><ul><li><p>第二种方式：命令行方式</p><p>直接基于cmd命令窗口，在vue目录下，执行输入命令<code>npm run serve</code>即可，如下图所示：</p><p><img src="/.com//image-20240402150634501.png" alt="image-20240402150634501"></p></li></ul><h3 id="Vue项目开发流程"><a href="#Vue项目开发流程" class="headerlink" title="Vue项目开发流程"></a>Vue项目开发流程</h3><p>那么我们访问的首页是index.html，但是我们找到public&#x2F;index.html文件，打开之后发现，里面没有什么代码，但是能够呈现内容丰富的首页：如下图所示：</p><p><img src="/.com//image-20240402150657794.png" alt="image-20240402150657794"></p><p>我们自习观察发现，index.html的代码很简洁，但是浏览器所呈现的index.html内容却很丰富，代码和内容不匹配，所以vue是如何做到的呢？接下来我们学习一下vue项目的开发流程。</p><p>对于vue项目，index.html文件默认是引入了入口函数main.js文件，我们找到<strong>src&#x2F;main.js</strong>文件，其代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码中，包括如下几个关键点：</p><ul><li>import: 导入指定文件，并且重新起名。例如上述代码<code>import App from &#39;./App.vue&#39;</code>导入当前目录下得App.vue并且起名为App</li><li>new Vue(): 创建vue对象</li><li>$mount(‘#app’);将vue对象创建的dom对象挂在到id&#x3D;app的这个标签区域中，作用和之前学习的vue对象的le属性一致。</li><li>router:  路由，详细在后面的小节讲解</li><li>render: 主要使用视图的渲染的。</li></ul><p>来到<strong>public&#x2F;index.html</strong>中，我们<strong>删除div的id&#x3D;app属性</strong>，打开浏览器，发现之前访问的首页一片空白，如下图所示，这样就证明了，我们main.js中通过代码挂在到index.html的id&#x3D;app的标签区域的。</p><p>此时我们知道了vue创建的dom对象挂在到id&#x3D;app的标签区域，但是我们还是没有解决最开始的问题：首页内容如何呈现的？这就涉及到render中的App了，如下图所示：</p><p><img src="/.com//image-20240402150708315.png" alt="image-20240402150708315"></p><p>那么这个App对象怎么回事呢，我们打开App.vue,注意的是.vue结尾的都是vue组件。而vue的组件文件包含3个部分：</p><ul><li>template: 模板部分，主要是HTML代码，用来展示页面主体结构的</li><li>script: js代码区域，主要是通过js代码来控制模板的数据来源和行为的</li><li>style: css样式部分，主要通过css样式控制模板的页面效果得</li></ul><p>如下图所示就是一个vue组件的小案例：</p><p><img src="/.com//image-20240402150721629.png" alt="image-20240402150721629"></p><p>此时我们可以打开App.vue，观察App.vue的代码，其中可以发现，App.vue组件的template部分内容，和我们浏览器访问的首页内容是一致的，如下图所示：</p><p><img src="/.com//image-20240402150732719.png" alt="image-20240402150732719"></p><p>接下来我们可以简化模板部分内容，添加script部分的数据模型，删除css样式，完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;message&quot;</span>:<span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存直接，回到浏览器，我们发现首页展示效果发生了变化，如下图所示：</p><p><img src="/.com//image-20240402150748803.png" alt="image-20240402150748803"></p><h1 id="组件库Element"><a href="#组件库Element" class="headerlink" title="组件库Element"></a>组件库Element</h1><ul><li>Element:饿了么团队研发的，一套为开发者、设计师和产品经理准备的Vue2.0的桌面端组件库</li><li>组件：组成网页的部件、例如：超链接、按钮、图片、表格、表单、分页等</li></ul><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a><strong>快速入门</strong></h4><ul><li><p>安装ElementUI组件库 （在当前工程的目录下） 在命令行执行指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui@2.15.3 </span><br></pre></td></tr></table></figure></li><li><p>引入ElementUI组件库  main.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import ElementUI from &#x27;element-ui&#x27;;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure></li></ul><p>完成以下案例</p><ul><li><img src="/.com//image-20240116154149213.png" alt="image-20240116154149213"><ol><li>引入必要文件<ul><li><img src="/.com//image-20240402155737812.png" alt="image-20240402155737812"></li></ul></li><li>创建一个新的vue文件<ul><li><img src="/.com//image-20240402155756848.png" alt="image-20240402155756848"></li></ul></li><li>去element 官网 查找对应的组件 把代码放到<template> 中<ul><li><img src="/.com//image-20240402155937507.png" alt="image-20240402155937507"></li></ul></template></li><li>这时候  我们启动 会发现 并没有显示 这是因为 默认是是显示根组件 App.vue的内容  在跟组件中 使用emelemt-view 标签（自己起的名字 vue会自动匹配 不过要和创建的vue名字类似）<ul><li><img src="/.com//image-20240402161036336.png" alt="image-20240402161036336"></li><li>输入&lt;e 会自动提示 回车 就会自动导包</li></ul></li></ol></li></ul><h1 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h1><p>介绍：Vue Router 是Vue官方路由</p><p>组成：</p><ul><li>VueRouter：路由器类，根据路由请求在路由视图中动态渲染选中的组件</li><li><router-link>：请求链接组件，浏览器会解析成<a></a></router-link></li><li><route-view>：动态视图组件，用来渲染展示与路由路径对应的组件</route-view></li></ul><p><img src="/.com//image-20240119152810709.png" alt="image-20240119152810709"></p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p><strong>Maven是一款管理和构建java项目的工具</strong></p><h4 id="Maven的作用？"><a href="#Maven的作用？" class="headerlink" title="Maven的作用？"></a>Maven的作用？</h4><ul><li><p>方便依赖管理</p><p>方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题</p></li><li><p>统一项目结构</p><p>提供标准，统一的项目结构</p></li><li><p>项目构建</p><p>标准跨平台（Linux、Windows、MacOS）的自动化项目结构方式</p></li></ul><h4 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h4><p>什么是坐标？</p><ul><li>Maven中的坐标是&#x3D;&#x3D;资源的唯一标识&#x3D;&#x3D; , 通过该坐标可以唯一定位资源位置</li><li>使用坐标来定义项目或引入项目中需要的依赖</li></ul><p>Maven坐标主要组成</p><ul><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</li><li>version：定义当前项目版本号</li></ul><p><img src="/.com//image-20240121152233994.png" alt="image-20240121152233994"></p><p><strong>注意：</strong></p><ul><li>上面所说的资源可以是插件、依赖、当前项目。</li><li>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</li></ul><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h3><p>依赖：指当前项目运行所需要的jar包。一个项目中可以引入多个依赖</p><p>例如：在当前工程中，我们需要用到logback来记录日志，此时就可以在maven工程的pom.xml文件中，引入logback的依赖。具体步骤如下：</p><ol><li><p>在pom.xml中编写<dependencies>标签</dependencies></p></li><li><p>在<dependencies>标签中使用<dependency>引入坐标</dependency></dependencies></p></li><li><p>定义坐标的 groupId、artifactId、version</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第1个依赖 : logback --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第2个依赖 : junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><ol><li>如果引入的依赖，在本地仓库中不存在，将会连接远程仓库 &#x2F; 中央仓库，然后下载依赖（这个过程会比较耗时，耐心等待）</li><li>如果不知道依赖的坐标信息，可以到mvn的中央仓库（<a href="https://mvnrepository.com/%EF%BC%89%E4%B8%AD%E6%90%9C%E7%B4%A2">https://mvnrepository.com/）中搜索</a></li></ol></blockquote><h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><h4 id="依赖具有传递性"><a href="#依赖具有传递性" class="headerlink" title="依赖具有传递性"></a>依赖具有传递性</h4><p>依赖传递可以分为：</p><ol><li><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系</p></li><li><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</p></li></ol><p><img src="/.com//image-20240121153936896.png" alt="image-20240121153936896"></p><p>比如以上图中：</p><ul><li>projectA依赖了projectB。对于projectA 来说，projectB 就是直接依赖。</li><li>而projectB依赖了projectC及其他jar包。 那么此时，在projectA中也会将projectC的依赖传递下来。对于projectA 来说，projectC就是间接依赖。</li></ul><h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><p>问题：之前我们讲了依赖具有传递性。那么A依赖B，B依赖C，如果A不想将C依赖进来，是否可以做到？ </p><p>答案：在maven项目中，我们可以通过排除依赖来实现。</p><p>什么是排除依赖？</p><ul><li>排除依赖：指主动断开依赖的资源。（被排除的资源无需指定版本）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-projectB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--排除依赖, 主动断开依赖的资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>在项目中导入依赖的jar包后，默认情况下，可以在任何地方使用。</p><p>如果希望限制依赖的使用范围，可以通过<scope>标签设置其作用范围。</scope></p><p>作用范围：</p><ol><li><p>主程序范围有效（main文件夹范围内）</p></li><li><p>测试程序范围有效（test文件夹范围内）</p></li><li><p>是否参与打包运行（package指令范围内）</p></li></ol><table><thead><tr><th><strong>scope</strong>值</th><th><strong>主程序</strong></th><th><strong>测试程序</strong></th><th><strong>打包（运行）</strong></th><th><strong>范例</strong></th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一。 描述了一次项目构建，经历哪些阶段。</p><p>Maven对项目构建的生命周期划分为3套（相互独立）：</p><p><img src="/.com//image-20220616124015567.png"></p><ul><li><p>clean：清理工作。</p></li><li><p>default：核心工作。如：编译、测试、打包、安装、部署等。</p></li><li><p>site：生成报告、发布站点等。</p></li></ul><p>三套生命周期又包含哪些具体的阶段呢, 我们来看下面这幅图:</p><p><img src="/.com//image-20220616124348972.png" alt="image-20220616124348972"> </p><p>我们看到这三套生命周期，里面有很多很多的阶段，这么多生命周期阶段，其实我们常用的并不多，主要关注以下几个：</p><p>• clean：移除上一次构建生成的文件</p><p>• compile：编译项目源代码</p><p>• test：使用合适的单元测试框架运行测试(junit)</p><p>• package：将编译后的文件打包，如：jar、war等</p><p>• install：安装项目到本地仓库</p><p>Maven的生命周期是抽象的，这意味着生命周期本身不做任何实际工作。<strong>在Maven的设计中，实际任务（如源代码编译）都交由插件来完成。</strong></p><p>生命周期的顺序是：clean –&gt; validate –&gt; compile –&gt; test –&gt; package –&gt; verify –&gt; install –&gt; site –&gt; deploy </p><p>我们需要关注的就是：clean –&gt;  compile –&gt; test –&gt; package  –&gt; install </p><blockquote><p>说明：在同一套生命周期中，我们在执行后面的生命周期时，前面的生命周期都会执行。</p></blockquote><blockquote><p> 思考：当运行package生命周期时，clean、compile生命周期会不会运行？</p><p> ​clean不会运行，compile会运行。  因为compile与package属于同一套生命周期，而clean与package不属于同一套生命周期。</p></blockquote><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p>在日常开发中，当我们要执行指定的生命周期时，有两种执行方式：</p><ol><li>在idea工具右侧的maven工具栏中，选择对应的生命周期，双击执行</li><li>在DOS命令行中，通过maven命令执行</li></ol><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><ul><li>概念：Hyper Text Transfer Protocol ,超文本传输协议  规定了浏览器和服务器之间数据传输的规则</li><li>特点：<ol><li>基于TCP，面向连接，安全</li><li>基于请求-响应模型的：一次请求对应一次相应</li><li>HTTP协议是无状态的协议：对于事务处理没有记忆能力，每次请求-相应都是独立的。<ul><li>缺点：多次请求之间不能共享数据</li><li>优点：速度快</li></ul></li></ol></li></ul><h2 id="HTTP-请求数据格式"><a href="#HTTP-请求数据格式" class="headerlink" title="HTTP-请求数据格式"></a>HTTP-请求数据格式</h2><p><img src="/.com//image-20240125150954854.png"></p><p><strong>请求方式-GET：请求参数在请求行中，没有请求体，如：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1。GET请求大小是有限制的</strong></p><p><strong>请求方式-POST:请求参数在请求体中，POST请求大小是没有限制的</strong></p><h2 id="请求响应介绍-HTTP响应格式"><a href="#请求响应介绍-HTTP响应格式" class="headerlink" title="请求响应介绍-HTTP响应格式"></a>请求响应介绍-HTTP响应格式</h2><p><img src="/.com//image-20240125152927891.png" alt="image-20240125152927891"></p><p><img src="/.com//image-20240125152946173.png" alt="image-20240125152946173"></p><h2 id="状态码大类"><a href="#状态码大类" class="headerlink" title="状态码大类"></a>状态码大类</h2><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong>——临时状态码，表示请求已经接受，告诉客户端应该继续请求或者如果它已经完成则忽略它</td></tr><tr><td>2xx</td><td><strong>成功</strong>——表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong>——重定向到其它地方：它让客户端再发起一个请求以完成整个处理。</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong>——处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong>——处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><h2 id="常见的响应状态码"><a href="#常见的响应状态码" class="headerlink" title="常见的响应状态码"></a>常见的响应状态码</h2><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;200&#x3D;&#x3D;</td><td><strong><code>OK</code></strong></td><td>客户端请求成功，即<strong>处理成功</strong>，这是我们最想看到的状态码</td></tr><tr><td>302</td><td><strong><code>Found</code></strong></td><td>指示所请求的资源已移动到由<code>Location</code>响应头给定的 URL，浏览器会自动重新访问到这个页面</td></tr><tr><td>304</td><td><strong><code>Not Modified</code></strong></td><td>告诉客户端，你请求的资源至上次取得后，服务端并未更改，你直接用你本地缓存吧。隐式重定向</td></tr><tr><td>400</td><td><strong><code>Bad Request</code></strong></td><td>客户端请求有<strong>语法错误</strong>，不能被服务器所理解</td></tr><tr><td>403</td><td><strong><code>Forbidden</code></strong></td><td>服务器收到请求，但是<strong>拒绝提供服务</strong>，比如：没有权限访问相关资源</td></tr><tr><td>&#x3D;&#x3D;404&#x3D;&#x3D;</td><td><strong><code>Not Found</code></strong></td><td><strong>请求资源不存在</strong>，一般是URL输入有误，或者网站资源被删除了</td></tr><tr><td>405</td><td><strong><code>Method Not Allowed</code></strong></td><td>请求方式有误，比如应该用GET请求方式的资源，用了POST</td></tr><tr><td>428</td><td><strong><code>Precondition Required</code></strong></td><td><strong>服务器要求有条件的请求</strong>，告诉客户端要想访问该资源，必须携带特定的请求头</td></tr><tr><td>429</td><td><strong><code>Too Many Requests</code></strong></td><td>指示用户在给定时间内发送了<strong>太多请求</strong>（“限速”），配合 Retry-After(多长时间后可以请求)响应头一起使用</td></tr><tr><td>431</td><td><strong><code> Request Header Fields Too Large</code></strong></td><td><strong>请求头太大</strong>，服务器不愿意处理请求，因为它的头部字段太大。请求可以在减少请求头域的大小后重新提交。</td></tr><tr><td>&#x3D;&#x3D;500&#x3D;&#x3D;</td><td><strong><code>Internal Server Error</code></strong></td><td><strong>服务器发生不可预期的错误</strong>。服务器出异常了，赶紧看日志去吧</td></tr><tr><td>503</td><td><strong><code>Service Unavailable</code></strong></td><td><strong>服务器尚未准备好处理请求</strong>，服务器刚刚启动，还未初始化好</td></tr></tbody></table><p>状态码大全：<a href="https://cloud.tencent.com/developer/chapter/13553">https://cloud.tencent.com/developer/chapter/13553</a> </p><h1 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h1><ul><li>对HTTP协议操作进行封装，简化web程序开发</li><li>部署web项目，对外提供网上信息浏览服务</li></ul><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><ul><li>一个轻量级的web服务器，支持servlet、jsp等少了javaEE规范。</li><li>也被称为web容器，servlet容器</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>安装</li><li>卸载</li><li>启动：bin&#x2F;startup.bat</li><li>停止：bin&#x2F;shutdown.bat</li><li>部署：把文件夹移动到webapps文件夹下</li></ul><h1 id="Springboot内嵌Tomcat"><a href="#Springboot内嵌Tomcat" class="headerlink" title="Springboot内嵌Tomcat"></a>Springboot内嵌Tomcat</h1><h3 id="1-起步依赖"><a href="#1-起步依赖" class="headerlink" title="1.起步依赖"></a>1.起步依赖</h3><ul><li><strong>spring-boot-starter-web</strong></li><li><strong>spring-boot-starter-test</strong></li></ul><h3 id="2-内嵌Tomcat服务器"><a href="#2-内嵌Tomcat服务器" class="headerlink" title="2.内嵌Tomcat服务器"></a>2.内嵌Tomcat服务器</h3><ul><li><strong>基于Springboot开发的web应用程序，内置了tomcat服务器，当启动类运行时，会自动启动内嵌的tomcat服务器</strong></li></ul><h1 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h1><h2 id="请求响应-1"><a href="#请求响应-1" class="headerlink" title="请求响应"></a>请求响应</h2><p><img src="/.com//Snipaste_2024-02-02_14-50-38.jpg"></p><ul><li>请求（HttpServletRequest）：获取请求数据</li><li>相应（HttpServletResponse）：设置响应数据</li><li>BS架构：Browser&#x2F;Server，浏览器&#x2F;服务端架构模式，服务端只需要浏览器，应用程序的逻辑和数据都存储在服务器（维护方便  体验一般）</li><li>CS架构：Client&#x2F;Server，客户端&#x2F;服务端架构模式。（开发、维护麻烦  体验不错）</li></ul><h2 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h2><p><strong>postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件</strong></p><p>作用：常用于进行接口测试</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h4 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h4><h5 id="1-原始方式获取请求参数"><a href="#1-原始方式获取请求参数" class="headerlink" title="1.原始方式获取请求参数"></a><strong>1.原始方式获取请求参数</strong></h5><p><strong>在原始的web程序，获取请求参数，需要通过HttpServletRequest对象手动获取。</strong></p><ul><li>Controller方法形参中声明HttpServletRequest对象</li><li>调用对象的getParameter(参数名)</li><li><img src="/.com//Snipaste_2024-02-03_15-50-08.jpg"></li></ul><h5 id="2-SpringBoot中接收简单参数"><a href="#2-SpringBoot中接收简单参数" class="headerlink" title="2.SpringBoot中接收简单参数"></a><strong>2.SpringBoot中接收简单参数</strong></h5><ul><li>请求参数名与方法形参变量名相同</li><li>会自动进行类型转换</li><li><img src="/.com//Snipaste_2024-02-03_15-53-03.jpg"></li></ul><h5 id="3-RequestParam注解"><a href="#3-RequestParam注解" class="headerlink" title="3.@RequestParam注解"></a>3.@RequestParam注解</h5><ul><li>方法形参名称与请求参数名称不匹配，通过该注解完成映射</li><li>该注解的required属性默认是true，代表请求参数必须传递，如果设置为false则代表可以不传递  会显示为null</li><li><img src="/.com//Snipaste_2024-02-03_15-58-26.jpg"></li></ul><h4 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h4><p><strong>实体对象参数：请求参数名与形参对象属性名相同，定义PoJo接收即可</strong></p><h5 id="1-简单实体参数"><a href="#1-简单实体参数" class="headerlink" title="1.简单实体参数"></a>1.简单实体参数</h5><ul><li>创建一个User的javabeen类 里面封装name、age</li></ul><p><img src="/.com//Snipaste_2024-02-03_16-17-41.jpg"></p><h5 id="2-复杂实体参数"><a href="#2-复杂实体参数" class="headerlink" title="2.复杂实体参数"></a>2.复杂实体参数</h5><ul><li>创建一个User的javabeen类 里面封装name、age、adress</li><li>adress为Adress类 里面封装province、city</li></ul><p><img src="/.com//Snipaste_2024-02-03_16-26-20.jpg"></p><p><img src="/.com//Snipaste_2024-02-03_16-26-34.jpg"></p><p><img src="/.com//Snipaste_2024-02-03_16-26-49.jpg"></p><p>postman参数为：</p><p><img src="/.com//Snipaste_2024-02-03_16-27-03.jpg"></p><h4 id="数组集合参数"><a href="#数组集合参数" class="headerlink" title="数组集合参数"></a>数组集合参数</h4><h5 id="1-数组参数"><a href="#1-数组参数" class="headerlink" title="1.数组参数"></a>1.数组参数</h5><p><strong>数组参数：请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</strong></p><ul><li><p><img src="/.com//Snipaste_2024-02-04_15-22-59.jpg"></p></li><li><p><img src="/.com//Snipaste_2024-02-04_15-23-23.jpg"></p></li></ul><p>确保参数名与方法中的形参名一致</p><h5 id="2-集合参数"><a href="#2-集合参数" class="headerlink" title="2.集合参数"></a>2.集合参数</h5><p><strong>集合参数：请求参数名与形参集合名称相同且请求参数为多个，<code>@RequestParam</code>绑定参数关系</strong></p><ul><li><img src="/.com//Snipaste_2024-02-04_15-26-43.jpg"></li><li><img src="/.com//Snipaste_2024-02-04_15-26-57.jpg"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组参数：请求参数名与形参数组名称相同，可以直接使用数组封装</span><br><span class="line">集合参数：请求参数名与形参中结合变量名相同，通过@RequestParam绑定参数关系</span><br></pre></td></tr></table></figure><h4 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h4><p><strong>日期参数：使用<code>@DataTimeFormat</code>注解 完成日期参数格式转换</strong></p><ul><li><p><img src="/.com//Snipaste_2024-02-04_15-38-53.jpg"></p></li><li><p><img src="/.com//Snipaste_2024-02-04_15-38-46.jpg"></p></li></ul><h4 id="Json格式参数"><a href="#Json格式参数" class="headerlink" title="Json格式参数"></a>Json格式参数</h4><p><strong>json格式参数：json数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数，需要使用<code>@RequestBody</code>表示</strong></p><ul><li><img src="/.com//Snipaste_2024-02-04_15-49-46.jpg"></li><li><img src="/.com//Snipaste_2024-02-04_15-50-06.jpg"></li></ul><h4 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h4><p><strong>路径参数：通过请求URL直接传递参数，使用{…}来标识该路径参数，需要使用<code>@PathVariable</code>获取参数路径</strong></p><ul><li><p><img src="/.com//Snipaste_2024-02-04_16-05-59.jpg"></p></li><li><p><img src="/.com//Snipaste_2024-02-04_16-06-19.jpg"></p></li></ul><p>多路径：</p><ul><li><img src="/.com//Snipaste_2024-02-04_16-07-04.jpg"></li><li><img src="/.com//Snipaste_2024-02-04_16-07-19.jpg"></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="/.com//Snipaste_2024-02-04_16-08-28.jpg"></p><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a><strong>@ResponseBody</strong></h4><p>类型：方法注解、类注解</p><p>位置：Controller类上&#x2F;方法上</p><p>作用：将方法返回值直接响应，若返回值类型是 实体对象&#x2F;集合 ，转JSON格式响应</p><p>说明：@RestController&#x3D;@Controller + @ResponseBody</p><h4 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a><strong>统一响应结果</strong></h4><p>Result(code、msg、data)</p><p>如：</p><ul><li><p><img src="/.com//Snipaste_2024-02-04_16-41-24.jpg"></p><p><a href="http://localhost:8080/hello">http://localhost:8080/hello</a></p></li><li><p><img src="/.com//Snipaste_2024-02-04_16-41-29.jpg"></p><p><a href="http://localhost:8080/getAddr">http://localhost:8080/getAddr</a></p></li><li><p><img src="/.com//Snipaste_2024-02-04_16-41-40.jpg"></p></li></ul><p><a href="http://localhost:8080/listAddr">http://localhost:8080/listAddr</a></p><h4 id="案例：获取员工数据，并统一响应结果，在页面渲染"><a href="#案例：获取员工数据，并统一响应结果，在页面渲染" class="headerlink" title="案例：获取员工数据，并统一响应结果，在页面渲染"></a>案例：获取员工数据，并统一响应结果，在页面渲染</h4><p><img src="/.com//Snipaste_2024-02-04_17-16-30.jpg"></p><p><img src="/.com//Snipaste_2024-02-04_17-15-56.jpg"></p><h2 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>在我们进行程序设计以及程序开发时，尽可能让每一个接口、类、方法的职责更单一些（单一职责原则）。</p><blockquote><p>单一职责原则：一个类或一个方法，就只做一件事情，只管一块功能。</p><p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利用后期的维护。</p></blockquote><p>我们之前开发的程序呢，并不满足单一职责原则。下面我们来分析下之前的程序：</p><p><img src="/.com//image-20221204191650390.png" alt="image-20221204191650390"> </p><p>那其实我们上述案例的处理逻辑呢，从组成上看可以分为三个部分：</p><ul><li>数据访问：负责业务数据的维护操作，包括增、删、改、查等操作。</li><li>逻辑处理：负责业务逻辑处理的代码。</li><li>请求处理、响应数据：负责，接收页面的请求，给页面响应数据。</li></ul><p>按照上述的三个组成部分，在我们项目开发中呢，可以将代码分为三层：</p><p><img src="/.com//image-20221204193837678.png" alt="image-20221204193837678"></p><ul><li>Controller：控制层。接收前端发送的请求，对请求进行处理，并响应数据。</li><li>Service：业务逻辑层。处理具体的业务逻辑。</li><li>Dao：数据访问层(Data Access Object)，也称为持久层。负责数据访问操作，包括数据的增、删、改、查。</li></ul><p>基于三层架构的程序执行流程：</p><p><img src="/.com//image-20221204194207812.png" alt="image-20221204194207812"></p><ul><li>前端发起的请求，由Controller层接收（Controller响应数据给前端）</li><li>Controller层调用Service层来进行逻辑处理（Service层处理完后，把处理结果返回给Controller层）</li><li>Serivce层调用Dao层（逻辑处理过程中需要用到的一些数据要从Dao层获取）</li><li>Dao层操作文件中的数据（Dao拿到的数据会返回给Service层）</li></ul><blockquote><p>思考：按照三层架构的思想，如何要对业务逻辑(Service层)进行变更，会影响到Controller层和Dao层吗？ </p><p>答案：不会影响。 （程序的扩展性、维护性变得更好了）</p></blockquote><h4 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h4><p>我们使用三层架构思想，来改造下之前的程序：</p><ul><li>控制层包名：xxxx.controller</li><li>业务逻辑层包名：xxxx.service</li><li>数据访问层包名：xxxx.dao</li></ul><p><img src="/.com//image-20221204195812200.png" alt="image-20221204195812200"></p><p><strong>控制层：</strong>接收前端发送的请求，对请求进行处理，并响应数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="comment">//业务层对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service层, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>业务逻辑层：</strong>处理具体的业务逻辑</p><ul><li>业务接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务逻辑接口（制定业务标准）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//获取员工列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务逻辑实现类（按照业务标准实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//dao层对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpDao</span> <span class="variable">empDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpDaoA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据访问层：</strong>负责数据的访问操作，包含数据的增、删、改、查</p><ul><li>数据访问接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据访问层接口（制定标准）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="comment">//获取员工列表数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据访问实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据访问实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221204201342490.png" alt="image-20221204201342490"></p><p>三层架构的好处：</p><ol><li>复用性强</li><li>便于维护</li><li>利用扩展</li></ol><h3 id="分层解耦-1"><a href="#分层解耦-1" class="headerlink" title="分层解耦"></a>分层解耦</h3><p>刚才我们学习过程序分层思想了，接下来呢，我们来学习下程序的解耦思想。</p><p>解耦：解除耦合。</p><h4 id="耦合问题"><a href="#耦合问题" class="headerlink" title="耦合问题"></a>耦合问题</h4><p>首先需要了解软件开发涉及到的两个概念：内聚和耦合。</p><ul><li><p>内聚：软件中各个功能模块内部的功能联系。</p></li><li><p>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</p></li></ul><p><strong>软件设计原则：高内聚低耦合。</strong></p><blockquote><p>高内聚指的是：一个模块中各个元素之间的联系的紧密程度，如果各个元素(语句、程序段)之间的联系程度越高，则内聚性越高，即 “高内聚”。</p><p>低耦合指的是：软件中各个层、模块之间的依赖关联程序越低越好。</p></blockquote><p>程序中高内聚的体现：</p><ul><li>EmpServiceA类中只编写了和员工相关的逻辑处理代码</li></ul><p><img src="/.com//image-20221204202531571.png" alt="image-20221204202531571"> </p><p>程序中耦合代码的体现：</p><ul><li>把业务类变为EmpServiceB时，需要修改controller层中的代码</li></ul><p><img src="/.com//image-20221204203904900.png" alt="image-20221204203904900"></p><p>高内聚、低耦合的目的是使程序模块的可重用性、移植性大大增强。</p><p><img src="/.com//image-20220828215549593.png"></p><h4 id="解耦思路"><a href="#解耦思路" class="headerlink" title="解耦思路"></a>解耦思路</h4><p>之前我们在编写代码时，需要什么对象，就直接new一个就可以了。 这种做法呢，层与层之间代码就耦合了，当service层的实现变了之后， 我们还需要修改controller层的代码。</p><p><img src="/.com//image-20221204204916033.png" alt="image-20221204204916033"></p><p> 那应该怎么解耦呢？</p><ul><li>首先不能在EmpController中使用new对象。代码如下：</li></ul><p><img src="/.com//image-20221204205328069.png" alt="image-20221204205328069"></p><ul><li>此时，就存在另一个问题了，不能new，就意味着没有业务层对象（程序运行就报错），怎么办呢？<ul><li>我们的解决思路是：<ul><li>提供一个容器，容器中存储一些对象(例：EmpService对象)</li><li>controller程序从容器中获取EmpService类型的对象</li></ul></li></ul></li></ul><p>我们想要实现上述解耦操作，就涉及到Spring中的两个核心概念：</p><ul><li><p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p><blockquote><p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p></blockquote></li><li><p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p><blockquote><p>程序运行时需要某个资源，此时容器就为其提供这个资源。</p><p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p></blockquote></li></ul><p>IOC容器中创建、管理的对象，称之为：bean对象</p><h3 id="IOC-DI"><a href="#IOC-DI" class="headerlink" title="IOC&amp;DI"></a>IOC&amp;DI</h3><p>上面我们引出了Spring中IOC和DI的基本概念，下面我们就来具体学习下IOC和DI的代码实现。</p><h4 id="IOC-DI入门"><a href="#IOC-DI入门" class="headerlink" title="IOC&amp;DI入门"></a>IOC&amp;DI入门</h4><p>任务：完成Controller层、Service层、Dao层的代码解耦</p><ul><li>思路：<ol><li>删除Controller层、Service层中new对象的代码</li><li>Service层及Dao层的实现类，交给IOC容器管理</li><li>为Controller及Service注入运行时依赖的对象<ul><li>Controller程序中注入依赖的Service层对象</li><li>Service程序中注入依赖的Dao层对象</li></ul></li></ol></li></ul><p>第1步：删除Controller层、Service层中new对象的代码</p><p><img src="/.com//image-20221204212807207.png" alt="image-20221204212807207"></p><p>第2步：Service层及Dao层的实现类，交给IOC容器管理</p><ul><li>使用Spring提供的注解：@Component ，就可以实现类交给IOC容器管理</li></ul><p><img src="/.com//image-20221204213328034.png" alt="image-20221204213328034"></p><p>第3步：为Controller及Service注入运行时依赖的对象</p><ul><li>使用Spring提供的注解：@Autowired ，就可以实现程序运行时IOC容器自动注入需要的依赖对象</li></ul><p><img src="/.com//image-20221204213859112.png" alt="image-20221204213859112"></p><p>完整的三层代码：</p><ul><li><strong>Controller层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Service层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dao层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试：</p><ul><li>启动SpringBoot引导类，打开浏览器，输入：<a href="http://localhost:8080/emp.html">http://localhost:8080/emp.html</a></li></ul><p><img src="/.com//image-20221204185455556.png" alt="image-20221204185455556"></p><h4 id="IOC详解"><a href="#IOC详解" class="headerlink" title="IOC详解"></a>IOC详解</h4><p>通过IOC和DI的入门程序呢，我们已经基本了解了IOC和DI的基础操作。接下来呢，我们学习下IOC控制反转和DI依赖注入的细节。</p><h5 id="bean的声明"><a href="#bean的声明" class="headerlink" title="bean的声明"></a>bean的声明</h5><p>前面我们提到IOC控制反转，就是将对象的控制权交给Spring的IOC容器，由IOC容器创建及管理对象。IOC容器创建的对象称为bean对象。</p><p>在之前的入门案例中，要把某个对象交给IOC容器管理，需要在类上添加一个注解：@Component </p><p>而Spring框架为了更好的标识web应用程序开发当中，bean对象到底归属于哪一层，又提供了@Component的衍生注解：</p><ul><li>@Controller    （标注在控制层类上）</li><li>@Service          （标注在业务层类上）</li><li>@Repository    （标注在数据访问层类上）</li></ul><p>修改入门案例代码：</p><ul><li><strong>Controller层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  <span class="comment">//@RestController = @Controller + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Service层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dao层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th align="left">注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td align="left">@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td align="left">@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td align="left">@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的少）</td></tr><tr><td align="left">@Component</td><td>声明bean的基础注解</td><td>不属于以上三类时，用此注解</td></tr></tbody></table><blockquote><p>查看源码：<img src="/.com//image-20221204221320230.png" alt="image-20221204221320230"></p></blockquote><p>在IOC容器中，每一个Bean都有一个属于自己的名字，可以通过注解的value属性指定bean的名字。如果没有指定，默认为类名首字母小写。</p><p><img src="/.com//image-20221204222650873.png" alt="image-20221204222650873"></p><blockquote><p>注意事项: </p><ul><li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</li></ul></blockquote><h5 id="组件扫描"><a href="#组件扫描" class="headerlink" title="组件扫描"></a>组件扫描</h5><p>问题：使用前面学习的四个注解声明的bean，一定会生效吗？</p><p>答案：不一定。（原因：bean想要生效，还需要被组件扫描）</p><p> 下面我们通过修改项目工程的目录结构，来测试bean对象是否生效：</p><p><img src="/.com//image-20221204223602694.png" alt="image-20221204223602694"></p><p>运行程序后，报错：</p><p><img src="/.com//image-20221204223815554.png" alt="image-20221204223815554"></p><p>为什么没有找到bean对象呢？</p><ul><li>使用四大注解声明的bean，要想生效，还需要被组件扫描注解@ComponentScan扫描</li></ul><blockquote><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了引导类声明注解 @SpringBootApplication 中，&#x3D;&#x3D;<strong>默认扫描的范围是SpringBoot启动类所在包及其子包</strong>&#x3D;&#x3D;。</p><p><img src="/.com//image-20221204224643683.png" alt="image-20221204224643683"> </p></blockquote><ul><li>解决方案：手动添加@ComponentScan注解，指定要扫描的包   （&#x3D;&#x3D;仅做了解，不推荐&#x3D;&#x3D;）</li></ul><p><img src="/.com//image-20221204225437297.png" alt="image-20221204225437297"></p><p>推荐做法（如下图）：</p><ul><li>将我们定义的controller，service，dao这些包呢，都放在引导类所在包com.itheima的子包下，这样我们定义的bean就会被自动的扫描到</li></ul><p><img src="/.com//image-20221204225815624.png" alt="image-20221204225815624"></p><h4 id="DI详解"><a href="#DI详解" class="headerlink" title="DI详解"></a>DI详解</h4><p>上一小节我们讲解了控制反转IOC的细节，接下来呢，我们学习依赖注解DI的细节。</p><p>依赖注入，是指IOC容器要为应用程序去提供运行时所依赖的资源，而资源指的就是对象。</p><p>在入门程序案例中，我们使用了@Autowired这个注解，完成了依赖注入的操作，而这个Autowired翻译过来叫：自动装配。</p><p>@Autowired注解，默认是按照<strong>类型</strong>进行自动装配的（去IOC容器中找某个类型的对象，然后完成注入操作）</p><blockquote><p>入门程序举例：在EmpController运行的时候，就要到IOC容器当中去查找EmpService这个类型的对象，而我们的IOC容器中刚好有一个EmpService这个类型的对象，所以就找到了这个类型的对象完成注入操作。</p></blockquote><p>那如果在IOC容器中，存在多个相同类型的bean对象，会出现什么情况呢？</p><p><img src="/.com//image-20221204232154445.png" alt="image-20221204232154445"></p><ul><li>程序运行会报错</li></ul><p><img src="/.com//image-20221204231616724.png" alt="image-20221204231616724"></p><p>如何解决上述问题呢？Spring提供了以下几种解决方案：</p><ul><li><p>@Primary</p></li><li><p>@Qualifier</p></li><li><p>@Resource</p></li></ul><p>使用@Primary注解：当存在多个相同类型的Bean注入时，加上@Primary注解，来确定默认的实现。</p><p><img src="/.com//image-20221204232501679.png" alt="image-20221204232501679"> </p><p>使用@Qualifier注解：指定当前要注入的bean对象。 在@Qualifier的value属性中，指定注入的bean的名称。</p><ul><li>@Qualifier注解不能单独使用，必须配合@Autowired使用</li></ul><p><img src="/.com//image-20221204233333606.png" alt="image-20221204233333606"></p><p>使用@Resource注解：是按照bean的名称进行注入。通过name属性指定要注入的bean的名称。</p><p><img src="/.com//image-20221204233637735.png" alt="image-20221204233637735"></p><blockquote><p>面试题 ： @Autowird 与 @Resource的区别</p><ul><li>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired 默认是按照类型注入，而@Resource是按照名称注入</li></ul></blockquote><h1 id="数据库开发-MySQL"><a href="#数据库开发-MySQL" class="headerlink" title="数据库开发-MySQL"></a>数据库开发-MySQL</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我们讲解SpringBootWeb基础知识(请求响应案例)的时候，我们讲到在web开发中，为了应用程序职责单一，方便维护，我们一般将web应用程序分为三层，即：Controller、Service、Dao 。</p><p>之前我们的案例中，是这样子的请求流程：浏览器发起请求，先请求Controller；Controller接收到请求之后，调用Service进行业务逻辑处理；Service再调用Dao，Dao再解析user.xml中所存储的数据。</p><p><img src="/.com//image-20221205001241294.png" alt="image-20221205001241294"></p><p>xml文件中可以存储数据，但是在企业项目开发中不会使用xml文件存储数据，因为不便管理维护，操作难度大。 在真实的企业开发中呢，都会采用数据库来存储和管理数据，那此时，web开发调用流程图如下所示：</p><p><img src="/.com//image-20221205001346266.png" alt="image-20221205001346266"></p><p>首先来了解一下什么是数据库。</p><ul><li>数据库：英文为 DataBase，简称DB，它是存储和管理数据的仓库。</li></ul><p>像我们日常访问的电商网站京东，企业内部的管理系统OA、ERP、CRM这类的系统，以及大家每天都会刷的头条、抖音类的app，那这些大家所看到的数据，其实都是存储在数据库中的。最终这些数据，只是在浏览器或app中展示出来而已，最终数据的存储和管理都是数据库负责的。</p><p><img src="/.com//image-20221205001501275.png" alt="image-20221205001501275"></p><p>数据是存储在数据库中的，那我们要如何来操作数据库以及数据库中所存放的数据呢？</p><p>那这里呢，会涉及到一个软件：数据库管理系统（<strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem，简称DBMS）</p><ul><li>DBMS是操作和管理数据库的大型软件。将来我们只需要操作这个软件，就可以通过这个软件来操纵和管理数据库了。</li></ul><p>此时又出现一个问题：DBMS这个软件怎么知道要操作的是哪个数据库、哪个数据呢？是对数据做修改还是查询呢？</p><ul><li>需要给DBMS软件发送一条指令，告诉这个软件我们要执行的是什么样的操作，要对哪个数据进行操作。而这个指令就是SQL语句</li></ul><p>SQL（<strong>S</strong>tructured <strong>Q</strong>uery <strong>L</strong>anguage，简称SQL）：结构化查询语言，它是操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准。我们学习数据库开发，最为重要的就是学习SQL语句 。</p><blockquote><p>关系型数据库：我们后面会详细讲解，现在大家只需要知道我们学习的数据库属于关系型数据库即可。</p></blockquote><p><img src="/.com//image-20221205095039939.png" alt="image-20221205095039939"></p><p>结论：程序员给数据库管理系统(DBMS)发送SQL语句，再由数据库管理系统操作数据库当中的数据。</p><p>了解了数据库的一些简单概念之后，接下来我们再来介绍下目前主流的数据库，这里截取了排名前十的数据库：</p><p><img src="/.com//image-20221205120408757.png" alt="image-20221205120408757"> </p><ul><li>Oracle：大型的收费数据库，Oracle公司产品，价格昂贵。（通常是不差钱的公司会选择使用这个数据库）</li><li>MySQL：开源免费的中小型数据库，后来Sun公司收购了MySQL，而Oracle又收购了Sun公司。目前Oracle推出两个版本的Mysql：社区版(开源免费)、商业版(收费)。</li><li>SQL Server：Microsoft 公司推出的收费的中型数据库，C#、.net等语言常用。</li><li>PostgreSQL：开源免费的中小型数据库。</li><li>DB2：IBM公司的大型收费数据库产品。</li><li>SQLLite：嵌入式的微型数据库。Android内置的数据库采用的就是该数据库。</li><li>MariaDB：开源免费的中小型数据库。是MySQL数据库的另外一个分支、另外一个衍生产品，与MySQL数据库有很好的兼容性。</li></ul><p>那这么多数据库，我们全部都需要学习吗，其实并不用，我们只需要学习其中的一个就可以了，我们此次课程中学习的数据库是现在互联网公司开发使用最为流行的MySQL数据库。</p><p>此时大家可能会有一个疑问，我们现在学习的是Mysql数据库，我们以后去公司做开发，如果用到的是Oracle数据库或SQL Server数据库该怎么办？其实大家完全不用担心这个问题，因为这些数据库都是属于关系型数据库，要操作关系型数据库都是通过 SQL语句来实现的，而SQL语句又是操作关系型数据库的统一标准。</p><blockquote><p>结论：只要我们学会了SQL语句，就可以通过SQL语句来操作Mysql，也可以通过SQL语句来操作Oracle或SQL Server</p></blockquote><p>课程内容安排：</p><p><img src="/.com//image-20221205122731402.png" alt="image-20221205122731402"></p><p>以上课程内容拆解为3部分知识点：</p><p><img src="/.com//image-20221205122937131.png" alt="image-20221205122937131"></p><p>接下来我们就先进入到第一天的Mysql概述学习。</p><h2 id="1-MySQL概述"><a href="#1-MySQL概述" class="headerlink" title="1. MySQL概述"></a>1. MySQL概述</h2><h3 id="1-1-数据模型"><a href="#1-1-数据模型" class="headerlink" title="1.1 数据模型"></a>1.1 数据模型</h3><p>介绍完了Mysql数据库的安装配置之后，接下来我们再来聊一聊Mysql当中的数据模型。学完了这一小节之后，我们就能够知道在Mysql数据库当中到底是如何来存储和管理数据的。</p><p>在介绍 Mysql的数据模型之前，需要先了解一个概念：关系型数据库。</p><p><strong>关系型数据库（RDBMS）</strong></p><p>概念：建立在关系模型基础上，由多张相互连接的<strong>二维表</strong>组成的数据库。</p><p>而所谓二维表，指的是由行和列组成的表，如下图：</p><p><img src="/.com//image-20221205145028667.png" alt="image-20221205145028667"> </p><p>二维表的优点：</p><ul><li><p>使用表存储数据，格式统一，便于维护</p></li><li><p>使用SQL语言操作，标准统一，使用方便，可用于复杂查询</p></li></ul><blockquote><p>我们之前提到的MySQL、Oracle、DB2、SQLServer这些都是属于关系型数据库，里面都是基于二维表存储数据的。</p><p>结论：基于二维表存储数据的数据库就成为关系型数据库，不是基于二维表存储数据的数据库，就是非关系型数据库（比如大家后面要学习的Redis，就属于非关系型数据库）。</p></blockquote><p><strong>2). 数据模型</strong></p><p>介绍完了关系型数据库之后，接下来我们再来看一看在Mysql数据库当中到底是如何来存储数据的，也就是Mysql 的数据模型。</p><p>MySQL是关系型数据库，是基于二维表进行数据存储的，具体的结构图下:</p><p><img src="/.com//image-20220829111741419.png" alt="image-20220829111741419"> </p><ul><li>通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库</li><li>使用MySQL客户端，向数据库管理系统发送一条SQL语句，由数据库管理系统根据SQL语句指令去操作数据库中的表结构及数据</li><li>一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包含多行记录。</li></ul><blockquote><p>在Mysql数据库服务器当中存储数据，你需要：</p><ol><li>先去创建数据库（可以创建多个数据库，之间是相互独立的）</li><li>在数据库下再去创建数据表（一个数据库下可以创建多张表）</li><li>再将数据存放在数据表中（一张表可以存储多行数据）</li></ol></blockquote><h3 id="1-2-SQL简介"><a href="#1-2-SQL简介" class="headerlink" title="1.2 SQL简介"></a>1.2 SQL简介</h3><p>SQL：结构化查询语言。一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准。</p><p>在学习具体的SQL语句之前，先来了解一下SQL语言的语法。</p><h4 id="1-2-1-SQL通用语法"><a href="#1-2-1-SQL通用语法" class="headerlink" title="1.2.1 SQL通用语法"></a>1.2.1 SQL通用语法</h4><p>1、SQL语句可以单行或多行书写，以分号结尾。</p><p><img src="/.com//image-20221205151656214.png" alt="image-20221205151656214"></p><p>2、SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</p><p><img src="/.com//image-20221205151953441.png" alt="image-20221205151953441"></p><p>3、MySQL数据库的SQL语句不区分大小写。</p><p><img src="/.com//image-20221205152112070.png" alt="image-20221205152112070"></p><p>4、注释：</p><ul><li>单行注释：– 注释内容   或   # 注释内容(MySQL特有)</li><li>多行注释： &#x2F;* 注释内容 *&#x2F;</li></ul><blockquote><p>以上就是SQL语句的通用语法，这些通用语法大家目前先有一个直观的认识，我们后面在讲解每一类SQL语句的时候，还会再来强调通用语法。</p></blockquote><h4 id="1-2-2-分类"><a href="#1-2-2-分类" class="headerlink" title="1.2.2 分类"></a>1.2.2 分类</h4><p>SQL语句根据其功能被分为四大类：DDL、DML、DQL、DCL </p><table><thead><tr><th><strong>分类</strong></th><th><strong>全称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition  Language</td><td>数据定义语言，用来定义数据库对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation  Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control  Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><p><img src="/.com//image-20221205152804250.png" alt="image-20221205152804250">  </p><h2 id="2-数据库设计-DDL"><a href="#2-数据库设计-DDL" class="headerlink" title="2. 数据库设计-DDL"></a>2. 数据库设计-DDL</h2><p>下面我们就正式的进入到SQL语句的学习，在学习之前先给大家介绍一下我们要开发一个项目，整个开发流程是什么样的，以及在流程当中哪些环节会涉及到数据库。</p><h3 id="2-1-项目开发流程"><a href="#2-1-项目开发流程" class="headerlink" title="2.1 项目开发流程"></a>2.1 项目开发流程</h3><p><img src="/.com//image-20220829112953742.png" alt="image-20220829112953742"></p><p>需求文档：</p><ul><li>在我们开发一个项目或者项目当中的某个模块之前，会先会拿到产品经理给我们提供的页面原型及需求文档。</li></ul><p><img src="/.com//image-20221205154101142.png" alt="image-20221205154101142"></p><p>设计：</p><ul><li>拿到产品原型和需求文档之后，我们首先要做的不是编码，而是要先进行项目的设计，其中就包括概要设计、详细设计、接口设计、数据库设计等等。</li><li>数据库设计根据产品原型以及需求文档，要分析各个模块涉及到的表结构以及表结构之间的关系，以及表结构的详细信息。最终我们需要将数据库以及数据库当中的表结构设计创建出来。</li></ul><p>开发&#x2F;测试：</p><ul><li>参照页面原型和需求进行编码，实现业务功能。在这个过程当中，我们就需要来操作设计出来的数据库表结构，来完成业务的增删改查操作等。</li></ul><p>部署上线：</p><ul><li>在项目的功能开发测试完成之后，项目就可以上线运行了，后期如果项目遇到性能瓶颈，还需要对项目进行优化。优化很重要的一个部分就是数据库的优化，包括数据库当中索引的建立、SQL 的优化、分库分表等操作。</li></ul><p>在上述的流程当中，针对于数据库来说，主要包括三个阶段：</p><ol><li>数据库设计阶段<ul><li>参照页面原型以及需求文档设计数据库表结构</li></ul></li><li>数据库操作阶段<ul><li>根据业务功能的实现，编写SQL语句对数据表中的数据进行增删改查操作</li></ul></li><li>数据库优化阶段<ul><li>通过数据库的优化来提高数据库的访问性能。优化手段：索引、SQL优化、分库分表等</li></ul></li></ol><p>接下来我们就先来学习第一部分数据库的设计，而数据库的设计就是来定义数据库，定义表结构以及表中的字段。</p><h3 id="2-2-数据库操作"><a href="#2-2-数据库操作" class="headerlink" title="2.2 数据库操作"></a>2.2 数据库操作</h3><p>我们在进行数据库设计，需要使用到刚才所介绍SQL分类中的DDL语句。</p><p>DDL英文全称是Data Definition Language(数据定义语言)，用来定义数据库对象(数据库、表)。</p><p>DDL中数据库的常见操作：查询、创建、使用、删除。</p><h4 id="2-2-1-查询数据库"><a href="#2-2-1-查询数据库" class="headerlink" title="2.2.1 查询数据库"></a>2.2.1 查询数据库</h4><p><strong>查询所有数据库：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p>命令行中执行效果如下：</p><p><img src="/.com//image-20220829124104154.png" alt="image-20220829124104154"> </p><p><strong>查询当前数据库：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure><p>命令行中执行效果如果：</p><p><img src="/.com//image-20221205174615074.png" alt="image-20221205174615074"></p><blockquote><p>我们要操作某一个数据库，必须要切换到对应的数据库中。 </p><p>通过指令：select  database() ，就可以查询到当前所处的数据库 </p></blockquote><h4 id="2-2-2-创建数据库"><a href="#2-2-2-创建数据库" class="headerlink" title="2.2.2 创建数据库"></a>2.2.2 创建数据库</h4><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database [ if not exists ] 数据库名;</span><br></pre></td></tr></table></figure><p>案例： 创建一个itcast数据库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database itcast;</span><br></pre></td></tr></table></figure><p>命令行执行效果如下：</p><p><img src="/.com//image-20220829124219427.png" alt="image-20220829124219427"> </p><p>&#x3D;&#x3D;注意：在同一个数据库服务器中，不能创建两个名称相同的数据库，否则将会报错。&#x3D;&#x3D;</p><p><img src="/.com//image-20220829124250514.png" alt="image-20220829124250514"></p><ul><li>可以使用if not exists来避免这个问题</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数据库不存在,则创建该数据库；如果存在则不创建</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> extists itcast; </span><br></pre></td></tr></table></figure><p> 命令行执行效果如下： <img src="/.com//image-20220829124326741.png" alt="image-20220829124326741"> </p><h4 id="2-2-3-使用数据库"><a href="#2-2-3-使用数据库" class="headerlink" title="2.2.3 使用数据库"></a>2.2.3 使用数据库</h4><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名 ;</span><br></pre></td></tr></table></figure><blockquote><p>我们要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则不能操作。</p></blockquote><p>案例：切换到itcast数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use itcast;</span><br></pre></td></tr></table></figure><p>命令执行效果如下：</p><p><img src="/.com//image-20220829124929708.png" alt="image-20220829124929708"> </p><h4 id="2-2-4-删除数据库"><a href="#2-2-4-删除数据库" class="headerlink" title="2.2.4 删除数据库"></a>2.2.4 删除数据库</h4><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database [ if exists ] 数据库名 ;</span><br></pre></td></tr></table></figure><blockquote><p>如果删除一个不存在的数据库，将会报错。</p><p>可以加上参数 if exists ，如果数据库存在，再执行删除，否则不执行删除。</p></blockquote><p>案例：删除itcast数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists itcast; -- itcast数据库存在时删除</span><br></pre></td></tr></table></figure><p>命令执行效果如下：</p><p><img src="/.com//image-20220829125006142.png" alt="image-20220829125006142"> </p><blockquote><p>说明：上述语法中的database，也可以替换成 schema</p><ul><li>如：create schema db01;</li><li>如：show schemas;</li></ul><p><img src="/.com//image-20221205180608004.png" alt="image-20221205180608004"></p></blockquote><h3 id="2-3-图形化工具"><a href="#2-3-图形化工具" class="headerlink" title="2.3 图形化工具"></a>2.3 图形化工具</h3><h4 id="2-3-1-介绍"><a href="#2-3-1-介绍" class="headerlink" title="2.3.1 介绍"></a>2.3.1 介绍</h4><p>前面我们讲解了DDL中关于数据库操作的SQL语句，在我们编写这些SQL时，都是在命令行当中完成的。大家在练习的时候应该也感受到了，在命令行当中来敲这些SQL语句很不方便，主要的原因有以下 3 点：</p><ol><li>没有任何代码提示。（全靠记忆，容易敲错字母造成执行报错）</li><li>操作繁琐，影响开发效率。（所有的功能操作都是通过SQL语句来完成的）</li><li>编写过的SQL代码无法保存。</li></ol><p>在项目开发当中，通常为了提高开发效率，都会借助于现成的图形化管理工具来操作数据库。</p><p>目前MySQL主流的图形化界面工具有以下几种：</p><p><img src="/.com//image-20221205184802646.png" alt="image-20221205184802646"></p><p>DataGrip是JetBrains旗下的一款数据库管理工具，是管理和开发MySQL、Oracle、PostgreSQL的理想解决方案。</p><p>官网： <a href="https://www.jetbrains.com/zh-cn/datagrip/">https://www.jetbrains.com/zh-cn/datagrip/</a></p><h4 id="2-3-2-安装"><a href="#2-3-2-安装" class="headerlink" title="2.3.2 安装"></a>2.3.2 安装</h4><p>安装： 参考资料中提供的《DataGrip安装手册》</p><blockquote><p>说明：DataGrip这款工具可以不用安装，因为Jetbrains公司已经将DataGrip这款工具的功能已经集成到了 IDEA当中，所以我们就可以使用IDEA来作为一款图形化界面工具来操作Mysql数据库。</p></blockquote><h4 id="2-3-3-使用"><a href="#2-3-3-使用" class="headerlink" title="2.3.3 使用"></a>2.3.3 使用</h4><h5 id="2-2-3-1-连接数据库"><a href="#2-2-3-1-连接数据库" class="headerlink" title="2.2.3.1 连接数据库"></a>2.2.3.1 连接数据库</h5><p>1、打开IDEA自带的Database</p><p><img src="/.com//image-20221205190929756.png" alt="image-20221205190929756"></p><p>2、配置MySQL</p><p><img src="/.com//image-20221205191143072.png" alt="image-20221205191143072"></p><p>3、输入相关信息</p><p><img src="/.com//image-20221205192606038.png" alt="image-20221205192606038"> </p><p>4、下载MySQL连接驱动</p><p><img src="/.com//image-20221205192847190.png" alt="image-20221205192847190"></p><p>5、测试数据库连接</p><p><img src="/.com//image-20221205193304124.png" alt="image-20221205193304124"></p><p>6、保存配置</p><p><img src="/.com//image-20221205193409856.png" alt="image-20221205193409856"></p><p>默认情况下，连接上了MySQL数据库之后， 数据库并没有全部展示出来。 需要选择要展示哪些数据库。具体操作如下：</p><p><img src="/.com//8.gif"></p><h5 id="2-2-3-2-操作数据库"><a href="#2-2-3-2-操作数据库" class="headerlink" title="2.2.3.2 操作数据库"></a>2.2.3.2 操作数据库</h5><p><strong>创建数据库：</strong></p><p><img src="/.com//image-20221205195346655.png" alt="image-20221205195346655"></p><p><img src="/.com//image-20221205195510716.png" alt="image-20221205195510716"></p><blockquote><p>有了图形化界面工具后，就可以方便的使用图形化工具：创建数据库，创建表、修改表等DDL操作。</p><p>其实工具底层也是通过DDL语句操作的数据库，只不过这些SQL语句是图形化界面工具帮我们自动完成的。</p></blockquote><p><strong>查看所有数据库：</strong></p><p><img src="/.com//image-20221205195128343.png" alt="image-20221205195128343"></p><p><img src="/.com//image-20221205195833439.png" alt="image-20221205195833439"></p><h3 id="2-3-表操作"><a href="#2-3-表操作" class="headerlink" title="2.3 表操作"></a>2.3 表操作</h3><p>学习完了DDL语句当中关于数据库的操作之后，接下来我们继续学习DDL语句当中关于表结构的操作。</p><p>关于表结构的操作也是包含四个部分：创建表、查询表、修改表、删除表。</p><h4 id="2-3-1-创建"><a href="#2-3-1-创建" class="headerlink" title="2.3.1 创建"></a>2.3.1 创建</h4><h5 id="2-3-1-1-语法"><a href="#2-3-1-1-语法" class="headerlink" title="2.3.1.1 语法"></a>2.3.1.1 语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table  表名(</span><br><span class="line">字段1  字段1类型 [约束]  [comment  字段1注释 ],</span><br><span class="line">字段2  字段2类型 [约束]  [comment  字段2注释 ],</span><br><span class="line">......</span><br><span class="line">字段n  字段n类型 [约束]  [comment  字段n注释 ] </span><br><span class="line">) [ comment  表注释 ] ;</span><br></pre></td></tr></table></figure><blockquote><p>注意： [ ] 中的内容为可选参数； 最后一个字段后面没有逗号</p></blockquote><p>案例：创建tb_user表</p><ul><li>对应的结构如下：</li></ul><p><img src="/.com//image-20220829143005524.png" alt="image-20220829143005524">  </p><ul><li>建表语句：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table tb_user (</span><br><span class="line">    id int comment &#x27;ID,唯一标识&#x27;,   # id是一行数据的唯一标识（不能重复）</span><br><span class="line">    username varchar(20) comment &#x27;用户名&#x27;,</span><br><span class="line">    name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class="line">    age int comment &#x27;年龄&#x27;,</span><br><span class="line">    gender char(1) comment &#x27;性别&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>数据表创建完成，接下来我们还需要测试一下是否可以往这张表结构当中来存储数据。</p></blockquote><p>双击打开tb_user表结构，大家会发现里面没有数据：</p><p><img src="/.com//image-20221205211008929.png" alt="image-20221205211008929"></p><p>添加数据：</p><p><img src="/.com//9.gif"> </p><p>此时我们再插入一条数据：</p><p><img src="/.com//image-20221205214447060.png" alt="image-20221205214447060"> </p><p>我们之前提到过：id字段是一行数据的唯一标识，不能有重复值。但是现在数据表中有两个相同的id值，这是为什么呢？</p><ul><li>其实我们现在创建表结构的时候， id这个字段我们只加了一个备注信息说明它是一个唯一标识，但是在数据库层面呢，并没有去限制字段存储的数据。所以id这个字段没有起到唯一标识的作用。</li></ul><blockquote><p>想要限制字段所存储的数据，就需要用到数据库中的约束。</p></blockquote><h5 id="2-3-1-2-约束"><a href="#2-3-1-2-约束" class="headerlink" title="2.3.1.2 约束"></a>2.3.1.2 约束</h5><p>概念：所谓约束就是作用在表中字段上的规则，用于限制存储在表中的数据。</p><p>作用：就是来保证数据库当中数据的正确性、有效性和完整性。（后面的学习会验证这些）</p><p>在MySQL数据库当中，提供了以下5种约束：</p><table><thead><tr><th><strong>约束</strong></th><th><strong>描述</strong></th><th><strong>关键字</strong></th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段值不能为null</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一、不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary key</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段值，则采用默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表的数据建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><blockquote><p>注意：约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。</p></blockquote><p>案例：创建tb_user表</p><ul><li>对应的结构如下：</li></ul><p><img src="/.com//image-20220829143005524.png" alt="image-20220829143005524"> </p><blockquote><p>在上述的表结构中:</p><ul><li><p>id 是一行数据的唯一标识</p></li><li><p>username 用户名字段是非空且唯一的</p></li><li><p>name 姓名字段是不允许存储空值的</p></li><li><p>gender 性别字段是有默认值，默认为男</p></li></ul></blockquote><ul><li>建表语句：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table tb_user (</span><br><span class="line">    id int primary key comment &#x27;ID,唯一标识&#x27;, </span><br><span class="line">    username varchar(20) not null unique comment &#x27;用户名&#x27;,</span><br><span class="line">    name varchar(10) not null comment &#x27;姓名&#x27;,</span><br><span class="line">    age int comment &#x27;年龄&#x27;,</span><br><span class="line">    gender char(1) default &#x27;男&#x27; comment &#x27;性别&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>数据表创建完成，接下来测试一下表中字段上的约束是否生效</p></blockquote><p><img src="/.com//image-20221205215309011.png" alt="image-20221205215309011"></p><p><img src="/.com//image-20221205215632599.png" alt="image-20221205215632599"></p><p>大家有没有发现一个问题：id字段下存储的值，如果由我们自己来维护会比较麻烦(必须保证值的唯一性)。MySQL数据库为了解决这个问题，给我们提供了一个关键字：auto_increment（自动增长）</p><blockquote><p>主键自增：auto_increment</p><ul><li>每次插入新的行记录时，数据库自动生成id字段(主键)下的值</li><li>具有auto_increment的数据列是一个正数序列开始增长(从1开始自增)</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table tb_user (</span><br><span class="line">    id int primary key auto_increment comment &#x27;ID,唯一标识&#x27;, #主键自动增长</span><br><span class="line">    username varchar(20) not null unique comment &#x27;用户名&#x27;,</span><br><span class="line">    name varchar(10) not null comment &#x27;姓名&#x27;,</span><br><span class="line">    age int comment &#x27;年龄&#x27;,</span><br><span class="line">    gender char(1) default &#x27;男&#x27; comment &#x27;性别&#x27;</span><br><span class="line">) comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure><p>测试：主键自增</p><p><img src="/.com//10.gif"></p><h5 id="2-3-1-3-数据类型"><a href="#2-3-1-3-数据类型" class="headerlink" title="2.3.1.3 数据类型"></a>2.3.1.3 数据类型</h5><p>在上面建表语句中，我们在指定字段的数据类型时，用到了int 、varchar、char，那么在MySQL中除了以上的数据类型，还有哪些常见的数据类型呢？ 接下来,我们就来详细介绍一下MySQL的数据类型。</p><p>MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><p><strong>数值类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>有符号(SIGNED)范围</th><th>无符号(UNSIGNED)范围</th><th>描述</th></tr></thead><tbody><tr><td>TINYINT</td><td>1byte</td><td>(-128，127)</td><td>(0，255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2bytes</td><td>(-32768，32767)</td><td>(0，65535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3bytes</td><td>(-8388608，8388607)</td><td>(0，16777215)</td><td>大整数值</td></tr><tr><td>INT&#x2F;INTEGER</td><td>4bytes</td><td>(-2147483648，2147483647)</td><td>(0，4294967295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8bytes</td><td>(-2^63，2^63-1)</td><td>(0，2^64-1)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4bytes</td><td>(-3.402823466 E+38，3.402823466351 E+38)</td><td>0 和 (1.175494351  E-38，3.402823466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8bytes</td><td>(-1.7976931348623157 E+308，1.7976931348623157 E+308)</td><td>0 和  (2.2250738585072014 E-308，1.7976931348623157 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td></td><td>依赖于M(精度)和D(标度)的值</td><td>依赖于M(精度)和D(标度)的值</td><td>小数值(精确定点数)</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例: </span><br><span class="line">    年龄字段 <span class="comment">---不会出现负数, 而且人的年龄不会太大</span></span><br><span class="line">age tinyint unsigned</span><br><span class="line"></span><br><span class="line">分数 <span class="comment">---总分100分, 最多出现一位小数</span></span><br><span class="line">score <span class="keyword">double</span>(<span class="number">4</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>字符串类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串(需要指定长度)</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串(需要指定长度)</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215 bytes</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295 bytes</td><td>极大文本数据</td></tr></tbody></table><p>char 与 varchar 都可以描述字符串，char是定长字符串，指定长度多长，就占用多少个字符，和字段值的长度无关 。而varchar是变长字符串，指定的长度为最大占用长度 。相对来说，char的性能会更高些。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例： </span><br><span class="line">    用户名 username <span class="comment">---长度不定, 最长不会超过50</span></span><br><span class="line">username <span class="type">varchar</span>(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">手机号 phone <span class="comment">---固定长度为11</span></span><br><span class="line">phone <span class="type">char</span>(<span class="number">11</span>)</span><br></pre></td></tr></table></figure><p><strong>日期时间类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至  9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至  838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例: </span><br><span class="line">生日字段  birthday <span class="comment">---生日只需要年月日  </span></span><br><span class="line">birthday <span class="type">date</span></span><br><span class="line"></span><br><span class="line">创建时间 createtime <span class="comment">--- 需要精确到时分秒</span></span><br><span class="line">createtime  datetime</span><br></pre></td></tr></table></figure><h5 id="2-3-1-4-案例"><a href="#2-3-1-4-案例" class="headerlink" title="2.3.1.4 案例"></a>2.3.1.4 案例</h5><p>需求：根据产品原型&#x2F;需求创建表((设计合理的数据类型、长度、约束) </p><blockquote><p>参考资料中提供的《黑马-tlias智能学习辅助系统》页面原型，设计员工管理模块的表结构</p><p>暂不考虑所属部门字段</p></blockquote><p>产品原型及需求如下：</p><p><img src="/.com//image-20220829151032029.png" alt="image-20220829151032029"></p><p> <img src="/.com//image-20220829151228102.png"></p><p><img src="/.com//image-20220829151245450.png"></p><p><strong>步骤：</strong></p><ol><li><p>阅读产品原型及需求文档，看看里面涉及到哪些字段。</p></li><li><p>查看需求文档说明，确认各个字段的类型以及字段存储数据的长度限制。</p></li><li><p>在页面原型中描述的基础字段的基础上，再增加额外的基础字段。</p></li></ol><p>使用SQL创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">  id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;123456&#x27;</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  gender tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;性别, 说明: 1 男, 2 女&#x27;</span>,</span><br><span class="line">  image <span class="type">varchar</span>(<span class="number">300</span>) comment <span class="string">&#x27;图像&#x27;</span>,</span><br><span class="line">  job tinyint unsigned comment <span class="string">&#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;</span>,</span><br><span class="line">  entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">  create_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  update_time datetime <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>除了使用SQL语句创建表外，我们还可以借助于图形化界面来创建表结构，这种创建方式会更加直观、更加方便。</p><p>操作步骤如下：</p><ol><li>在指定操作的数据库上，右键New &#x3D;&#x3D;&gt; Table</li></ol><p><img src="/.com//image-20221205230447721.png" alt="image-20221205230447721"></p><ol start="2"><li>编辑表结构的相关信息</li></ol><p><img src="/.com//image-20221205231846161.png" alt="image-20221205231846161"></p><h5 id="2-3-1-5-设计表流程"><a href="#2-3-1-5-设计表流程" class="headerlink" title="2.3.1.5 设计表流程"></a>2.3.1.5 设计表流程</h5><p>通过上面的案例，我们明白了，设计一张表，基本的流程如下：</p><ol><li><p>阅读页面原型及需求文档</p></li><li><p>基于页面原则和需求文档，确定原型字段(类型、长度限制、约束)</p></li><li><p>再增加表设计所需要的业务基础字段(id主键、插入时间、修改时间)</p></li></ol><p><img src="/.com//image-20221205232253088.png" alt="image-20221205232253088"></p><blockquote><p>说明：</p><ul><li><p>create_time：记录的是当前这条数据插入的时间。 </p></li><li><p>update_time：记录当前这条数据最后更新的时间。</p></li></ul></blockquote><h4 id="2-3-2-查询"><a href="#2-3-2-查询" class="headerlink" title="2.3.2 查询"></a>2.3.2 查询</h4><blockquote><p>关于表结构的查询操作，工作中一般都是直接基于<strong>图形化界面操作</strong>。 </p></blockquote><p><strong>查询当前数据库所有表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221205233746548.png" alt="image-20221205233746548"></p><p><strong>查看指定表结构</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名 ;#可以查看指定表的字段、字段的类型、是否可以为NULL、是否存在默认值等信息</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221205234114053.png" alt="image-20221205234114053"></p><p><strong>查询指定表的建表语句</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名 ;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221205234334696.png" alt="image-20221205234334696"></p><p><img src="/.com//image-20221205234444906.png" alt="image-20221205234444906"></p><h4 id="2-3-3-修改"><a href="#2-3-3-修改" class="headerlink" title="2.3.3 修改"></a>2.3.3 修改</h4><blockquote><p>关于表结构的修改操作，工作中一般都是直接基于<strong>图形化界面操作</strong>。 </p></blockquote><p><strong>添加字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span>  字段名  类型(长度)  [comment 注释]  [约束];</span><br></pre></td></tr></table></figure><p>案例： 为tb_emp表添加字段qq，字段类型为 varchar(11)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp <span class="keyword">add</span>  qq  <span class="type">varchar</span>(<span class="number">11</span>) comment <span class="string">&#x27;QQ号码&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>图形化操作：添加字段</p></blockquote><p><img src="/.com//image-20221205235542272.png" alt="image-20221205235542272"></p><p><img src="/.com//image-20221205235657807.png" alt="image-20221205235657807"></p><p><strong>修改数据类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 modify  字段名  新数据类型(长度);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change  旧字段名  新字段名  类型(长度)  [comment 注释]  [约束];</span><br></pre></td></tr></table></figure><p>案例：修改qq字段的字段类型，将其长度由11修改为13</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp modify qq <span class="type">varchar</span>(<span class="number">13</span>) comment <span class="string">&#x27;QQ号码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>案例：修改qq字段名为 qq_num，字段类型varchar(13)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp change qq qq_num <span class="type">varchar</span>(<span class="number">13</span>) comment <span class="string">&#x27;QQ号码&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>图形化操作：修改数据类型和字段名</p></blockquote><p><img src="/.com//image-20221205235950010.png" alt="image-20221205235950010"></p><p><img src="/.com//image-20221206000030734.png" alt="image-20221206000030734"></p><p><strong>删除字段</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure><p>案例：删除tb_emp表中的qq_num字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_emp <span class="keyword">drop</span> qq_num;</span><br></pre></td></tr></table></figure><blockquote><p>图形化操作：删除字段</p></blockquote><p><img src="/.com//image-20221206000159237.png" alt="image-20221206000159237"></p><p><strong>修改表名</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="keyword">table</span> 表名 <span class="keyword">to</span>  新表名;</span><br></pre></td></tr></table></figure><p>案例：将当前的tb_emp表的表名修改为emp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename table tb_emp to emp;</span><br></pre></td></tr></table></figure><blockquote><p>图形化操作：修改表名</p></blockquote><p><img src="/.com//image-20221206000636659.png" alt="image-20221206000636659"></p><h4 id="2-3-4-删除"><a href="#2-3-4-删除" class="headerlink" title="2.3.4 删除"></a>2.3.4 删除</h4><blockquote><p>关于表结构的删除操作，工作中一般都是直接基于<strong>图形化界面操作</strong>。 </p></blockquote><p>删除表语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span>  <span class="keyword">table</span> [ if <span class="keyword">exists</span> ]  表名;</span><br></pre></td></tr></table></figure><blockquote><p>if exists ：只有表名存在时才会删除该表，表名不存在，则不执行删除操作(如果不加该参数项，删除一张不存在的表，执行将会报错)。</p></blockquote><p>案例：如果tb_emp表存在，则删除tb_emp表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists tb_emp;  -- 在删除表时，表中的全部数据也会被删除。</span><br></pre></td></tr></table></figure><blockquote><p>图形化操作：删除表</p></blockquote><p><img src="/.com//image-20221206001026916.png" alt="image-20221206001026916"> </p><h2 id="3-数据库操作-DML"><a href="#3-数据库操作-DML" class="headerlink" title="3. 数据库操作-DML"></a>3. 数据库操作-DML</h2><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进行增、删、改操作。</p><ul><li>添加数据（INSERT）</li><li>修改数据（UPDATE）</li><li>删除数据（DELETE）</li></ul><h3 id="3-1-增加-insert"><a href="#3-1-增加-insert" class="headerlink" title="3.1 增加(insert)"></a>3.1 增加(insert)</h3><p>insert语法：</p><ul><li><p>向指定字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 (字段名1, 字段名2) values (值1, 值2);</span><br></pre></td></tr></table></figure></li><li><p>全部字段添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 values (值1, 值2, ...);</span><br></pre></td></tr></table></figure></li><li><p>批量添加数据（指定字段）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 (字段名1, 字段名2) values (值1, 值2), (值1, 值2);</span><br></pre></td></tr></table></figure></li><li><p>批量添加数据（全部字段）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 values (值1, 值2, ...), (值1, 值2, ...);</span><br></pre></td></tr></table></figure></li></ul><p>案例1：向tb_emp表的username、name、gender字段插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 因为设计表时create_time, update_time两个字段不能为NULL，所以也做为要插入的字段</span><br><span class="line">insert into tb_emp(username, name, gender, create_time, update_time)</span><br><span class="line">values (&#x27;wuji&#x27;, &#x27;张无忌&#x27;, 1, now(), now());</span><br></pre></td></tr></table></figure><p>案例2：向tb_emp表的所有字段插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into tb_emp(id, username, password, name, gender, image, job, entrydate, create_time, update_time)</span><br><span class="line">values (null, &#x27;zhirou&#x27;, &#x27;123&#x27;, &#x27;周芷若&#x27;, 2, &#x27;1.jpg&#x27;, 1, &#x27;2010-01-01&#x27;, now(), now());</span><br></pre></td></tr></table></figure><p>案例3：批量向tb_emp表的username、name、gender字段插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">insert into tb_emp(username, name, gender, create_time, update_time)</span><br><span class="line">values (&#x27;weifuwang&#x27;, &#x27;韦一笑&#x27;, 1, now(), now()),</span><br><span class="line">       (&#x27;fengzi&#x27;, &#x27;张三疯&#x27;, 1, now(), now());</span><br></pre></td></tr></table></figure><blockquote><p>图形化操作：双击tb_emp表查看数据</p></blockquote><p><img src="/.com//image-20221206002807531.png" alt="image-20221206002807531"></p><p>Insert操作的注意事项：</p><ol><li><p>插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</p></li><li><p>字符串和日期型数据应该包含在引号中。</p></li><li><p>插入的数据大小，应该在字段的规定范围内。</p></li></ol><h3 id="3-2-修改-update"><a href="#3-2-修改-update" class="headerlink" title="3.2 修改(update)"></a>3.2 修改(update)</h3><p>update语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span> , 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span> , .... [<span class="keyword">where</span> 条件] ;</span><br></pre></td></tr></table></figure><p>案例1：将tb_emp表中id为1的员工，姓名name字段更新为’张三’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_emp <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>,update_time<span class="operator">=</span>now() <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>案例2：将tb_emp表的所有员工入职日期更新为’2010-01-01’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_emp <span class="keyword">set</span> entrydate<span class="operator">=</span><span class="string">&#x27;2010-01-01&#x27;</span>,update_time<span class="operator">=</span>now();</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206004425527.png" alt="image-20221206004425527"></p><blockquote><p>注意事项:</p><ol><li><p>修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</p></li><li><p>在修改数据时，一般需要同时修改公共字段update_time，将其修改为当前操作时间。</p></li></ol></blockquote><h3 id="3-3-删除-delete"><a href="#3-3-删除-delete" class="headerlink" title="3.3 删除(delete)"></a>3.3 删除(delete)</h3><p>delete语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名  [<span class="keyword">where</span>  条件] ;</span><br></pre></td></tr></table></figure><p>案例1：删除tb_emp表中id为1的员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>案例2：删除tb_emp表中所有员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_emp;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p><p>​• DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</p><p>​• DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即可)。</p><p>​• 当进行删除全部数据操作时，会提示询问是否确认删除所有数据，直接点击Execute即可。 </p></blockquote><h2 id="4-数据库操作-DQL"><a href="#4-数据库操作-DQL" class="headerlink" title="4. 数据库操作-DQL"></a>4. 数据库操作-DQL</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>DQL英文全称是Data Query Language(数据查询语言)，用来查询数据库表中的记录。</p><p>查询关键字：SELECT</p><p>查询操作是所有SQL语句当中最为常见，也是最为重要的操作。在一个正常的业务系统中，查询操作的使用频次是要远高于增删改操作的。当我们打开某个网站或APP所看到的展示信息，都是通过从数据库中查询得到的，而在这个查询过程中，还会涉及到条件、排序、分页等操作。</p><p><img src="/.com//image-20220611103943417.png" alt="image-20220611103943417"> </p><h3 id="4-2-语法"><a href="#4-2-语法" class="headerlink" title="4.2 语法"></a>4.2 语法</h3><p>DQL查询语句，语法结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名列表</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP  BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><p>我们今天会将上面的完整语法拆分为以下几个部分学习：</p><ul><li>基本查询（不带任何条件）</li><li>条件查询（where）</li><li>分组查询（group by）</li><li>排序查询（order by）</li><li>分页查询（limit）</li></ul><p>准备一些测试数据用于查询操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">create database db02; -- 创建数据库</span><br><span class="line">use db02; -- 切换数据库</span><br><span class="line">-- 员工管理(带约束)</span><br><span class="line">create table tb_emp (</span><br><span class="line">    id int unsigned primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    username varchar(20) not null unique comment &#x27;用户名&#x27;,</span><br><span class="line">    password varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,</span><br><span class="line">    name varchar(10) not null comment &#x27;姓名&#x27;,</span><br><span class="line">    gender tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,</span><br><span class="line">    image varchar(300) comment &#x27;图像&#x27;,</span><br><span class="line">    job tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;,</span><br><span class="line">    entrydate date comment &#x27;入职时间&#x27;,</span><br><span class="line">    create_time datetime not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;员工表&#x27;;</span><br><span class="line"></span><br><span class="line">-- 准备测试数据</span><br><span class="line">INSERT INTO tb_emp (id, username, password, name, gender, image, job, entrydate, create_time, update_time) VALUES</span><br><span class="line">    (1, &#x27;jinyong&#x27;, &#x27;123456&#x27;, &#x27;金庸&#x27;, 1, &#x27;1.jpg&#x27;, 4, &#x27;2000-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:35&#x27;),</span><br><span class="line">    (2, &#x27;zhangwuji&#x27;, &#x27;123456&#x27;, &#x27;张无忌&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:37&#x27;),</span><br><span class="line">    (3, &#x27;yangxiao&#x27;, &#x27;123456&#x27;, &#x27;杨逍&#x27;, 1, &#x27;3.jpg&#x27;, 2, &#x27;2008-05-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:39&#x27;),</span><br><span class="line">    (4, &#x27;weiyixiao&#x27;, &#x27;123456&#x27;, &#x27;韦一笑&#x27;, 1, &#x27;4.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:41&#x27;),</span><br><span class="line">    (5, &#x27;changyuchun&#x27;, &#x27;123456&#x27;, &#x27;常遇春&#x27;, 1, &#x27;5.jpg&#x27;, 2, &#x27;2012-12-05&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:43&#x27;),</span><br><span class="line">    (6, &#x27;xiaozhao&#x27;, &#x27;123456&#x27;, &#x27;小昭&#x27;, 2, &#x27;6.jpg&#x27;, 3, &#x27;2013-09-05&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:45&#x27;),</span><br><span class="line">    (7, &#x27;jixiaofu&#x27;, &#x27;123456&#x27;, &#x27;纪晓芙&#x27;, 2, &#x27;7.jpg&#x27;, 1, &#x27;2005-08-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:47&#x27;),</span><br><span class="line">    (8, &#x27;zhouzhiruo&#x27;, &#x27;123456&#x27;, &#x27;周芷若&#x27;, 2, &#x27;8.jpg&#x27;, 1, &#x27;2014-11-09&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:49&#x27;),</span><br><span class="line">    (9, &#x27;dingminjun&#x27;, &#x27;123456&#x27;, &#x27;丁敏君&#x27;, 2, &#x27;9.jpg&#x27;, 1, &#x27;2011-03-11&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:51&#x27;),</span><br><span class="line">    (10, &#x27;zhaomin&#x27;, &#x27;123456&#x27;, &#x27;赵敏&#x27;, 2, &#x27;10.jpg&#x27;, 1, &#x27;2013-09-05&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:53&#x27;),</span><br><span class="line">    (11, &#x27;luzhangke&#x27;, &#x27;123456&#x27;, &#x27;鹿杖客&#x27;, 1, &#x27;11.jpg&#x27;, 2, &#x27;2007-02-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:55&#x27;),</span><br><span class="line">    (12, &#x27;hebiweng&#x27;, &#x27;123456&#x27;, &#x27;鹤笔翁&#x27;, 1, &#x27;12.jpg&#x27;, 2, &#x27;2008-08-18&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:57&#x27;),</span><br><span class="line">    (13, &#x27;fangdongbai&#x27;, &#x27;123456&#x27;, &#x27;方东白&#x27;, 1, &#x27;13.jpg&#x27;, 1, &#x27;2012-11-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:59&#x27;),</span><br><span class="line">    (14, &#x27;zhangsanfeng&#x27;, &#x27;123456&#x27;, &#x27;张三丰&#x27;, 1, &#x27;14.jpg&#x27;, 2, &#x27;2002-08-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:01&#x27;),</span><br><span class="line">    (15, &#x27;yulianzhou&#x27;, &#x27;123456&#x27;, &#x27;俞莲舟&#x27;, 1, &#x27;15.jpg&#x27;, 2, &#x27;2011-05-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:03&#x27;),</span><br><span class="line">    (16, &#x27;songyuanqiao&#x27;, &#x27;123456&#x27;, &#x27;宋远桥&#x27;, 1, &#x27;16.jpg&#x27;, 2, &#x27;2010-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:05&#x27;),</span><br><span class="line">    (17, &#x27;chenyouliang&#x27;, &#x27;12345678&#x27;, &#x27;陈友谅&#x27;, 1, &#x27;17.jpg&#x27;, null, &#x27;2015-03-21&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:07&#x27;),</span><br><span class="line">    (18, &#x27;zhang1&#x27;, &#x27;123456&#x27;, &#x27;张一&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:09&#x27;),</span><br><span class="line">    (19, &#x27;zhang2&#x27;, &#x27;123456&#x27;, &#x27;张二&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2012-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:11&#x27;),</span><br><span class="line">    (20, &#x27;zhang3&#x27;, &#x27;123456&#x27;, &#x27;张三&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2018-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:13&#x27;),</span><br><span class="line">    (21, &#x27;zhang4&#x27;, &#x27;123456&#x27;, &#x27;张四&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:15&#x27;),</span><br><span class="line">    (22, &#x27;zhang5&#x27;, &#x27;123456&#x27;, &#x27;张五&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2016-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:17&#x27;),</span><br><span class="line">    (23, &#x27;zhang6&#x27;, &#x27;123456&#x27;, &#x27;张六&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2012-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:19&#x27;),</span><br><span class="line">    (24, &#x27;zhang7&#x27;, &#x27;123456&#x27;, &#x27;张七&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2006-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:21&#x27;),</span><br><span class="line">    (25, &#x27;zhang8&#x27;, &#x27;123456&#x27;, &#x27;张八&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2002-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:23&#x27;),</span><br><span class="line">    (26, &#x27;zhang9&#x27;, &#x27;123456&#x27;, &#x27;张九&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2011-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:25&#x27;),</span><br><span class="line">    (27, &#x27;zhang10&#x27;, &#x27;123456&#x27;, &#x27;张十&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2004-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:27&#x27;),</span><br><span class="line">    (28, &#x27;zhang11&#x27;, &#x27;123456&#x27;, &#x27;张十一&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:29&#x27;),</span><br><span class="line">    (29, &#x27;zhang12&#x27;, &#x27;123456&#x27;, &#x27;张十二&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2020-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:31&#x27;);</span><br></pre></td></tr></table></figure><h3 id="4-3-基本查询"><a href="#4-3-基本查询" class="headerlink" title="4.3 基本查询"></a>4.3 基本查询</h3><p>在基本查询的DQL语句中，不带任何的查询条件，语法如下：</p><ul><li><p>查询多个字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段1, 字段2, 字段3 from  表名;</span><br></pre></td></tr></table></figure></li><li><p>查询所有字段（通配符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *  from  表名;</span><br></pre></td></tr></table></figure></li><li><p>设置别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段1 [ as 别名1 ] , 字段2 [ as 别名2 ]  from  表名;</span><br></pre></td></tr></table></figure></li><li><p>去除重复记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct 字段列表 from  表名;</span><br></pre></td></tr></table></figure></li></ul><p>案例1：查询指定字段 name，entrydate并返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,entrydate from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206112810199.png" alt="image-20221206112810199"></p><p>案例2：查询返回所有字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_emp;</span><br></pre></td></tr></table></figure><blockquote><p><code>*</code>号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）</p></blockquote><p><img src="/.com//image-20221206113904763.png" alt="image-20221206113904763"></p><p>案例3：查询所有员工的 name,entrydate，并起别名(姓名、入职日期)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 方式1：</span><br><span class="line">select name AS 姓名, entrydate AS 入职日期 from tb_emp;</span><br><span class="line">-- 方式2： 别名中有特殊字符时，使用&#x27;&#x27;或&quot;&quot;包含</span><br><span class="line">select name AS &#x27;姓 名&#x27;, entrydate AS &#x27;入职日期&#x27; from tb_emp;</span><br><span class="line">-- 方式3：</span><br><span class="line">select name AS &quot;姓名&quot;, entrydate AS &quot;入职日期&quot; from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206114752149.png" alt="image-20221206114752149"></p><p>案例4：查询已有的员工关联了哪几种职位(不要重复)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct job from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206115440117.png" alt="image-20221206115440117"></p><h3 id="4-4-条件查询"><a href="#4-4-条件查询" class="headerlink" title="4.4 条件查询"></a>4.4 条件查询</h3><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  字段列表  <span class="keyword">from</span>   表名   <span class="keyword">where</span>   条件列表 ; <span class="comment">-- 条件列表：意味着可以有多个条件</span></span><br></pre></td></tr></table></figure><p>学习条件查询就是学习条件的构建方式，而在SQL语句当中构造条件的运算符分为两类：</p><ul><li>比较运算符</li><li>逻辑运算符</li></ul><p>常用的比较运算符如下: </p><table><thead><tr><th><strong>比较运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between …  and …</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>is null</td><td>是null</td></tr></tbody></table><p>常用的逻辑运算符如下:</p><table><thead><tr><th><strong>逻辑运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr><td>or 或 ||</td><td>或者 (多个条件任意一个成立)</td></tr><tr><td>not 或 !</td><td>非 , 不是</td></tr></tbody></table><p>案例1：查询 姓名 为 杨逍 的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where name = &#x27;杨逍&#x27;; -- 字符串使用&#x27;&#x27;或&quot;&quot;包含</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206121255784.png" alt="image-20221206121255784"></p><p>案例2：查询 id小于等于5 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where id &lt;=5;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206121523712.png" alt="image-20221206121523712"></p><p>案例3：查询 没有分配职位 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where job is null ;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206121754267.png" alt="image-20221206121754267"></p><blockquote><p>注意：查询为NULL的数据时，不能使用 <code>= null</code></p><p><img src="/.com//image-20221206122036970.png" alt="image-20221206122036970"></p></blockquote><p>案例4：查询 有职位 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where job is not null ;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206122454101.png" alt="image-20221206122454101"></p><p>案例5：查询 密码不等于 ‘123456’ 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 方式1：</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where password &lt;&gt; &#x27;123456&#x27;;</span><br><span class="line">-- 方式2：</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where password != &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206122712152.png" alt="image-20221206122712152"></p><p>案例6：查询 入职日期 在 ‘2000-01-01’ (包含) 到 ‘2010-01-01’(包含) 之间的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 方式1：</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where entrydate&gt;=&#x27;2000-01-01&#x27; and entrydate&lt;=&#x27;2010-01-01&#x27;;</span><br><span class="line">-- 方式2： between...and</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where entrydate between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206125100857.png" alt="image-20221206125100857"></p><p>案例7：查询 入职时间 在 ‘2000-01-01’ (包含) 到 ‘2010-01-01’(包含) 之间 且 性别为女 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where entrydate between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27;</span><br><span class="line">      and gender = 2;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206125356737.png" alt="image-20221206125356737"></p><p>案例8：查询 职位是 2 (讲师), 3 (学工主管), 4 (教研主管) 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 方式1：使用or连接多个条件</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where job=2 or job=3 or job=4;</span><br><span class="line">-- 方式2：in关键字</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where job in (2,3,4);</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206141451342.png" alt="image-20221206141451342"></p><p>案例9：查询 姓名 为两个字的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where name like &#x27;__&#x27;;  # 通配符 &quot;_&quot; 代表任意1个字符</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206141937293.png" alt="image-20221206141937293"></p><p>案例10：查询 姓 ‘张’ 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where name like &#x27;张%&#x27;; # 通配符 &quot;%&quot; 代表任意个字符（0个 ~ 多个）</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206142156154.png" alt="image-20221206142156154"></p><h3 id="4-5-聚合函数"><a href="#4-5-聚合函数" class="headerlink" title="4.5 聚合函数"></a>4.5 聚合函数</h3><p>之前我们做的查询都是横向查询，就是根据条件一行一行的进行判断，而使用聚合函数查询就是纵向查询，它是对一列的值进行计算，然后返回一个结果值。（将一列数据作为一个整体，进行纵向计算）</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  聚合函数(字段列表)  from  表名 ;</span><br></pre></td></tr></table></figure><blockquote><p>注意 : 聚合函数会忽略空值，对NULL值不作为统计。</p></blockquote><p>常用聚合函数：</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><blockquote><p>count ：按照列去统计有多少行数据。</p><ul><li>在根据指定的列统计的时候，如果这一列中有null的行，该行不会被统计在其中。</li></ul><p>sum ：计算指定列的数值和，如果不是数值类型，那么计算结果为0</p><p>max ：计算指定列的最大值</p><p>min ：计算指定列的最小值</p><p>avg ：计算指定列的平均值</p></blockquote><p>案例1：统计该企业员工数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># count(字段)</span><br><span class="line">select count(id) from tb_emp;-- 结果：29</span><br><span class="line">select count(job) from tb_emp;-- 结果：28 （聚合函数对NULL值不做计算）</span><br><span class="line"></span><br><span class="line"># count(常量)</span><br><span class="line">select count(0) from tb_emp;</span><br><span class="line">select count(&#x27;A&#x27;) from tb_emp;</span><br><span class="line"></span><br><span class="line"># count(*)  推荐此写法（MySQL底层进行了优化）</span><br><span class="line">select count(*) from tb_emp;</span><br></pre></td></tr></table></figure><p>案例2：统计该企业最早入职的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(entrydate) from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206160145339.png" alt="image-20221206160145339"></p><p>案例3：统计该企业最迟入职的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(entrydate) from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206160307416.png" alt="image-20221206160307416"></p><p>案例4：统计该企业员工 ID 的平均值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(id) from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206160416605.png" alt="image-20221206160416605"></p><p>案例5：统计该企业员工的 ID 之和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(id) from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206160604073.png" alt="image-20221206160604073"></p><h3 id="4-6-分组查询"><a href="#4-6-分组查询" class="headerlink" title="4.6 分组查询"></a>4.6 分组查询</h3><p>分组： 按照某一列或者某几列，把相同的数据进行合并输出。</p><blockquote><p>分组其实就是按列进行分类(指定列下相同的数据归为一类)，然后可以对分类完的数据进行合并计算。</p><p>分组查询通常会使用聚合函数进行计算。</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表  from  表名  [where 条件]  group by 分组字段名  [having 分组后过滤条件];</span><br></pre></td></tr></table></figure><p>案例1：根据性别分组 , 统计男性和女性员工的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select gender, count(*)</span><br><span class="line">from tb_emp</span><br><span class="line">group by gender; -- 按照gender字段进行分组（gender字段下相同的数据归为一组）</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206172615000.png" alt="image-20221206172615000"></p><p>案例2：查询入职时间在 ‘2015-01-01’ (包含) 以前的员工 , 并对结果根据职位分组 , 获取员工数量大于等于2的职位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select job, count(*)</span><br><span class="line">from tb_emp</span><br><span class="line">where entrydate &lt;= &#x27;2015-01-01&#x27;   -- 分组前条件</span><br><span class="line">group by job                      -- 按照job字段分组</span><br><span class="line">having count(*) &gt;= 2;             -- 分组后条件</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206172431873.png"></p><blockquote><p>注意事项:</p><p>​• 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</p><p>​• 执行顺序：where &gt; 聚合函数 &gt; having </p></blockquote><p><strong>where与having区别（面试题）</strong></p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><h3 id="4-7-排序查询"><a href="#4-7-排序查询" class="headerlink" title="4.7 排序查询"></a>4.7 排序查询</h3><p>排序在日常开发中是非常常见的一个操作，有升序排序，也有降序排序。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表  </span><br><span class="line">from   表名   </span><br><span class="line">[where  条件列表] </span><br><span class="line">[group by  分组字段 ] </span><br><span class="line">order  by  字段1  排序方式1 , 字段2  排序方式2 … ;</span><br></pre></td></tr></table></figure><ul><li><p>排序方式：</p><ul><li><p>ASC ：升序（默认值）</p></li><li><p>DESC：降序</p></li></ul></li></ul><p>案例1：根据入职时间, 对员工进行升序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">order by entrydate ASC; -- 按照entrydate字段下的数据进行升序排序</span><br><span class="line"></span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">order by  entrydate; -- 默认就是ASC（升序）</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206175720337.png" alt="image-20221206175720337"></p><blockquote><p>注意事项：如果是升序, 可以不指定排序方式ASC </p></blockquote><p>案例2：根据入职时间，对员工进行降序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">order by entrydate DESC; -- 按照entrydate字段下的数据进行降序排序</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206180358367.png" alt="image-20221206180358367"></p><p>案例3：根据入职时间对公司的员工进行升序排序，入职时间相同，再按照更新时间进行降序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">order by entrydate ASC , update_time DESC;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206180824583.png" alt="image-20221206180824583"></p><blockquote><p>注意事项：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 </p></blockquote><h3 id="4-8-分页查询"><a href="#4-8-分页查询" class="headerlink" title="4.8 分页查询"></a>4.8 分页查询</h3><p>分页操作在业务系统开发时，也是非常常见的一个功能，日常我们在网站中看到的各种各样的分页条，后台也都需要借助于数据库的分页操作。</p><p><img src="/.com//image-20221206183310586.png" alt="image-20221206183310586"></p><p>分页查询语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  字段列表  <span class="keyword">from</span>   表名  limit  起始索引, 查询记录数 ;</span><br></pre></td></tr></table></figure><p>案例1：从起始索引0开始查询员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">limit 0 , 5; -- 从索引0开始，向后取5条记录</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206185257834.png" alt="image-20221206185257834"></p><p>案例2：查询 第1页 员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">limit 5; -- 如果查询的是第1页数据，起始索引可以省略，直接简写为：limit 条数</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206184957410.png" alt="image-20221206184957410"></p><p>案例3：查询 第2页 员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">limit 5 , 5; -- 从索引5开始，向后取5条记录</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206184602569.png" alt="image-20221206184602569"></p><p>案例4：查询 第3页 员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">limit 10 , 5; -- 从索引10开始，向后取5条记录</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206184414356.png" alt="image-20221206184414356"></p><blockquote><p>注意事项:</p><ol><li><p>起始索引从0开始。        计算公式 ：   起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数</p></li><li><p>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</p></li><li><p>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit  条数</p></li></ol></blockquote><h3 id="4-9-案例"><a href="#4-9-案例" class="headerlink" title="4.9 案例"></a>4.9 案例</h3><p>DQL的基本语法我们学习结束了，接下来我们就运用所掌握的DQL语句的语法来完成两个案例。</p><h4 id="4-9-1-案例一"><a href="#4-9-1-案例一" class="headerlink" title="4.9.1 案例一"></a>4.9.1 案例一</h4><p>案例：根据需求完成员工管理的条件分页查询</p><p><img src="/.com//image-20221206212240773.png" alt="image-20221206212240773"></p><blockquote><p>分析：根据输入的条件，查询第1页数据</p><ol><li><p>在员工管理的列表上方有一些查询条件：员工姓名、员工性别，员工入职时间(开始时间~结束时间)</p><ul><li>姓名：张</li><li>性别：男</li><li>入职时间：2000-01-01  ~  2015-12-31</li></ul></li><li><p>除了查询条件外，在列表的下面还有一个分页条，这就涉及到了分页查询</p><ul><li>查询第1页数据（每页显示10条数据）</li></ul></li><li><p>基于查询的结果，按照修改时间进行降序排序</p></li></ol><p>结论：条件查询 + 分页查询 + 排序查询</p></blockquote><p>SQL语句代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 根据输入条件查询第1页数据（每页展示10条记录）</span><br><span class="line">-- 输入条件：</span><br><span class="line">   -- 姓名：张 （模糊查询）</span><br><span class="line">   -- 性别：男</span><br><span class="line">   -- 入职时间：2000-01-01 ~ 2015-12-31</span><br><span class="line">-- 分页： 0 , 10</span><br><span class="line">-- 排序： 修改时间  DESC</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where name like &#x27;张%&#x27; and gender = 1 and entrydate between &#x27;2000-01-01&#x27; and &#x27;2015-12-31&#x27;</span><br><span class="line">order by update_time desc</span><br><span class="line">limit 0 , 10;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206213235786.png" alt="image-20221206213235786"></p><h4 id="4-9-2-案例二"><a href="#4-9-2-案例二" class="headerlink" title="4.9.2 案例二"></a>4.9.2 案例二</h4><p>案例：根据需求完成员工信息的统计</p><p><img src="/.com//image-20221206210536118.png" alt="image-20221206210536118"></p><blockquote><p>分析：以上信息统计在开发中也叫图形报表(将统计好的数据以可视化的形式展示出来)</p><ul><li>员工性别统计：以饼状图的形式展示出企业男性员人数和女性员工人数<ul><li>只要查询出男性员工和女性员工各自有多少人就可以了</li></ul></li><li>员工职位统计：以柱状图的形式展示各职位的在岗人数<ul><li>只要查询出各个职位有多少人就可以了</li></ul></li></ul></blockquote><p>员工性别统计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- if(条件表达式, true取值 , false取值)</span><br><span class="line">select if(gender=1,&#x27;男性员工&#x27;,&#x27;女性员工&#x27;) AS 性别, count(*) AS 人数</span><br><span class="line">from tb_emp</span><br><span class="line">group by gender;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206220908397.png" alt="image-20221206220908397"></p><blockquote><p>if(表达式, tvalue, fvalue) ：当表达式为true时，取值tvalue；当表达式为false时，取值fvalue</p></blockquote><p>员工职位统计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- case 表达式 when 值1 then 结果1  when 值2  then  结果2 ...  else  result  end</span><br><span class="line">select (case job</span><br><span class="line">             when 1 then &#x27;班主任&#x27;</span><br><span class="line">             when 2 then &#x27;讲师&#x27;</span><br><span class="line">             when 3 then &#x27;学工主管&#x27;</span><br><span class="line">             when 4 then &#x27;教研主管&#x27;</span><br><span class="line">             else &#x27;未分配职位&#x27;</span><br><span class="line">        end) AS 职位 ,</span><br><span class="line">       count(*) AS 人数</span><br><span class="line">from tb_emp</span><br><span class="line">group by job;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221206221718731.png" alt="image-20221206221718731"></p><blockquote><p>case   表达式    when   值1   then  结果1   [when 值2  then  结果2 …]     [else result]     end</p></blockquote><h2 id="5-多表设计"><a href="#5-多表设计" class="headerlink" title="5. 多表设计"></a>5. 多表设计</h2><p>关于单表的操作(单表的设计、单表的增删改查)我们就已经学习完了。接下来我们就要来学习多表的操作，首先来学习多表的设计。</p><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li><p>一对多(多对一)</p></li><li><p>多对多</p></li><li><p>一对一</p></li></ul><h3 id="5-1-一对多"><a href="#5-1-一对多" class="headerlink" title="5.1 一对多"></a>5.1 一对多</h3><h4 id="5-1-1-表设计"><a href="#5-1-1-表设计" class="headerlink" title="5.1.1 表设计"></a>5.1.1 表设计</h4><p>需求：根据页面原型及需求文档 ，完成部门及员工的表结构设计</p><ul><li><p>员工管理页面原型：（前面已完成tb_emp表结构设计）</p><p><img src="/.com//image-20220831195520739.png" alt="image-20220831195520739"></p></li><li><p>部门管理页面原型：</p></li></ul><p><img src="/.com//image-20221206224149094-1709277282877-12.png"></p><blockquote><p>经过上述分析，现已明确的部门表结构：</p><ul><li>业务字段 ： 部门名称</li><li>基础字段 ： id(主键)、创建时间、修改时间</li></ul></blockquote><p>部门表 - SQL语句： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 建议：创建新的数据库（多表设计存放在新数据库下）</span><br><span class="line">create database db03;</span><br><span class="line">use db03;</span><br><span class="line"></span><br><span class="line">-- 部门表</span><br><span class="line">create table tb_dept</span><br><span class="line">(</span><br><span class="line">    id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name varchar(10) not null unique  comment &#x27;部门名称&#x27;,</span><br><span class="line">    create_time datetime not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;部门表&#x27;;</span><br></pre></td></tr></table></figure><p>部门表创建好之后，我们还需要再修改下员工表。为什么要修改员工表呢？是因为我们之前设计员工表(单表)的时候，并没有考虑员工的归属部门。</p><p><img src="/.com//image-20221206224642902.png" alt="image-20221206224642902"></p><p>员工表：添加归属部门字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 员工表</span><br><span class="line">create table tb_emp</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,</span><br><span class="line">    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,</span><br><span class="line">    name        varchar(10)      not null comment &#x27;姓名&#x27;,</span><br><span class="line">    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,</span><br><span class="line">    image       varchar(300) comment &#x27;图像&#x27;,</span><br><span class="line">    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;,</span><br><span class="line">    entrydate   date comment &#x27;入职时间&#x27;,</span><br><span class="line">    </span><br><span class="line">    dept_id     int unsigned comment &#x27;部门ID&#x27;, -- 员工的归属部门</span><br><span class="line">    </span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;员工表&#x27;;</span><br></pre></td></tr></table></figure><p>测试数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-- 部门表测试数据</span><br><span class="line">insert into tb_dept (id, name, create_time, update_time) values</span><br><span class="line">(1,&#x27;学工部&#x27;,now(),now()),</span><br><span class="line">(2,&#x27;教研部&#x27;,now(),now()),</span><br><span class="line">(3,&#x27;咨询部&#x27;,now(),now()),</span><br><span class="line">(4,&#x27;就业部&#x27;,now(),now()),</span><br><span class="line">(5,&#x27;人事部&#x27;,now(),now());</span><br><span class="line"></span><br><span class="line">-- 员工表测试数据</span><br><span class="line">INSERT INTO tb_emp</span><br><span class="line">(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) VALUES</span><br><span class="line">(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),</span><br><span class="line">(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),</span><br><span class="line">(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),</span><br><span class="line">(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),</span><br><span class="line">(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),</span><br><span class="line">(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),</span><br><span class="line">(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),</span><br><span class="line">(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),</span><br><span class="line">(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),</span><br><span class="line">(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),</span><br><span class="line">(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,1,&#x27;2007-02-01&#x27;,1,now(),now()),</span><br><span class="line">(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,1,&#x27;2008-08-18&#x27;,1,now(),now()),</span><br><span class="line">(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,2,&#x27;2012-11-01&#x27;,2,now(),now()),</span><br><span class="line">(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),</span><br><span class="line">(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),</span><br><span class="line">(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2010-01-01&#x27;,2,now(),now()),</span><br><span class="line">(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());</span><br></pre></td></tr></table></figure><p>员工表 - 部门表之间的关系：</p><p><img src="/.com//image-20221206230156403.png" alt="image-20221206230156403"></p><blockquote><p><strong>一对多关系实现：在数据库表中多的一方，添加字段，来关联属于一这方的主键。</strong></p></blockquote><h4 id="2-1-2-外键约束"><a href="#2-1-2-外键约束" class="headerlink" title="2.1.2 外键约束"></a>2.1.2 外键约束</h4><p><strong>问题</strong></p><ul><li>表结构创建完毕后，我们看到两张表的数据分别为：</li></ul><p><img src="/.com//image-20220831201844375.png" alt="image-20220831201844375"> </p><p>现在员工表中有五个员工都归属于1号部门(学工部)，当删除了1号部门后，数据变为：</p><p><img src="/.com//image-20220831202111247.png" alt="image-20220831202111247"> </p><p>1号部门被删除了，但是依然还有5个员工是属于1号部门的。 此时：就出现数据的不完整、不一致了。 </p><p><strong>问题分析</strong></p><p>目前上述的两张表(员工表、部门表)，在数据库层面，并未建立关联，所以是无法保证数据的一致性和完整性的</p><p><strong>问题解决</strong></p><p>想解决上述的问题呢，我们就可以通过数据库中的 <strong>外键约束</strong> 来解决。</p><blockquote><p>外键约束：让两张表的数据建立连接，保证数据的一致性和完整性。  </p><p>对应的关键字：foreign key</p></blockquote><p>外键约束的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表时指定</span><br><span class="line">create table 表名(</span><br><span class="line">字段名    数据类型,</span><br><span class="line">...</span><br><span class="line">[constraint]   [外键名称]  foreign  key (外键字段名)   references   主表 (主表列名)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 建完表后，添加外键</span><br><span class="line">alter table  表名  add constraint  外键名称  foreign key(外键字段名) references 主表(主表列名);</span><br></pre></td></tr></table></figure><p>那接下来，我们就为员工表的dept_id 建立外键约束，来关联部门表的主键。</p><p>方式1：通过SQL语句操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 修改表： 添加外键约束</span><br><span class="line">alter table tb_emp  </span><br><span class="line">add  constraint  fk_dept_id  foreign key (dept_id)  references  tb_dept(id);</span><br></pre></td></tr></table></figure><p>方式2：图形化界面操作</p><p><img src="/.com//image-20221206232750376.png" alt="image-20221206232750376"> </p><blockquote><p>当我们添加外键约束时，我们得保证当前数据库表中的数据是完整的。 所以，我们需要将之前删除掉的数据再添加回来。</p></blockquote><blockquote><p>当我们添加了外键之后，再删除ID为1的部门，就会发现，此时数据库报错了，不允许删除。</p><p><img src="/.com//image-20220831205523647.png"></p><p>外键约束（foreign key）：保证了数据的完整性和一致性。</p></blockquote><p><strong>物理外键和逻辑外键</strong></p><ul><li><p>物理外键</p><ul><li>概念：使用foreign key定义外键关联另外一张表。</li><li>缺点：<ul><li>影响增、删、改的效率（需要检查外键关系）。</li><li>仅用于单节点数据库，不适用与分布式、集群场景。</li><li>容易引发数据库的死锁问题，消耗性能。</li></ul></li></ul></li><li><p>逻辑外键</p><ul><li>概念：在业务层逻辑中，解决外键关联。</li><li>通过逻辑外键，就可以很方便的解决上述问题。</li></ul></li></ul><blockquote><p>**在现在的企业开发中，很少会使用物理外键，都是使用逻辑外键。 甚至在一些数据库开发规范中，会明确指出禁止使用物理外键 foreign key **</p></blockquote><h3 id="5-2-一对一"><a href="#5-2-一对一" class="headerlink" title="5.2 一对一"></a>5.2 一对一</h3><p>一对一关系表在实际开发中应用起来比较简单，通常是用来做单表的拆分，也就是将一张大表拆分成两张小表，将大表中的一些基础字段放在一张表当中，将其他的字段放在另外一张表当中，以此来提高数据的操作效率。</p><blockquote><p>一对一的应用场景： 用户表(基本信息+身份信息)</p><p><img src="/.com//image-20221207104508080.png" alt="image-20221207104508080"></p><ul><li>基本信息：用户的ID、姓名、性别、手机号、学历</li><li>身份信息：民族、生日、身份证号、身份证签发机关，身份证的有效期(开始时间、结束时间)</li></ul><p>如果在业务系统当中，对用户的基本信息查询频率特别的高，但是对于用户的身份信息查询频率很低，此时出于提高查询效率的考虑，我就可以将这张大表拆分成两张小表，第一张表存放的是用户的基本信息，而第二张表存放的就是用户的身份信息。他们两者之间一对一的关系，一个用户只能对应一个身份证，而一个身份证也只能关联一个用户。</p></blockquote><p>那么在数据库层面怎么去体现上述两者之间是一对一的关系呢？</p><p>其实一对一我们可以看成一种特殊的一对多。一对多我们是怎么设计表关系的？是不是在多的一方添加外键。同样我们也可以通过外键来体现一对一之间的关系，我们只需要在任意一方来添加一个外键就可以了。</p><p><img src="/.com//image-20221207105632634.png" alt="image-20221207105632634"></p><blockquote><p>一对一 ：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p></blockquote><p>SQL脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 用户基本信息表</span><br><span class="line">create table tb_user(</span><br><span class="line">    id int unsigned  primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    name varchar(10) not null comment &#x27;姓名&#x27;,</span><br><span class="line">    gender tinyint unsigned not null comment &#x27;性别, 1 男  2 女&#x27;,</span><br><span class="line">    phone char(11) comment &#x27;手机号&#x27;,</span><br><span class="line">    degree varchar(10) comment &#x27;学历&#x27;</span><br><span class="line">) comment &#x27;用户基本信息表&#x27;;</span><br><span class="line">-- 测试数据</span><br><span class="line">insert into tb_user values (1,&#x27;白眉鹰王&#x27;,1,&#x27;18812340001&#x27;,&#x27;初中&#x27;),</span><br><span class="line">                        (2,&#x27;青翼蝠王&#x27;,1,&#x27;18812340002&#x27;,&#x27;大专&#x27;),</span><br><span class="line">                        (3,&#x27;金毛狮王&#x27;,1,&#x27;18812340003&#x27;,&#x27;初中&#x27;),</span><br><span class="line">                        (4,&#x27;紫衫龙王&#x27;,2,&#x27;18812340004&#x27;,&#x27;硕士&#x27;);</span><br><span class="line"></span><br><span class="line">-- 用户身份信息表</span><br><span class="line">create table tb_user_card(</span><br><span class="line">    id int unsigned  primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    nationality varchar(10) not null comment &#x27;民族&#x27;,</span><br><span class="line">    birthday date not null comment &#x27;生日&#x27;,</span><br><span class="line">    idcard char(18) not null comment &#x27;身份证号&#x27;,</span><br><span class="line">    issued varchar(20) not null comment &#x27;签发机关&#x27;,</span><br><span class="line">    expire_begin date not null comment &#x27;有效期限-开始&#x27;,</span><br><span class="line">    expire_end date comment &#x27;有效期限-结束&#x27;,</span><br><span class="line">    user_id int unsigned not null unique comment &#x27;用户ID&#x27;,</span><br><span class="line">    constraint fk_user_id foreign key (user_id) references tb_user(id)</span><br><span class="line">) comment &#x27;用户身份信息表&#x27;;</span><br><span class="line">-- 测试数据</span><br><span class="line">insert into tb_user_card values (1,&#x27;汉&#x27;,&#x27;1960-11-06&#x27;,&#x27;100000100000100001&#x27;,&#x27;朝阳区公安局&#x27;,&#x27;2000-06-10&#x27;,null,1),</span><br><span class="line">        (2,&#x27;汉&#x27;,&#x27;1971-11-06&#x27;,&#x27;100000100000100002&#x27;,&#x27;静安区公安局&#x27;,&#x27;2005-06-10&#x27;,&#x27;2025-06-10&#x27;,2),</span><br><span class="line">        (3,&#x27;汉&#x27;,&#x27;1963-11-06&#x27;,&#x27;100000100000100003&#x27;,&#x27;昌平区公安局&#x27;,&#x27;2006-06-10&#x27;,null,3),</span><br><span class="line">        (4,&#x27;回&#x27;,&#x27;1980-11-06&#x27;,&#x27;100000100000100004&#x27;,&#x27;海淀区公安局&#x27;,&#x27;2008-06-10&#x27;,&#x27;2028-06-10&#x27;,4);</span><br></pre></td></tr></table></figure><h3 id="5-3-多对多"><a href="#5-3-多对多" class="headerlink" title="5.3 多对多"></a>5.3 多对多</h3><p>多对多的关系在开发中属于也比较常见的。比如：学生和老师的关系，一个学生可以有多个授课老师，一个授课老师也可以有多个学生。在比如：学生和课程的关系，一个学生可以选修多门课程，一个课程也可以供多个学生选修。</p><p>案例：学生与课程的关系</p><ul><li><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</p></li><li><p>实现关系：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p></li></ul><p><img src="/.com//image-20221207113341028.png" alt="image-20221207113341028"></p><p>SQL脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 学生表</span><br><span class="line">create table tb_student(</span><br><span class="line">    id int auto_increment primary key comment &#x27;主键ID&#x27;,</span><br><span class="line">    name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class="line">    no varchar(10) comment &#x27;学号&#x27;</span><br><span class="line">) comment &#x27;学生表&#x27;;</span><br><span class="line">-- 学生表测试数据</span><br><span class="line">insert into tb_student(name, no) values (&#x27;黛绮丝&#x27;, &#x27;2000100101&#x27;),(&#x27;谢逊&#x27;, &#x27;2000100102&#x27;),(&#x27;殷天正&#x27;, &#x27;2000100103&#x27;),(&#x27;韦一笑&#x27;, &#x27;2000100104&#x27;);</span><br><span class="line"></span><br><span class="line">-- 课程表</span><br><span class="line">create table tb_course(</span><br><span class="line">   id int auto_increment primary key comment &#x27;主键ID&#x27;,</span><br><span class="line">   name varchar(10) comment &#x27;课程名称&#x27;</span><br><span class="line">) comment &#x27;课程表&#x27;;</span><br><span class="line">-- 课程表测试数据</span><br><span class="line">insert into tb_course (name) values (&#x27;Java&#x27;), (&#x27;PHP&#x27;), (&#x27;MySQL&#x27;) , (&#x27;Hadoop&#x27;);</span><br><span class="line"></span><br><span class="line">-- 学生课程表（中间表）</span><br><span class="line">create table tb_student_course(</span><br><span class="line">   id int auto_increment comment &#x27;主键&#x27; primary key,</span><br><span class="line">   student_id int not null comment &#x27;学生ID&#x27;,</span><br><span class="line">   course_id  int not null comment &#x27;课程ID&#x27;,</span><br><span class="line">   constraint fk_courseid foreign key (course_id) references tb_course (id),</span><br><span class="line">   constraint fk_studentid foreign key (student_id) references tb_student (id)</span><br><span class="line">)comment &#x27;学生课程中间表&#x27;;</span><br><span class="line">-- 学生课程表测试数据</span><br><span class="line">insert into tb_student_course(student_id, course_id) values (1,1),(1,2),(1,3),(2,2),(2,3),(3,4);</span><br></pre></td></tr></table></figure><h3 id="5-4-案例"><a href="#5-4-案例" class="headerlink" title="5.4 案例"></a>5.4 案例</h3><p>下面通过一个综合案例加深对于多表关系的理解，并掌握多表设计的流程。</p><p><strong>需求</strong></p><ul><li>根据参考资料中提供的《<a href="https://app.mockplus.cn/app/share-e928208474edd220b75e9faff1380e4ashare-VaH7dpoIaqRr/preview/BlJ_BHC42AEaa/tKNB7Tamh14B54?allowShare=1&cps=expand&ha=1">苍穹外卖</a><a href="https://app.mockplus.cn/app/share-e928208474edd220b75e9faff1380e4ashare-VaH7dpoIaqRr/preview/BlJ_BHC42AEaa/tKNB7Tamh14B54?allowShare=1&cps=expand&ha=1">_</a><a href="https://app.mockplus.cn/app/share-e928208474edd220b75e9faff1380e4ashare-VaH7dpoIaqRr/preview/BlJ_BHC42AEaa/tKNB7Tamh14B54?allowShare=1&cps=expand&ha=1">管理后台</a>》页面原型，设计分类管理、菜品管理、套餐管理模块的表结构。</li></ul><p><strong>步骤</strong></p><ol><li><p>阅读页面原型及需求文档，分析各个模块涉及到的表结构，及表结构之间的关系。</p></li><li><p>根据页面原型及需求文档，分析各个表结构中具体的字段及约束。</p></li></ol><p><strong>分析</strong></p><ul><li>页面原型-分类管理</li></ul><p><img src="/.com//image-20221207114241260.png" alt="image-20221207114241260"></p><blockquote><p>分类的信息：分类名称、分类类型[菜品&#x2F;套餐]、分类排序、分类状态[禁用&#x2F;启用]、分类的操作时间(修改时间)。</p></blockquote><ul><li>页面原型-菜品管理</li></ul><p><img src="/.com//image-20221207114300057.png" alt="image-20221207114300057"></p><blockquote><p>菜品的信息：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态、菜品的操作时间(修改时间)。</p></blockquote><blockquote><p>思考：分类与菜品之间是什么关系？</p><ul><li>思考逻辑：一个分类下可以有多个菜品吗？反过来再想一想，一个菜品会对应多个分类吗？</li></ul><p>答案：一对多关系。一个分类下会有多个菜品，而一个菜品只能归属一个分类。</p><p>设计表原则：在多的一方，添加字段，关联属于一这方的主键。</p></blockquote><ul><li>页面原型-套餐管理</li></ul><p><img src="/.com//image-20221207114327139.png" alt="image-20221207114327139"> </p><blockquote><p>套餐的信息：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态、套餐的操作时间。</p></blockquote><blockquote><p>思考：套餐与菜品之间是什么关系？</p><ul><li>思考逻辑：一个套餐下可以有多个菜品吗？反过来再想一想，一个菜品可以出现在多个套餐中吗？</li></ul><p>答案：多对多关系。一个套餐下会有多个菜品，而一个菜品也可以出现在多个套餐中。</p><p>设计表原则：创建第三张中间表，建立两个字段分别关联菜品表的主键和套餐表的主键。</p></blockquote><p>分析页面原型及需求文档后，我们获得：</p><ul><li>分类表<ul><li>业务字段：分类名称、分类类型、分类排序、分类状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul></li><li>菜品表<ul><li>业务字段：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul></li><li>套餐表<ul><li>业务字段：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul></li></ul><p>表结构之间的关系：</p><ul><li>分类表 - 菜品表 ： 一对多<ul><li>在菜品表中添加字段(菜品分类)，关联分类表</li></ul></li><li>菜品表 - 套餐表 ： 多对多<ul><li>创建第三张中间表(套餐菜品关联表)，在中间表上添加两个字段(菜品id、套餐id)，分别关联菜品表和分类表</li></ul></li></ul><p><img src="/.com//image-20220831211756004.png"></p><p><strong>表结构</strong></p><p>分类表：category</p><ul><li>业务字段：分类名称、分类类型、分类排序、分类状态</li><li>基础字段：id(主键)、创建时间、修改时间</li></ul><p><img src="/.com//image-20221207143907853.png" alt="image-20221207143907853"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 分类表</span><br><span class="line">create table category</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name        varchar(20)      not null unique comment &#x27;分类名称&#x27;,</span><br><span class="line">    type        tinyint unsigned not null comment &#x27;类型 1 菜品分类 2 套餐分类&#x27;,</span><br><span class="line">    sort        tinyint unsigned not null comment &#x27;顺序&#x27;,</span><br><span class="line">    status      tinyint unsigned not null default 0 comment &#x27;状态 0 禁用，1 启用&#x27;,</span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;更新时间&#x27;</span><br><span class="line">) comment &#x27;菜品及套餐分类&#x27;;</span><br></pre></td></tr></table></figure><p>菜品表：dish</p><ul><li>业务字段：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul><p><img src="/.com//image-20221207144323100.png" alt="image-20221207144323100"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 菜品表</span><br><span class="line">create table dish</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name        varchar(20)      not null unique comment &#x27;菜品名称&#x27;,</span><br><span class="line">    category_id int unsigned     not null comment &#x27;菜品分类ID&#x27;,   -- 逻辑外键</span><br><span class="line">    price       decimal(8, 2)    not null comment &#x27;菜品价格&#x27;,</span><br><span class="line">    image       varchar(300)     not null comment &#x27;菜品图片&#x27;,</span><br><span class="line">    description varchar(200) comment &#x27;描述信息&#x27;,</span><br><span class="line">    status      tinyint unsigned not null default 0 comment &#x27;状态, 0 停售 1 起售&#x27;,</span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;更新时间&#x27;</span><br><span class="line">) comment &#x27;菜品&#x27;;</span><br></pre></td></tr></table></figure><p>套餐表：setmeal</p><ul><li>业务字段：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul><p><img src="/.com//image-20221207144723621.png" alt="image-20221207144723621"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 套餐表</span><br><span class="line">create table setmeal</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name        varchar(20)      not null unique comment &#x27;套餐名称&#x27;,</span><br><span class="line">    category_id int unsigned     not null comment &#x27;分类id&#x27;,       -- 逻辑外键</span><br><span class="line">    price       decimal(8, 2)    not null comment &#x27;套餐价格&#x27;,</span><br><span class="line">    image       varchar(300)     not null comment &#x27;图片&#x27;,</span><br><span class="line">    description varchar(200) comment &#x27;描述信息&#x27;,</span><br><span class="line">    status      tinyint unsigned not null default 0 comment &#x27;状态 0:停用 1:启用&#x27;,</span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;更新时间&#x27;</span><br><span class="line">) comment &#x27;套餐&#x27;;</span><br></pre></td></tr></table></figure><p>套餐菜品关联表：setmeal_dish</p><p><img src="/.com//image-20221207145016440.png" alt="image-20221207145016440"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 套餐菜品关联表</span><br><span class="line">create table setmeal_dish</span><br><span class="line">(</span><br><span class="line">    id         int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    setmeal_id int unsigned     not null comment &#x27;套餐id &#x27;,    -- 逻辑外键</span><br><span class="line">    dish_id    int unsigned     not null comment &#x27;菜品id&#x27;,     -- 逻辑外键</span><br><span class="line">    copies     tinyint unsigned not null comment &#x27;份数&#x27;</span><br><span class="line">) comment &#x27;套餐菜品关联表&#x27;;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>1、一对多</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在多的一方添加外键，关联另一方的主键。</span><br></pre></td></tr></table></figure><p><strong>2、一对一</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">任意一方，添加外键，关联另一方的主键</span><br></pre></td></tr></table></figure><p><strong>3、多对多</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过中间表来维护，中间表的两个外键，分别关联另外两张表的主键</span><br></pre></td></tr></table></figure><h2 id="6-多表查询"><a href="#6-多表查询" class="headerlink" title="6. 多表查询"></a>6. 多表查询</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><h4 id="6-1-1-数据准备"><a href="#6-1-1-数据准备" class="headerlink" title="6.1.1 数据准备"></a>6.1.1 数据准备</h4><p>SQL脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#建议：创建新的数据库</span><br><span class="line">create database db04;</span><br><span class="line">use db04;</span><br><span class="line"></span><br><span class="line">-- 部门表</span><br><span class="line">create table tb_dept</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name        varchar(10) not null unique comment &#x27;部门名称&#x27;,</span><br><span class="line">    create_time datetime    not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime    not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;部门表&#x27;;</span><br><span class="line">-- 部门表测试</span><br><span class="line">insert into tb_dept (id, name, create_time, update_time)</span><br><span class="line">values (1, &#x27;学工部&#x27;, now(), now()),</span><br><span class="line">       (2, &#x27;教研部&#x27;, now(), now()),</span><br><span class="line">       (3, &#x27;咨询部&#x27;, now(), now()),</span><br><span class="line">       (4, &#x27;就业部&#x27;, now(), now()),</span><br><span class="line">       (5, &#x27;人事部&#x27;, now(), now());</span><br><span class="line"></span><br><span class="line">-- 员工表</span><br><span class="line">create table tb_emp</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,</span><br><span class="line">    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,</span><br><span class="line">    name        varchar(10)      not null comment &#x27;姓名&#x27;,</span><br><span class="line">    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,</span><br><span class="line">    image       varchar(300) comment &#x27;图像&#x27;,</span><br><span class="line">    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,</span><br><span class="line">    entrydate   date comment &#x27;入职时间&#x27;,</span><br><span class="line">    dept_id     int unsigned comment &#x27;部门ID&#x27;,</span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;员工表&#x27;;</span><br><span class="line">-- 员工表测试数据</span><br><span class="line">INSERT INTO tb_emp(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) </span><br><span class="line">VALUES </span><br><span class="line">(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),</span><br><span class="line">(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),</span><br><span class="line">(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),</span><br><span class="line">(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),</span><br><span class="line">(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),</span><br><span class="line">(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),</span><br><span class="line">(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),</span><br><span class="line">(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),</span><br><span class="line">(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),</span><br><span class="line">(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),</span><br><span class="line">(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,5,&#x27;2007-02-01&#x27;,3,now(),now()),</span><br><span class="line">(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,5,&#x27;2008-08-18&#x27;,3,now(),now()),</span><br><span class="line">(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,5,&#x27;2012-11-01&#x27;,3,now(),now()),</span><br><span class="line">(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),</span><br><span class="line">(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),</span><br><span class="line">(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),</span><br><span class="line">(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());</span><br></pre></td></tr></table></figure><h4 id="6-1-2-介绍"><a href="#6-1-2-介绍" class="headerlink" title="6.1.2 介绍"></a>6.1.2 介绍</h4><p>多表查询：查询时从多张表中获取所需数据</p><blockquote><p>单表查询的SQL语句：select  字段列表  from  表名;</p><p>那么要执行多表查询，只需要使用逗号分隔多张表即可，如： select   字段列表  from  表1, 表2;</p></blockquote><p>查询用户表和部门表中的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from  tb_emp , tb_dept;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20220901093654673.png" alt="image-20220901093654673">  </p><p>此时,我们看到查询结果中包含了大量的结果集，总共85条记录，而这其实就是员工表所有的记录(17行)与部门表所有记录(5行)的所有组合情况，这种现象称之为笛卡尔积。</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合(A集合和B集合)的所有组合情况。</p><p><img src="/.com//image-20221207155509696.png" alt="image-20221207155509696"></p><blockquote><p>在多表查询时，需要消除无效的笛卡尔积，只保留表关联部分的数据</p></blockquote><p><img src="/.com//image-20220901093756992.png"></p><p>在SQL语句中，如何去除无效的笛卡尔积呢？只需要给多表查询加上连接查询的条件即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_emp , tb_dept where tb_emp.dept_id = tb_dept.id ;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221207164518904.png" alt="image-20221207164518904"></p><blockquote><p>由于id为17的员工，没有dept_id字段值，所以在多表查询时，根据连接查询的条件并没有查询到。</p></blockquote><h4 id="6-1-3-分类"><a href="#6-1-3-分类" class="headerlink" title="6.1.3 分类"></a>6.1.3 分类</h4><p>多表查询可以分为：</p><ol><li><p>连接查询</p><ul><li>内连接：相当于查询A、B交集部分数据</li></ul><p><img src="/.com//image-20221207165446062.png" alt="image-20221207165446062"> </p></li><li><p>外连接</p><ul><li><p>左外连接：查询左表所有数据(包括两张表交集部分数据)</p></li><li><p>右外连接：查询右表所有数据(包括两张表交集部分数据)</p></li></ul></li><li><p>子查询</p></li></ol><h3 id="6-2-内连接"><a href="#6-2-内连接" class="headerlink" title="6.2 内连接"></a>6.2 内连接</h3><p>内连接查询：查询两表或多表中交集部分数据。</p><p>内连接从语法上可以分为：</p><ul><li><p>隐式内连接</p></li><li><p>显式内连接</p></li></ul><p>隐式内连接语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表   from   表1 , 表2   where  条件 ... ;</span><br></pre></td></tr></table></figure><p>显式内连接语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表   from   表1  [ inner ]  join 表2  on  连接条件 ... ;</span><br></pre></td></tr></table></figure><p>案例：查询员工的姓名及所属的部门名称</p><ul><li>隐式内连接实现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select tb_emp.name , tb_dept.name -- 分别查询两张表中的数据</span><br><span class="line">from tb_emp , tb_dept -- 关联两张表</span><br><span class="line">where tb_emp.dept_id = tb_dept.id; -- 消除笛卡尔积</span><br></pre></td></tr></table></figure><ul><li>显式内连接实现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select tb_emp.name , tb_dept.name</span><br><span class="line">from tb_emp inner join tb_dept</span><br><span class="line">on tb_emp.dept_id = tb_dept.id;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221207173435289.png" alt="image-20221207173435289"></p><p>多表查询时给表起别名：</p><ul><li><p>tableA  as  别名1  ,  tableB  as  别名2 ;</p></li><li><p>tableA  别名1  ,  tableB  别名2 ;</p></li></ul><p><img src="/.com//image-20221207174234522.png" alt="image-20221207174234522"></p><p>使用了别名的多表查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select emp.name , dept.name</span><br><span class="line">from tb_emp emp inner join tb_dept dept</span><br><span class="line">on emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p><p>一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段。</p></blockquote><h3 id="6-3-外连接"><a href="#6-3-外连接" class="headerlink" title="6.3 外连接"></a>6.3 外连接</h3><p>外连接分为两种：左外连接 和 右外连接。</p><p>左外连接语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表   from   表1  left  [ outer ]  join 表2  on  连接条件 ... ;</span><br></pre></td></tr></table></figure><blockquote><p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><p>右外连接语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表   from   表1  right  [ outer ]  join 表2  on  连接条件 ... ;</span><br></pre></td></tr></table></figure><blockquote><p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><p>案例：查询员工表中所有员工的姓名, 和对应的部门名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 左外连接：以left join关键字左边的表为主表，查询主表中所有数据，以及和主表匹配的右边表中的数据</span><br><span class="line">select emp.name , dept.name</span><br><span class="line">from tb_emp AS emp left join tb_dept AS dept </span><br><span class="line">     on emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221207181204792.png" alt="image-20221207181204792"></p><p>案例：查询部门表中所有部门的名称, 和对应的员工名称 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 右外连接</span><br><span class="line">select dept.name , emp.name</span><br><span class="line">from tb_emp AS emp right join  tb_dept AS dept</span><br><span class="line">     on emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221207181048208.png" alt="image-20221207181048208"></p><blockquote><p>注意事项：</p><p>左外连接和右外连接是可以相互替换的，只需要调整连接查询时SQL语句中表的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p></blockquote><h3 id="6-4-子查询"><a href="#6-4-子查询" class="headerlink" title="6.4 子查询"></a>6.4 子查询</h3><h4 id="6-4-1-介绍"><a href="#6-4-1-介绍" class="headerlink" title="6.4.1 介绍"></a>6.4.1 介绍</h4><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span>  <span class="keyword">FROM</span>   t1   <span class="keyword">WHERE</span>  column1 <span class="operator">=</span>  ( <span class="keyword">SELECT</span>  column1  <span class="keyword">FROM</span>  t2 ... );</span><br></pre></td></tr></table></figure><blockquote><p>子查询外部的语句可以是insert &#x2F; update &#x2F; delete &#x2F; select 的任何一个，最常见的是 select。</p></blockquote><p>根据子查询结果的不同分为：</p><ol><li><p>标量子查询（子查询结果为单个值[一行一列]）</p></li><li><p>列子查询（子查询结果为一列，但可以是多行）</p></li><li><p>行子查询（子查询结果为一行，但可以是多列）</p></li><li><p>表子查询（子查询结果为多行多列[相当于子查询结果是一张表]）</p></li></ol><p>子查询可以书写的位置：</p><ol><li>where之后</li><li>from之后</li><li>select之后</li></ol><h4 id="6-4-2-标量子查询"><a href="#6-4-2-标量子查询" class="headerlink" title="6.4.2 标量子查询"></a>6.4.2 标量子查询</h4><p>子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式，这种子查询称为标量子查询。</p><p>常用的操作符： &#x3D;   &lt;&gt;   &gt;    &gt;&#x3D;    &lt;   &lt;&#x3D;   </p><p>案例1：查询”教研部”的所有员工信息</p><blockquote><p>可以将需求分解为两步：</p><ol><li>查询 “教研部” 部门ID</li><li>根据 “教研部” 部门ID，查询员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询&quot;教研部&quot;部门ID</span><br><span class="line">select id from tb_dept where name = &#x27;教研部&#x27;;    #查询结果：2</span><br><span class="line">-- 2.根据&quot;教研部&quot;部门ID, 查询员工信息</span><br><span class="line">select * from tb_emp where dept_id = 2;</span><br><span class="line"></span><br><span class="line">-- 合并出上两条SQL语句</span><br><span class="line">select * from tb_emp where dept_id = (select id from tb_dept where name = &#x27;教研部&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221207202215946.png" alt="image-20221207202215946"></p><p>案例2：查询在 “方东白” 入职之后的员工信息</p><blockquote><p>可以将需求分解为两步：</p><ol><li>查询 方东白 的入职日期</li><li>查询 指定入职日期之后入职的员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询&quot;方东白&quot;的入职日期</span><br><span class="line">select entrydate from tb_emp where name = &#x27;方东白&#x27;;     #查询结果：2012-11-01</span><br><span class="line">-- 2.查询指定入职日期之后入职的员工信息</span><br><span class="line">select * from tb_emp where entrydate &gt; &#x27;2012-11-01&#x27;;</span><br><span class="line"></span><br><span class="line">-- 合并以上两条SQL语句</span><br><span class="line">select * from tb_emp where entrydate &gt; (select entrydate from tb_emp where name = &#x27;方东白&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221207203000445.png" alt="image-20221207203000445"></p><h4 id="6-4-3-列子查询"><a href="#6-4-3-列子查询" class="headerlink" title="6.4.3 列子查询"></a>6.4.3 列子查询</h4><p>子查询返回的结果是一列(可以是多行)，这种子查询称为列子查询。</p><p>常用的操作符：</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr></tbody></table><p>案例：查询”教研部”和”咨询部”的所有员工信息</p><blockquote><p>分解为以下两步：</p><ol><li>查询 “销售部” 和 “市场部” 的部门ID</li><li>根据部门ID, 查询员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询&quot;销售部&quot;和&quot;市场部&quot;的部门ID</span><br><span class="line">select id from tb_dept where name = &#x27;教研部&#x27; or name = &#x27;咨询部&#x27;;    #查询结果：3,2</span><br><span class="line">-- 2.根据部门ID, 查询员工信息</span><br><span class="line">select * from tb_emp where dept_id in (3,2);</span><br><span class="line"></span><br><span class="line">-- 合并以上两条SQL语句</span><br><span class="line">select * from tb_emp where dept_id in (select id from tb_dept where name = &#x27;教研部&#x27; or name = &#x27;咨询部&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221207203620472.png" alt="image-20221207203620472"></p><h4 id="6-4-4-行子查询"><a href="#6-4-4-行子查询" class="headerlink" title="6.4.4 行子查询"></a>6.4.4 行子查询</h4><p>子查询返回的结果是一行(可以是多列)，这种子查询称为行子查询。</p><p>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</p><p>案例：查询与”韦一笑”的入职日期及职位都相同的员工信息 </p><blockquote><p>可以拆解为两步进行： </p><ol><li>查询 “韦一笑” 的入职日期 及 职位</li><li>查询与”韦一笑”的入职日期及职位相同的员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 查询&quot;韦一笑&quot;的入职日期 及 职位</span><br><span class="line">select entrydate , job from tb_emp where name = &#x27;韦一笑&#x27;;  #查询结果： 2007-01-01 , 2</span><br><span class="line">-- 查询与&quot;韦一笑&quot;的入职日期及职位相同的员工信息</span><br><span class="line">select * from tb_emp where (entrydate,job) = (&#x27;2007-01-01&#x27;,2);</span><br><span class="line"></span><br><span class="line">-- 合并以上两条SQL语句</span><br><span class="line">select * from tb_emp where (entrydate,job) = (select entrydate , job from tb_emp where name = &#x27;韦一笑&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221207204452202.png" alt="image-20221207204452202"></p><h4 id="6-4-5-表子查询"><a href="#6-4-5-表子查询" class="headerlink" title="6.4.5 表子查询"></a>6.4.5 表子查询</h4><p>子查询返回的结果是多行多列，常作为临时表，这种子查询称为表子查询。</p><p>案例：查询入职日期是 “2006-01-01” 之后的员工信息 , 及其部门信息</p><blockquote><p>分解为两步执行：</p><ol><li>查询入职日期是 “2006-01-01” 之后的员工信息</li><li>基于查询到的员工信息，在查询对应的部门信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where entrydate &gt; &#x27;2006-01-01&#x27;;</span><br><span class="line"></span><br><span class="line">select e.*, d.* from (select * from emp where entrydate &gt; &#x27;2006-01-01&#x27;) e left join dept d on e.dept_id = d.id ;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221208142154263.png" alt="image-20221208142154263"></p><h3 id="6-5-案例"><a href="#6-5-案例" class="headerlink" title="6.5 案例"></a>6.5 案例</h3><p>基于之前设计的多表案例的表结构，我们来完成今天的多表查询案例需求。</p><p><strong>准备环境</strong></p><p>将资料中准备好的多表查询的数据准备的SQL脚本导入数据库中。</p><p><img src="/.com//image-20221208143318921.png" alt="image-20221208143318921"> </p><ul><li>分类表：category</li><li>菜品表：dish</li><li>套餐表：setmeal</li><li>套餐菜品关系表：setmeal_dish</li></ul><p><img src="/.com//image-20221208143312292.png" alt="image-20221208143312292"> </p><p><strong>需求实现</strong></p><ol><li>查询价格低于 10元 的菜品的名称 、价格 及其 菜品的分类名称</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*查询技巧：</span><br><span class="line">     明确1：查询需要用到哪些字段</span><br><span class="line">        菜品名称、菜品价格 、 菜品分类名</span><br><span class="line">     明确2：查询的字段分别归属于哪张表</span><br><span class="line">        菜品表：[菜品名称、菜品价格]</span><br><span class="line">        分类表：[分类名]</span><br><span class="line">     明确3：如查多表，建立表与表之间的关联</span><br><span class="line">        菜品表.caategory_id = 分类表.id</span><br><span class="line">     其他：（其他条件、其他要求）</span><br><span class="line">        价格 &lt; 10</span><br><span class="line">*/</span><br><span class="line">select d.name , d.price , c.name</span><br><span class="line">from dish AS d , category AS c</span><br><span class="line">where d.category_id = c.id</span><br><span class="line">      and d.price &lt; 10;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221208145036602.png" alt="image-20221208145036602"></p><ol start="2"><li>查询所有价格在 10元(含)到50元(含)之间 且 状态为”起售”的菜品名称、价格及其分类名称 (即使菜品没有分类 , 也要将菜品查询出来)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select d.name , d.price, c.name</span><br><span class="line">from dish AS d left join category AS c on d.category_id = c.id</span><br><span class="line">where d.price between 10 and 50</span><br><span class="line">      and d.status = 1;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221208145432077.png" alt="image-20221208145432077"></p><ol start="3"><li>查询每个分类下最贵的菜品, 展示出分类的名称、最贵的菜品的价格</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select c.name , max(d.price)</span><br><span class="line">from dish AS d , category AS c</span><br><span class="line">where d.category_id = c.id</span><br><span class="line">group by c.name;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221208150016895.png" alt="image-20221208150016895"></p><ol start="4"><li>查询各个分类下 菜品状态为 “起售” , 并且 该分类下菜品总数量大于等于3 的 分类名称</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*查询技巧：</span><br><span class="line">     明确1：查询需要用到哪些字段</span><br><span class="line">        分类名称、菜品总数量</span><br><span class="line">     明确2：查询用到的字段分别归属于哪张表</span><br><span class="line">        分类表：[分类名]</span><br><span class="line">        菜品表：[菜品状态]</span><br><span class="line">     明确3：如查多表，建立表与表之间的关联</span><br><span class="line">        菜品表.caategory_id = 分类表.id</span><br><span class="line">     其他：（其他条件、其他要求）</span><br><span class="line">        条件：菜品状态 = 1 (1表示起售)</span><br><span class="line">        分组：分类名</span><br><span class="line">        分组后条件： 总数量 &gt;= 3</span><br><span class="line">*/</span><br><span class="line">select c.name , count(*)</span><br><span class="line">from dish AS d , category AS c</span><br><span class="line">where d.category_id = c.id</span><br><span class="line">      and d.status = 1 -- 起售状态</span><br><span class="line">group by c.name  -- 按照分类名分组</span><br><span class="line">having count(*)&gt;=3; -- 各组后筛选菜品总数据&gt;=3</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221208152107502.png" alt="image-20221208152107502"></p><ol start="5"><li>查询出 “商务套餐A” 中包含了哪些菜品 （展示出套餐名称、价格, 包含的菜品名称、价格、份数）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select s.name, s.price, d.name, d.price, sd.copies</span><br><span class="line">from setmeal AS s , setmeal_dish AS sd , dish AS d</span><br><span class="line">where s.id = sd.setmeal_id and sd.dish_id = d.id</span><br><span class="line">      and s.name=&#x27;商务套餐A&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221208152626138.png" alt="image-20221208152626138"></p><ol start="6"><li>查询出低于菜品平均价格的菜品信息 (展示出菜品名称、菜品价格)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 1.计算菜品平均价格</span><br><span class="line">select avg(price) from dish;    -- 查询结果：37.736842</span><br><span class="line">-- 2.查询出低于菜品平均价格的菜品信息</span><br><span class="line">select * from dish where price &lt; 37.736842;</span><br><span class="line"></span><br><span class="line">-- 合并以上两条SQL语句</span><br><span class="line">select * from dish where price &lt; (select avg(price) from dish);</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221208153051333.png" alt="image-20221208153051333"></p><h2 id="7-事务"><a href="#7-事务" class="headerlink" title="7. 事务"></a>7. 事务</h2><p>场景：学工部整个部门解散了，该部门及部门下的员工都需要删除了。</p><ul><li><p>操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除学工部</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 删除成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除学工部的员工</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 删除失败（操作过程中出现错误：造成删除没有成功）</span></span><br></pre></td></tr></table></figure></li><li><p>问题：如果删除部门成功了，而删除该部门的员工时失败了，此时就造成了数据的不一致。</p></li></ul><p>​要解决上述的问题，就需要通过数据库中的事务来解决。</p><h3 id="7-1-介绍"><a href="#7-1-介绍" class="headerlink" title="7.1 介绍"></a>7.1 介绍</h3><p>在实际的业务开发中，有些业务操作要多次访问数据库。一个业务要发送多条SQL语句给数据库执行。需要将多次访问数据库的操作视为一个整体来执行，要么所有的SQL语句全部执行成功。如果其中有一条SQL语句失败，就进行事务的回滚，所有的SQL语句全部执行失败。</p><p>简而言之：事务是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>事务作用：保证在一个事务中多次操作数据库表中数据时，要么全都成功,要么全都失败。</p><h3 id="7-2-操作"><a href="#7-2-操作" class="headerlink" title="7.2 操作"></a>7.2 操作</h3><p>MYSQL中有两种方式进行事务的操作：</p><ol><li>自动提交事务：即执行一条sql语句提交一次事务。（默认MySQL的事务是自动提交）</li><li>手动提交事务：先开启，再提交</li></ol><p>事务操作有关的SQL语句：</p><table><thead><tr><th>SQL语句</th><th>描述</th></tr></thead><tbody><tr><td>start transaction;  &#x2F;  begin ;</td><td>开启手动控制事务</td></tr><tr><td>commit;</td><td>提交事务</td></tr><tr><td>rollback;</td><td>回滚事务</td></tr></tbody></table><blockquote><p>手动提交事务使用步骤：</p><ul><li>第1种情况：开启事务  &#x3D;&gt;  执行SQL语句   &#x3D;&gt;  成功  &#x3D;&gt;  提交事务</li><li>第2种情况：开启事务  &#x3D;&gt;  执行SQL语句   &#x3D;&gt;  失败  &#x3D;&gt;  回滚事务</li></ul></blockquote><p>使用事务控制删除部门和删除该部门下的员工的操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除学工部</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除学工部的员工</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>上述的这组SQL语句，如果如果执行成功，则提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 提交事务 (成功时执行)</span></span><br><span class="line"><span class="keyword">commit</span> ;</span><br></pre></td></tr></table></figure><ul><li>上述的这组SQL语句，如果如果执行失败，则回滚事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 回滚事务 (出错时执行)</span></span><br><span class="line"><span class="keyword">rollback</span> ;</span><br></pre></td></tr></table></figure><h3 id="7-3-四大特性"><a href="#7-3-四大特性" class="headerlink" title="7.3 四大特性"></a>7.3 四大特性</h3><p>面试题：事务有哪些特性？</p><ul><li>原子性（Atomicity）：事务是不可分割的最小单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><blockquote><p>事务的四大特性简称为：ACID</p></blockquote><ul><li><p><strong>原子性（Atomicity）</strong> ：原子性是指事务包装的一组sql是一个不可分割的工作单元，事务中的操作要么全部成功，要么全部失败。</p></li><li><p><strong>一致性（Consistency）</strong>：一个事务完成之后数据都必须处于一致性状态。</p></li></ul><p>​如果事务成功的完成，那么数据库的所有变化将生效。</p><p>​如果事务执行出现错误，那么数据库的所有变化将会被回滚(撤销)，返回到原始状态。</p><ul><li><strong>隔离性（Isolation）</strong>：多个用户并发的访问数据库时，一个用户的事务不能被其他用户的事务干扰，多个并发的事务之间要相互隔离。</li></ul><p>​一个事务的成功或者失败对于其他的事务是没有影响。</p><ul><li><strong>持久性（Durability）</strong>：一个事务一旦被提交或回滚，它对数据库的改变将是永久性的，哪怕数据库发生异常，重启之后数据亦然存在。</li></ul><h2 id="8-索引"><a href="#8-索引" class="headerlink" title="8. 索引"></a>8. 索引</h2><h3 id="8-1-介绍"><a href="#8-1-介绍" class="headerlink" title="8.1 介绍"></a>8.1 介绍</h3><p>索引(index)：是帮助数据库高效获取数据的数据结构 。</p><ul><li>简单来讲，就是使用索引可以提高查询的效率。</li></ul><p>测试没有使用索引的查询：</p><p><img src="/.com//image-20221209115617429.png" alt="image-20221209115617429"></p><p>添加索引后查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 添加索引</span><br><span class="line">create index idx_sku_sn on tb_sku (sn);  #在添加索引时，也需要消耗时间</span><br><span class="line"></span><br><span class="line">-- 查询数据（使用了索引）</span><br><span class="line">select * from tb_sku where sn = &#x27;100000003145008&#x27;;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221209120107543.png" alt="image-20221209120107543"></p><p>优点：</p><ol><li>提高数据查询的效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。</li></ol><p>缺点：</p><ol><li>索引会占用存储空间。</li><li>索引大大提高了查询效率，同时却也降低了insert、update、delete的效率。</li></ol><h3 id="8-2-结构"><a href="#8-2-结构" class="headerlink" title="8.2 结构"></a>8.2 结构</h3><p>MySQL数据库支持的索引结构有很多，如：Hash索引、B+Tree索引、Full-Text索引等。</p><p>我们平常所说的索引，如果没有特别指明，都是指默认的 B+Tree 结构组织的索引。</p><p>在没有了解B+Tree结构前，我们先回顾下之前所学习的树结构：</p><blockquote><p>二叉查找树：左边的子节点比父节点小，右边的子节点比父节点大</p></blockquote><p><img src="/.com//image-20221208174135229.png" alt="image-20221208174135229"> </p><blockquote><p>当我们向二叉查找树保存数据时，是按照从大到小(或从小到大)的顺序保存的，此时就会形成一个单向链表，搜索性能会打折扣。</p></blockquote><p><img src="/.com//image-20221208174859866.png" alt="image-20221208174859866"> </p><blockquote><p>可以选择平衡二叉树或者是红黑树来解决上述问题。（红黑树也是一棵平衡的二叉树）</p></blockquote><p><img src="/.com//image-20221209100647867.png" alt="image-20221209100647867"></p><blockquote><p>但是在Mysql数据库中并没有使用二叉搜索数或二叉平衡数或红黑树来作为索引的结构。</p></blockquote><p>思考：采用二叉搜索树或者是红黑树来作为索引的结构有什么问题？</p><details>    <summary>答案</summary>    最大的问题就是在数据量大的情况下，树的层级比较深，会影响检索速度。因为不管是二叉搜索数还是红黑数，一个节点下面只能有两个子节点。此时在数据量大的情况下，就会造成数的高度比较高，树的高度一旦高了，检索速度就会降低。</details><blockquote><p>说明：如果数据结构是红黑树，那么查询1000万条数据，根据计算树的高度大概是23左右，这样确实比之前的方式快了很多，但是如果高并发访问，那么一个用户有可能需要23次磁盘IO，那么100万用户，那么会造成效率极其低下。所以为了减少红黑树的高度，那么就得增加树的宽度，就是不再像红黑树一样每个节点只能保存一个数据，可以引入另外一种数据结构，一个节点可以保存多个数据，这样宽度就会增加从而降低树的高度。这种数据结构例如BTree就满足。</p></blockquote><p>下面我们来看看B+Tree(多路平衡搜索树)结构中如何避免这个问题：</p><p><img src="/.com//image-20221208181315728.png" alt="image-20221208181315728"></p><p>B+Tree结构：</p><ul><li>每一个节点，可以存储多个key（有n个key，就有n个指针）</li><li>节点分为：叶子节点、非叶子节点<ul><li>叶子节点，就是最后一层子节点，所有的数据都存储在叶子节点上</li><li>非叶子节点，不是树结构最下面的节点，用于索引数据，存储的的是：key+指针</li></ul></li><li>为了提高范围查询效率，叶子节点形成了一个双向链表，便于数据的排序及区间范围查询</li></ul><blockquote><p><strong>拓展：</strong></p><p>非叶子节点都是由key+指针域组成的，一个key占8字节，一个指针占6字节，而一个节点总共容量是16KB，那么可以计算出一个节点可以存储的元素个数：16*1024字节 &#x2F; (8+6)&#x3D;1170个元素。</p><ul><li>查看mysql索引节点大小：show global status like ‘innodb_page_size’;    – 节点大小：16384</li></ul><p>当根节点中可以存储1170个元素，那么根据每个元素的地址值又会找到下面的子节点，每个子节点也会存储1170个元素，那么第二层即第二次IO的时候就会找到数据大概是：1170*1170&#x3D;135W。也就是说B+Tree数据结构中只需要经历两次磁盘IO就可以找到135W条数据。</p><p>对于第二层每个元素有指针，那么会找到第三层，第三层由key+数据组成，假设key+数据总大小是1KB，而每个节点一共能存储16KB，所以一个第三层一个节点大概可以存储16个元素(即16条记录)。那么结合第二层每个元素通过指针域找到第三层的节点，第二层一共是135W个元素，那么第三层总元素大小就是：135W*16结果就是2000W+的元素个数。</p><p>结合上述分析B+Tree有如下优点：</p><ul><li>千万条数据，B+Tree可以控制在小于等于3的高度</li><li>所有的数据都存储在叶子节点上，并且底层已经实现了按照索引进行排序，还可以支持范围查询，叶子节点是一个双向链表，支持从小到大或者从大到小查找</li></ul></blockquote><h3 id="8-3-语法"><a href="#8-3-语法" class="headerlink" title="8.3 语法"></a>8.3 语法</h3><p><strong>创建索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create  [ unique ]  index 索引名 on  表名 (字段名,... ) ;</span><br></pre></td></tr></table></figure><p>案例：为tb_emp表的name字段建立一个索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_emp_name on tb_emp(name);</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221209105119159.png" alt="image-20221209105119159"></p><blockquote><p>在创建表时，如果添加了主键和唯一约束，就会默认创建：主键索引、唯一约束</p><p><img src="/.com//image-20221209105846211.png" alt="image-20221209105846211"></p></blockquote><p><strong>查看索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show  index  from  表名;</span><br></pre></td></tr></table></figure><p>案例：查询 tb_emp 表的索引信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show  index  from  tb_emp;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221209110317092.png" alt="image-20221209110317092"></p><p><strong>删除索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop  index  索引名  on  表名;</span><br></pre></td></tr></table></figure><p>案例：删除 tb_emp 表中name字段的索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index idx_emp_name on tb_emp;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><ul><li><p>主键字段，在建表时，会自动创建主键索引</p></li><li><p>添加唯一约束时，数据库实际上会添加唯一索引</p></li></ul></blockquote><h1 id="Mybatis入门"><a href="#Mybatis入门" class="headerlink" title="Mybatis入门"></a>Mybatis入门</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>在前面我们学习MySQL数据库时，都是利用图形化客户端工具(如：idea、datagrip)，来操作数据库的。</p><blockquote><p>在客户端工具中，编写增删改查的SQL语句，发给MySQL数据库管理系统，由数据库管理系统执行SQL语句并返回执行结果。</p><p>增删改操作：返回受影响行数</p><p>查询操作：返回结果集(查询的结果)</p></blockquote><p>我们做为后端程序开发人员，通常会使用Java程序来完成对数据库的操作。Java程序操作数据库，现在主流的方式是：Mybatis。</p><p>什么是MyBatis?</p><ul><li><p>MyBatis是一款优秀的 <strong>持久层</strong> <strong>框架</strong>，用于简化JDBC的开发。</p></li><li><p>MyBatis本是 Apache的一个开源项目iBatis，2010年这个项目由apache迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p></li><li><p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><p>在上面我们提到了两个词：一个是持久层，另一个是框架。</p><ul><li>持久层：指的是就是数据访问层(dao)，是用来操作数据库的。</li></ul><p><img src="/.com//image-20220901114951631.png" alt="image-20220901114951631"> </p><ul><li>框架：是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。在框架的基础上进行软件开发更加高效、规范、通用、可拓展。</li></ul><p>Mybatis课程安排：</p><ul><li><p>Mybatis入门</p></li><li><p>Mybatis基础增删改查</p></li><li><p>Mybatis动态SQL</p></li></ul><p>接下来，我们就通过一个入门程序，让大家快速感受一下通过Mybatis如何来操作数据库。</p><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h2><p>需求：使用Mybatis查询所有用户数据。</p><h3 id="1-1-入门程序分析"><a href="#1-1-入门程序分析" class="headerlink" title="1.1 入门程序分析"></a>1.1 入门程序分析</h3><p>以前我们是在图形化客户端工具中编写SQL查询代码，发送给数据库执行，数据库执行后返回操作结果。</p><p><img src="/.com//image-20221209155704203.png" alt="image-20221209155704203"> </p><p>图形化工具会把数据库执行的查询结果，使用表格的形式展现出来</p><p><img src="/.com//image-20220901121116813.png" alt="image-20220901121116813"> </p><p>现在使用Mybatis操作数据库，就是在Mybatis中编写SQL查询代码，发送给数据库执行，数据库执行后返回结果。</p><p><img src="/.com//image-20221209155904370.png" alt="image-20221209155904370"></p><p> Mybatis会把数据库执行的查询结果，使用实体类封装起来（一行记录对应一个实体类对象）</p><p><img src="/.com//image-20221209161623051.png" alt="image-20221209161623051"></p><p>Mybatis操作数据库的步骤：</p><ol><li><p>准备工作(创建springboot工程、数据库表user、实体类User)</p></li><li><p>引入Mybatis的相关依赖，配置Mybatis(数据库连接信息)</p></li><li><p>编写SQL语句(注解&#x2F;XML)</p></li></ol><h3 id="1-2-入门程序实现"><a href="#1-2-入门程序实现" class="headerlink" title="1.2 入门程序实现"></a>1.2 入门程序实现</h3><h4 id="1-2-1-准备工作"><a href="#1-2-1-准备工作" class="headerlink" title="1.2.1 准备工作"></a>1.2.1 准备工作</h4><h5 id="1-2-1-1-创建springboot工程"><a href="#1-2-1-1-创建springboot工程" class="headerlink" title="1.2.1.1 创建springboot工程"></a>1.2.1.1 创建springboot工程</h5><p>创建springboot工程，并导入 mybatis的起步依赖、mysql的驱动包。</p><p><img src="/.com//image-20221209162827242.png" alt="image-20221209162827242"></p><p><img src="/.com//image-20221209163123443.png" alt="image-20221209163123443"></p><blockquote><p>项目工程创建完成后，自动在pom.xml文件中，导入Mybatis依赖和MySQL驱动依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 仅供参考：只粘贴了pom.xml中部分内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis起步依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动包依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- spring单元测试 (集成了junit) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-配置Mybatis"><a href="#1-2-2-配置Mybatis" class="headerlink" title="1.2.2 配置Mybatis"></a>1.2.2 配置Mybatis</h4><blockquote><p>在之前使用图形化客户端工具，连接MySQL数据库时，需要配置：</p><p><img src="/.com//image-20221209172527630.png" alt="image-20221209172527630"></p><p>连接数据库的四大参数：</p><ul><li>MySQL驱动类 </li><li>登录名</li><li>密码</li><li>数据库连接字符串</li></ul></blockquote><p>基于上述分析，在Mybatis中要连接数据库，同样也需要以上4个参数配置。</p><p>在springboot项目中，可以编写application.properties文件，配置数据库连接信息。我们要连接数据库，就需要配置数据库连接的基本信息，包括：driver-class-name、url 、username，password。</p><blockquote><p>在入门程序中，大家可以直接这么配置，后面会介绍什么是驱动。</p></blockquote><p>application.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#驱动类名称</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#数据库连接的url</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="comment">#连接数据库的用户名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#连接数据库的密码</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><blockquote><p>上述的配置，可以直接复制过去，不要敲错了。 全部都是 spring.datasource.xxxx 开头。</p></blockquote><h4 id="1-2-3-编写SQL语句"><a href="#1-2-3-编写SQL语句" class="headerlink" title="1.2.3 编写SQL语句"></a>1.2.3 编写SQL语句</h4><p>在创建出来的springboot工程中，在引导类所在包下，在创建一个包 mapper。在mapper包下创建一个接口 UserMapper ，这是一个持久层接口（Mybatis的持久层接口规范一般都叫 XxxMapper）。</p><p><img src="/.com//image-20221209175843651.png" alt="image-20221209175843651"></p><p>UserMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询所有用户数据</span></span><br><span class="line">    <span class="meta">@Select(&quot;select id, name, age, gender, phone from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Mapper注解：表示是mybatis中的Mapper接口</p><ul><li>程序运行时：框架会自动生成接口的实现类对象(代理对象)，并给交Spring的IOC容器管理</li></ul><p> @Select注解：代表的就是select查询，用于书写select查询语句</p></blockquote><h4 id="1-2-4-单元测试"><a href="#1-2-4-单元测试" class="headerlink" title="1.2.4 单元测试"></a>1.2.4 单元测试</h4><p>在创建出来的SpringBoot工程中，在src下的test目录下，已经自动帮我们创建好了测试类 ，并且在测试类上已经添加了注解 @SpringBootTest，代表该测试类已经与SpringBoot整合。 </p><p>该测试类在运行时，会自动通过引导类加载Spring的环境（IOC容器）。我们要测试那个bean对象，就可以直接通过@Autowired注解直接将其注入进行，然后就可以测试了。 </p><p>测试类代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisQuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.list();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=1, name=&#x27;白眉鹰王&#x27;, age=55, gender=1, phone=&#x27;18800000000&#x27;&#125;</span><br><span class="line">User&#123;id=2, name=&#x27;金毛狮王&#x27;, age=45, gender=1, phone=&#x27;18800000001&#x27;&#125;</span><br><span class="line">User&#123;id=3, name=&#x27;青翼蝠王&#x27;, age=38, gender=1, phone=&#x27;18800000002&#x27;&#125;</span><br><span class="line">User&#123;id=4, name=&#x27;紫衫龙王&#x27;, age=42, gender=2, phone=&#x27;18800000003&#x27;&#125;</span><br><span class="line">User&#123;id=5, name=&#x27;光明左使&#x27;, age=37, gender=1, phone=&#x27;18800000004&#x27;&#125;</span><br><span class="line">User&#123;id=6, name=&#x27;光明右使&#x27;, age=48, gender=1, phone=&#x27;18800000005&#x27;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-3-解决SQL警告与提示"><a href="#1-3-解决SQL警告与提示" class="headerlink" title="1.3 解决SQL警告与提示"></a>1.3 解决SQL警告与提示</h3><p>默认我们在UserMapper接口上加的@Select注解中编写SQL语句是没有提示的。 如果想让idea给我们提示对应的SQL语句，我们需要在IDEA中配置与MySQL数据库的链接。 </p><p>默认我们在UserMapper接口上的@Select注解中编写SQL语句是没有提示的。如果想让idea给出提示，可以做如下配置：</p><p><img src="/.com//image-20221210143348119.png" alt="image-20221210143348119"></p><p>配置完成之后，发现SQL语句中的关键字有提示了，但还存在不识别表名(列名)的情况：</p><p><img src="/.com//image-20221210143934318.png" alt="image-20221210143934318"></p><blockquote><p>产生原因：Idea和数据库没有建立连接，不识别表信息</p><p>解决方案：在Idea中配置MySQL数据库连接</p></blockquote><p><img src="/.com//image-20221210144139792.png" alt="image-20221210144139792"> </p><blockquote><p>在配置的时候指定连接那个数据库，如上图所示连接的就是mybatis数据库。</p></blockquote><h2 id="2-JDBC介绍-了解"><a href="#2-JDBC介绍-了解" class="headerlink" title="2. JDBC介绍(了解)"></a>2. JDBC介绍(了解)</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>通过Mybatis的快速入门，我们明白了，通过Mybatis可以很方便的进行数据库的访问操作。但是大家要明白，其实java语言操作数据库呢，只能通过一种方式：使用sun公司提供的 JDBC 规范。</p><blockquote><p>Mybatis框架，就是对原始的JDBC程序的封装。 </p></blockquote><p>那到底什么是JDBC呢，接下来，我们就来介绍一下。</p><p>JDBC： ( Java DataBase Connectivity )，就是使用Java语言操作关系型数据库的一套API。</p><p><img src="/.com//image-20221210144811961.png" alt="image-20221210144811961"> </p><blockquote><p>本质：</p><ul><li><p>sun公司官方定义的一套操作所有关系型数据库的规范，即接口。</p></li><li><p>各个数据库厂商去实现这套接口，提供数据库驱动jar包。</p></li><li><p>我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</p></li></ul></blockquote><h3 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h3><p>下面我们看看原始的JDBC程序是如何操作数据库的。操作步骤如下：</p><ol><li>注册驱动</li><li>获取连接对象</li><li>执行SQL语句，返回执行结果</li><li>处理执行结果</li><li>释放资源</li></ol><blockquote><p>在pom.xml文件中已引入MySQL驱动依赖，我们直接编写JDBC代码即可</p></blockquote><p>JDBC具体代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdbc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取数据库连接</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行SQL</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement(); <span class="comment">//操作SQL的对象</span></span><br><span class="line">        String sql=<span class="string">&quot;select id,name,age,gender,phone from user&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);<span class="comment">//SQL查询结果会封装在ResultSet对象中</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//集合对象（用于存储User对象）</span></span><br><span class="line">        <span class="comment">//4. 处理SQL执行结果</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//取出一行记录中id、name、age、gender、phone下的数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">short</span> <span class="variable">age</span> <span class="operator">=</span> rs.getShort(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="type">short</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getShort(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">            <span class="comment">//把一行记录中的数据，封装到User对象中</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id,name,age,gender,phone);</span><br><span class="line">            userList.add(user);<span class="comment">//User对象添加到集合</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        rs.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DriverManager(类)：数据库驱动管理类。</p><ul><li><p>作用：</p><ol><li><p>注册驱动</p></li><li><p>创建java代码和数据库之间的连接，即获取Connection对象</p></li></ol></li></ul><p>Connection(接口)：建立数据库连接的对象</p><ul><li>作用：用于建立java程序和数据库之间的连接</li></ul><p>Statement(接口)： 数据库操作对象(执行SQL语句的对象)。</p><ul><li>作用：用于向数据库发送sql语句</li></ul><p>ResultSet(接口)：结果集对象（一张虚拟表）</p><ul><li>作用：sql查询语句的执行结果会封装在ResultSet中</li></ul></blockquote><p>通过上述代码，我们看到直接基于JDBC程序来操作数据库，代码实现非常繁琐，所以在项目开发中，我们很少使用。  在项目开发中，通常会使用Mybatis这类的高级技术来操作数据库，从而简化数据库操作、提高开发效率。</p><h3 id="2-3-问题分析"><a href="#2-3-问题分析" class="headerlink" title="2.3 问题分析"></a>2.3 问题分析</h3><p>原始的JDBC程序，存在以下几点问题：</p><ol><li>数据库链接的四要素(驱动、链接、用户名、密码)全部硬编码在java代码中</li><li>查询结果的解析及封装非常繁琐</li><li>每一次查询数据库都需要获取连接,操作完毕后释放连接, 资源浪费, 性能降低</li></ol><p><img src="/.com//image-20221210153407998.png" alt="image-20221210153407998"></p><h3 id="2-4-技术对比"><a href="#2-4-技术对比" class="headerlink" title="2.4 技术对比"></a>2.4 技术对比</h3><p>分析了JDBC的缺点之后，我们再来看一下在mybatis中，是如何解决这些问题的：</p><ol><li><p>数据库连接四要素(驱动、链接、用户名、密码)，都配置在springboot默认的配置文件 application.properties中</p></li><li><p>查询结果的解析及封装，由mybatis自动完成映射封装，我们无需关注</p></li><li><p>在mybatis中使用了数据库连接池技术，从而避免了频繁的创建连接、销毁连接而带来的资源浪费。</p></li></ol><p><img src="/.com//image-20221210154324151.png" alt="image-20221210154324151"></p><blockquote><p>使用SpringBoot+Mybatis的方式操作数据库，能够提升开发效率、降低资源浪费</p></blockquote><p>而对于Mybatis来说，我们在开发持久层程序操作数据库时，需要重点关注以下两个方面：</p><ol><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#驱动类名称</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#数据库连接的url</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="comment">#连接数据库的用户名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#连接数据库的密码</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure></li><li><p>Mapper接口（编写SQL语句）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select id, name, age, gender, phone from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-数据库连接池"><a href="#3-数据库连接池" class="headerlink" title="3. 数据库连接池"></a>3. 数据库连接池</h2><p>在前面我们所讲解的mybatis中，使用了数据库连接池技术，避免频繁的创建连接、销毁连接而带来的资源浪费。</p><p>下面我们就具体的了解下数据库连接池。</p><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p><img src="/.com//image-20221210160341852.png" alt="image-20221210160341852"></p><blockquote><p>没有使用数据库连接池：</p><ul><li>客户端执行SQL语句：要先创建一个新的连接对象，然后执行SQL语句，SQL语句执行后又需要关闭连接对象从而释放资源，每次执行SQL时都需要创建连接、销毁链接，这种频繁的重复创建销毁的过程是比较耗费计算机的性能。</li></ul></blockquote><p><img src="/.com//image-20221210161016314.png" alt="image-20221210161016314"></p><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p><ul><li>程序在启动时，会在数据库连接池(容器)中，创建一定数量的Connection对象</li></ul><p>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</p><ul><li>客户端在执行SQL时，先从连接池中获取一个Connection对象，然后在执行SQL语句，SQL语句执行完之后，释放Connection时就会把Connection对象归还给连接池（Connection对象可以复用）</li></ul><p>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</p><ul><li>客户端获取到Connection对象了，但是Connection对象并没有去访问数据库(处于空闲)，数据库连接池发现Connection对象的空闲时间 &gt; 连接池中预设的最大空闲时间，此时数据库连接池就会自动释放掉这个连接对象</li></ul><p>数据库连接池的好处：</p><ol><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ol><h3 id="3-2-产品"><a href="#3-2-产品" class="headerlink" title="3.2 产品"></a>3.2 产品</h3><p>要怎么样实现数据库连接池呢？</p><ul><li><p>官方(sun)提供了数据库连接池标准（javax.sql.DataSource接口）</p><ul><li><p>功能：获取连接 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br></pre></td></tr></table></figure></li><li><p>第三方组织必须按照DataSource接口实现</p></li></ul></li></ul><p>常见的数据库连接池：</p><ul><li>C3P0</li><li>DBCP</li><li>Druid</li><li>Hikari (springboot默认)</li></ul><p>现在使用更多的是：Hikari、Druid  （性能更优越）</p><ul><li>Hikari（追光者） [默认的连接池]</li></ul><p><img src="/.com//image-20220901144923251.png" alt="image-20220901144923251"> </p><ul><li><p>Druid（德鲁伊）</p><ul><li><p>Druid连接池是阿里巴巴开源的数据库连接池项目 </p></li><li><p>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p></li></ul></li></ul><p>​</p><p>如果我们想把默认的数据库连接池切换为Druid数据库连接池，只需要完成以下两步操作即可：</p><blockquote><p>参考官方地址：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p></blockquote><ol><li>在pom.xml文件中引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Druid连接池依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在application.properties中引入数据库连接配置</li></ol><p>方式1：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.druid.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">spring.datasource.druid.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.druid.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><h2 id="4-lombok"><a href="#4-lombok" class="headerlink" title="4. lombok"></a>4. lombok</h2><h3 id="4-1-介绍-1"><a href="#4-1-介绍-1" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>Lombok是一个实用的Java类库，可以通过简单的注解来简化和消除一些必须有但显得很臃肿的Java代码。</p><p><img src="/.com//image-20221210164641266.png" alt="image-20221210164641266"></p><blockquote><p>通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率。</p></blockquote><table><thead><tr><th><strong>注解</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>@Getter&#x2F;@Setter</td><td>为所有的属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易阅读的  toString 方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写 equals 方法和  hashCode 方法</td></tr><tr><td>@Data</td><td>提供了更综合的生成代码功能（@Getter  + @Setter + @ToString + @EqualsAndHashCode）</td></tr><tr><td>@NoArgsConstructor</td><td>为实体类生成无参的构造器方法</td></tr><tr><td>@AllArgsConstructor</td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td></tr></tbody></table><h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3><p>第1步：在pom.xml文件中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在springboot的父工程中，已经集成了lombok并指定了版本号，故当前引入依赖时不需要指定version --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第2步：在实体类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short age;</span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在实体类上添加了@Data注解，那么这个类在编译时期，就会生成getter&#x2F;setter、equals、hashcode、toString等方法。</p><p><img src="/.com//image-20221210170733921.png" alt="image-20221210170733921"></p></blockquote><p>说明：@Data注解中不包含全参构造方法，通常在实体类上，还会添加上：全参构造、无参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//getter方法、setter方法、toString方法、hashCode方法、equals方法</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//无参构造</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//全参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short age;</span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lombok的注意事项：</p><ul><li>Lombok会在编译时，会自动生成对应的java代码</li><li>在使用lombok时，还需要安装一个lombok的插件（新版本的IDEA中自带）</li></ul><p><img src="/.com//image-20221210165506359.png" alt="image-20221210165506359"></p><h2 id="5-Mybatis基础操作"><a href="#5-Mybatis基础操作" class="headerlink" title="5. Mybatis基础操作"></a>5. Mybatis基础操作</h2><p>学习完mybatis入门后，我们继续学习mybatis基础操作。</p><h3 id="5-1-需求"><a href="#5-1-需求" class="headerlink" title="5.1 需求"></a>5.1 需求</h3><p>需求说明：</p><ul><li>根据资料中提供的《tlias智能学习辅助系统》页面原型及需求，完成员工管理的需求开发。</li></ul><p><img src="/.com//image-20221210180155700.png" alt="image-20221210180155700"> </p><p><img src="/.com//image-20221210180343288.png" alt="image-20221210180343288"></p><p><img src="/.com//image-20221210180515206.png" alt="image-20221210180515206"></p><p>通过分析以上的页面原型和需求，我们确定了功能列表：</p><ol><li><p>查询</p><ul><li>根据主键ID查询</li><li>条件查询</li></ul></li><li><p>新增</p></li><li><p>更新</p></li><li><p>删除</p><ul><li>根据主键ID删除</li><li>根据主键ID批量删除</li></ul></li></ol><h3 id="5-2-准备"><a href="#5-2-准备" class="headerlink" title="5.2 准备"></a>5.2 准备</h3><p>实施前的准备工作：</p><ol><li>准备数据库表</li><li>创建一个新的springboot工程，选择引入对应的起步依赖（mybatis、mysql驱动、lombok）</li><li>application.properties中引入数据库连接信息</li><li>创建对应的实体类 Emp（实体类属性采用驼峰命名）</li><li>准备Mapper接口 EmpMapper</li></ol><p><strong>准备数据库表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">-- 部门管理</span><br><span class="line">create table dept</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name        varchar(10) not null unique comment &#x27;部门名称&#x27;,</span><br><span class="line">    create_time datetime    not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime    not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;部门表&#x27;;</span><br><span class="line">-- 部门表测试数据</span><br><span class="line">insert into dept (id, name, create_time, update_time)</span><br><span class="line">values (1, &#x27;学工部&#x27;, now(), now()),</span><br><span class="line">       (2, &#x27;教研部&#x27;, now(), now()),</span><br><span class="line">       (3, &#x27;咨询部&#x27;, now(), now()),</span><br><span class="line">       (4, &#x27;就业部&#x27;, now(), now()),</span><br><span class="line">       (5, &#x27;人事部&#x27;, now(), now());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 员工管理</span><br><span class="line">create table emp</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,</span><br><span class="line">    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,</span><br><span class="line">    name        varchar(10)      not null comment &#x27;姓名&#x27;,</span><br><span class="line">    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,</span><br><span class="line">    image       varchar(300) comment &#x27;图像&#x27;,</span><br><span class="line">    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,</span><br><span class="line">    entrydate   date comment &#x27;入职时间&#x27;,</span><br><span class="line">    dept_id     int unsigned comment &#x27;部门ID&#x27;,</span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;员工表&#x27;;</span><br><span class="line">-- 员工表测试数据</span><br><span class="line">INSERT INTO emp (id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time)</span><br><span class="line">VALUES </span><br><span class="line">(1, &#x27;jinyong&#x27;, &#x27;123456&#x27;, &#x27;金庸&#x27;, 1, &#x27;1.jpg&#x27;, 4, &#x27;2000-01-01&#x27;, 2, now(), now()),</span><br><span class="line">(2, &#x27;zhangwuji&#x27;, &#x27;123456&#x27;, &#x27;张无忌&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, 2, now(), now()),</span><br><span class="line">(3, &#x27;yangxiao&#x27;, &#x27;123456&#x27;, &#x27;杨逍&#x27;, 1, &#x27;3.jpg&#x27;, 2, &#x27;2008-05-01&#x27;, 2, now(), now()),</span><br><span class="line">(4, &#x27;weiyixiao&#x27;, &#x27;123456&#x27;, &#x27;韦一笑&#x27;, 1, &#x27;4.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, 2, now(), now()),</span><br><span class="line">(5, &#x27;changyuchun&#x27;, &#x27;123456&#x27;, &#x27;常遇春&#x27;, 1, &#x27;5.jpg&#x27;, 2, &#x27;2012-12-05&#x27;, 2, now(), now()),</span><br><span class="line">(6, &#x27;xiaozhao&#x27;, &#x27;123456&#x27;, &#x27;小昭&#x27;, 2, &#x27;6.jpg&#x27;, 3, &#x27;2013-09-05&#x27;, 1, now(), now()),</span><br><span class="line">(7, &#x27;jixiaofu&#x27;, &#x27;123456&#x27;, &#x27;纪晓芙&#x27;, 2, &#x27;7.jpg&#x27;, 1, &#x27;2005-08-01&#x27;, 1, now(), now()),</span><br><span class="line">(8, &#x27;zhouzhiruo&#x27;, &#x27;123456&#x27;, &#x27;周芷若&#x27;, 2, &#x27;8.jpg&#x27;, 1, &#x27;2014-11-09&#x27;, 1, now(), now()),</span><br><span class="line">(9, &#x27;dingminjun&#x27;, &#x27;123456&#x27;, &#x27;丁敏君&#x27;, 2, &#x27;9.jpg&#x27;, 1, &#x27;2011-03-11&#x27;, 1, now(), now()),</span><br><span class="line">(10, &#x27;zhaomin&#x27;, &#x27;123456&#x27;, &#x27;赵敏&#x27;, 2, &#x27;10.jpg&#x27;, 1, &#x27;2013-09-05&#x27;, 1, now(), now()),</span><br><span class="line">(11, &#x27;luzhangke&#x27;, &#x27;123456&#x27;, &#x27;鹿杖客&#x27;, 1, &#x27;11.jpg&#x27;, 5, &#x27;2007-02-01&#x27;, 3, now(), now()),</span><br><span class="line">(12, &#x27;hebiweng&#x27;, &#x27;123456&#x27;, &#x27;鹤笔翁&#x27;, 1, &#x27;12.jpg&#x27;, 5, &#x27;2008-08-18&#x27;, 3, now(), now()),</span><br><span class="line">(13, &#x27;fangdongbai&#x27;, &#x27;123456&#x27;, &#x27;方东白&#x27;, 1, &#x27;13.jpg&#x27;, 5, &#x27;2012-11-01&#x27;, 3, now(), now()),</span><br><span class="line">(14, &#x27;zhangsanfeng&#x27;, &#x27;123456&#x27;, &#x27;张三丰&#x27;, 1, &#x27;14.jpg&#x27;, 2, &#x27;2002-08-01&#x27;, 2, now(), now()),</span><br><span class="line">(15, &#x27;yulianzhou&#x27;, &#x27;123456&#x27;, &#x27;俞莲舟&#x27;, 1, &#x27;15.jpg&#x27;, 2, &#x27;2011-05-01&#x27;, 2, now(), now()),</span><br><span class="line">(16, &#x27;songyuanqiao&#x27;, &#x27;123456&#x27;, &#x27;宋远桥&#x27;, 1, &#x27;16.jpg&#x27;, 2, &#x27;2010-01-01&#x27;, 2, now(), now()),</span><br><span class="line">(17, &#x27;chenyouliang&#x27;, &#x27;123456&#x27;, &#x27;陈友谅&#x27;, 1, &#x27;17.jpg&#x27;, NULL, &#x27;2015-03-21&#x27;, NULL, now(), now());</span><br></pre></td></tr></table></figure><p><strong>创建一个新的springboot工程，选择引入对应的起步依赖（mybatis、mysql驱动、lombok）</strong></p><p><img src="/.com//image-20221210182008131.png" alt="image-20221210182008131"></p><p><strong>application.properties中引入数据库连接信息</strong></p><blockquote><p>提示：可以把之前项目中已有的配置信息复制过来即可</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#驱动类名称</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#数据库连接的url</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="comment">#连接数据库的用户名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#连接数据库的密码</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><p><strong>创建对应的实体类Emp（实体类属性采用驼峰命名）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Short job;</span><br><span class="line">    <span class="keyword">private</span> LocalDate entrydate;     <span class="comment">//LocalDate类型对应数据表中的date类型</span></span><br><span class="line">    <span class="keyword">private</span> Integer deptId;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;<span class="comment">//LocalDateTime类型对应数据表中的datetime类型</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>准备Mapper接口：EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@Mapper注解：表示当前接口为mybatis中的Mapper接口</span></span><br><span class="line"><span class="comment">  程序运行时会自动创建接口的实现类对象(代理对象)，并交给Spring的IOC容器管理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成以上操作后，项目工程结构目录如下：</p><p><img src="/.com//image-20221210182500817.png" alt="image-20221210182500817"></p><h3 id="5-3-删除"><a href="#5-3-删除" class="headerlink" title="5.3 删除"></a>5.3 删除</h3><h4 id="5-3-1-功能实现"><a href="#5-3-1-功能实现" class="headerlink" title="5.3.1 功能实现"></a>5.3.1 功能实现</h4><p>页面原型：</p><p><img src="/.com//image-20221210183336095.png" alt="image-20221210183336095"></p><blockquote><p>当我们点击后面的”删除”按钮时，前端页面会给服务端传递一个参数，也就是该行数据的ID。 我们接收到ID后，根据ID删除数据即可。</p></blockquote><p><strong>功能：根据主键删除数据</strong></p><ul><li>SQL语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除id=17的数据</span><br><span class="line">delete from emp where id = 17;</span><br></pre></td></tr></table></figure><blockquote><p>Mybatis框架让程序员更关注于SQL语句</p></blockquote><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@Delete(&quot;delete from emp where id = 17&quot;)</span></span><br><span class="line">    <span class="comment">//public void delete();</span></span><br><span class="line">    <span class="comment">//以上delete操作的SQL语句中的id值写成固定的17，就表示只能删除id=17的用户数据</span></span><br><span class="line">    <span class="comment">//SQL语句中的id值不能写成固定数值，需要变为动态的数值</span></span><br><span class="line">    <span class="comment">//解决方案：在delete方法中添加一个参数(用户id)，将方法中的参数，传给SQL语句</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id    用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span><span class="comment">//使用#&#123;key&#125;方式获取方法中的参数值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Delete注解：用于编写delete操作的SQL语句</p></blockquote><blockquote><p>如果mapper接口方法形参只有一个普通类型的参数，#{…} 里面的属性名可以随便写，如：#{id}、#{value}。但是建议保持名字一致。</p></blockquote><ul><li>测试<ul><li>在单元测试类中通过@Autowired注解注入EmpMapper类型对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//从Spring的IOC容器中，获取类型是EmpMapper的对象并注入</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用删除方法</span></span><br><span class="line">        empMapper.delete(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-日志输入"><a href="#5-3-2-日志输入" class="headerlink" title="5.3.2 日志输入"></a>5.3.2 日志输入</h4><p>在Mybatis当中我们可以借助日志，查看到sql语句的执行、执行传递的参数以及执行结果。具体操作如下：</p><ol><li><p>打开application.properties文件</p></li><li><p>开启mybatis的日志，并指定输出到控制台</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定mybatis输出日志的位置, 输出控制台</span></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>开启日志之后，我们再次运行单元测试，可以看到在控制台中，输出了以下的SQL语句信息：</p><p><img src="/.com//image-20220901164225644.png" alt="image-20220901164225644"> </p><blockquote><p>但是我们发现输出的SQL语句：delete from emp where id &#x3D; ?，我们输入的参数16并没有在后面拼接，id的值是使用?进行占位。那这种SQL语句我们称为预编译SQL。</p></blockquote><h4 id="5-3-3-预编译SQL"><a href="#5-3-3-预编译SQL" class="headerlink" title="5.3.3 预编译SQL"></a>5.3.3 预编译SQL</h4><h5 id="5-3-3-1-介绍"><a href="#5-3-3-1-介绍" class="headerlink" title="5.3.3.1 介绍"></a>5.3.3.1 介绍</h5><p>预编译SQL有两个优势：</p><ol><li>性能更高</li><li>更安全(防止SQL注入)</li></ol><p><img src="/.com//image-20221210202222206.png" alt="image-20221210202222206"></p><blockquote><p>性能更高：预编译SQL，编译一次之后会将编译后的SQL语句缓存起来，后面再次执行这条语句时，不会再次编译。（只是输入的参数不同）</p><p>更安全(防止SQL注入)：将敏感字进行转义，保障SQL的安全性。</p></blockquote><h5 id="5-3-3-2-SQL注入"><a href="#5-3-3-2-SQL注入" class="headerlink" title="5.3.3.2 SQL注入"></a>5.3.3.2 SQL注入</h5><p>SQL注入：是通过操作输入的数据来修改事先定义好的SQL语句，以达到执行代码对服务器进行攻击的方法。</p><blockquote><p>由于没有对用户输入进行充分检查，而SQL又是拼接而成，在用户输入参数时，在参数中添加一些SQL关键字，达到改变SQL运行结果的目的，也可以完成恶意攻击。</p></blockquote><p><strong>测试1：使用资料中提供的程序，来验证SQL注入问题</strong></p><p><img src="/.com//image-20221210205419634.png" alt="image-20221210205419634"></p><p>第1步：进入到DOS</p><p><img src="/.com//image-20221211124744203.png" alt="image-20221211124744203"></p><p><img src="/.com//image-20221211124840720.png" alt="image-20221211124840720"></p><p>第2步：执行以下命令，启动程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动存在SQL注入的程序</span></span><br><span class="line">java <span class="literal">-jar</span> sql_Injection_demo<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar </span><br></pre></td></tr></table></figure><p><img src="/.com//image-20221210211605231.png" alt="image-20221210211605231"></p><p>第3步：打开浏览器输入<code>http://localhost:9090/login.html</code></p><p><img src="/.com//image-20221210212406527.png" alt="image-20221210212406527"></p><p>发现竟然能够登录成功：</p><p><img src="/.com//image-20221210212511915.png" alt="image-20221210212511915"></p><p>以上操作为什么能够登录成功呢？</p><ul><li>由于没有对用户输入内容进行充分检查，而SQL又是字符串拼接方式而成，在用户输入参数时，在参数中添加一些SQL关键字，达到改变SQL运行结果的目的，从而完成恶意攻击。</li></ul><p><img src="/.com//image-20221210213311518.png" alt="image-20221210213311518"></p><blockquote><p><img src="/.com//image-20221210214431228.png" alt="image-20221210214431228"></p><p>用户在页面提交数据的时候人为的添加一些特殊字符，使得sql语句的结构发生了变化，最终可以在没有用户名或者密码的情况下进行登录。</p></blockquote><p><strong>测试2：使用资料中提供的程序，来验证SQL注入问题</strong></p><p>第1步：进入到DOS</p><p>第2步：执行以下命令，启动程序：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动解决了SQL注入的程序</span></span><br><span class="line">java <span class="literal">-jar</span> sql_prepared_demo<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar</span><br></pre></td></tr></table></figure><p>第3步：打开浏览器输入<code>http://localhost:9090/login.html</code></p><p><img src="/.com//image-20221210212406527.png" alt="image-20221210212406527"></p><p>发现无法登录：</p><p><img src="/.com//image-20221211125751981.png" alt="image-20221211125751981"></p><p>以上操作SQL语句的执行：</p><p><img src="/.com//image-20221211130011973.png" alt="image-20221211130011973"></p><blockquote><p>把整个<code>&#39; or &#39;1&#39;=&#39;1</code>作为一个完整的参数，赋值给第2个问号（<code>&#39; or &#39;1&#39;=&#39;1</code>进行了转义，只当做字符串使用）</p></blockquote><h5 id="5-3-3-3-参数占位符"><a href="#5-3-3-3-参数占位符" class="headerlink" title="5.3.3.3 参数占位符"></a>5.3.3.3 参数占位符</h5><p>在Mybatis中提供的参数占位符有两种：${…} 、#{…}</p><ul><li><p>#{…}</p><ul><li>执行SQL时，会将#{…}替换为?，生成预编译SQL，会自动设置参数值</li><li>使用时机：参数传递，都使用#{…}</li></ul></li><li><p>${…}</p><ul><li>拼接SQL。直接将参数拼接在SQL语句中，存在SQL注入问题</li><li>使用时机：如果对表名、列表进行动态设置时使用</li></ul></li></ul><blockquote><p>注意事项：在项目开发中，建议使用#{…}，生成预编译SQL，防止SQL注入安全。</p></blockquote><h3 id="5-4-新增"><a href="#5-4-新增" class="headerlink" title="5.4 新增"></a>5.4 新增</h3><p>功能：新增员工信息</p><p><img src="/.com//image-20221211134239610.png" alt="image-20221211134239610"></p><h4 id="5-4-1-基本新增"><a href="#5-4-1-基本新增" class="headerlink" title="5.4.1 基本新增"></a>5.4.1 基本新增</h4><p>员工表结构：</p><p><img src="/.com//image-20221211134746319.png" alt="image-20221211134746319"></p><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) <span class="keyword">values</span> (<span class="string">&#x27;songyuanqiao&#x27;</span>,<span class="string">&#x27;宋远桥&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2012-10-09&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2022-10-01 10:00:00&#x27;</span>,<span class="string">&#x27;2022-10-01 10:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：#{…} 里面写的名称是对象的属性名</p></blockquote><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.mapper.EmpMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Emp;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建员工对象</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setUsername(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        emp.setImage(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        emp.setGender((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setJob((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//调用添加方法</span></span><br><span class="line">        empMapper.insert(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>日志输出：</p><p><img src="/.com//image-20221211140222240.png" alt="image-20221211140222240"></p></blockquote><h4 id="5-4-2-主键返回"><a href="#5-4-2-主键返回" class="headerlink" title="5.4.2 主键返回"></a>5.4.2 主键返回</h4><p>概念：在数据添加成功后，需要获取插入数据库数据的主键。</p><blockquote><p>如：添加套餐数据时，还需要维护套餐菜品关系表数据。</p><p><img src="/.com//image-20221211150353385.png" alt="image-20221211150353385"></p><p>业务场景：在前面讲解到的苍穹外卖菜品与套餐模块的表结构，菜品与套餐是多对多的关系，一个套餐对应多个菜品。既然是多对多的关系，是不是有一张套餐菜品中间表来维护它们之间的关系。</p><p><img src="/.com//image-20221212093655389.png" alt="image-20221212093655389"></p><p>在添加套餐的时候，我们需要在界面当中来录入套餐的基本信息，还需要来录入套餐与菜品的关联信息。这些信息录入完毕之后，我们一点保存，就需要将套餐的信息以及套餐与菜品的关联信息都需要保存到数据库当中。其实具体的过程包括两步，首先第一步先需要将套餐的基本信息保存了，接下来第二步再来保存套餐与菜品的关联信息。套餐与菜品的关联信息就是往中间表当中来插入数据，来维护它们之间的关系。而中间表当中有两个外键字段，一个是菜品的ID，就是当前菜品的ID，还有一个就是套餐的ID，而这个套餐的 ID 指的就是此次我所添加的套餐的ID，所以我们在第一步保存完套餐的基本信息之后，就需要将套餐的主键值返回来供第二步进行使用。这个时候就需要用到主键返回功能。</p></blockquote><p>那要如何实现在插入数据之后返回所插入行的主键值呢？</p><ul><li>默认情况下，执行插入操作时，是不会主键值返回的。如果我们想要拿到主键值，需要在Mapper接口中的方法上添加一个Options注解，并在注解中指定属性useGeneratedKeys&#x3D;true和keyProperty&#x3D;”实体类属性名”</li></ul><p>主键返回代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//会自动将生成的主键值，赋值给emp对象的id属性</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建员工对象</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setUsername(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;杰克&quot;</span>);</span><br><span class="line">        emp.setImage(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        emp.setGender((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setJob((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//调用添加方法</span></span><br><span class="line">        empMapper.insert(emp);</span><br><span class="line"></span><br><span class="line">        System.out.println(emp.getDeptId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-更新"><a href="#5-5-更新" class="headerlink" title="5.5 更新"></a>5.5 更新</h3><p>功能：修改员工信息</p><p><img src="/.com//image-20221212095605863.png" alt="image-20221212095605863"></p><blockquote><p>点击”编辑”按钮后，会查询所在行记录的员工信息，并把员工信息回显在修改员工的窗体上(下个知识点学习)</p><p>在修改员工的窗体上，可以修改的员工数据：用户名、员工姓名、性别、图像、职位、入职日期、归属部门</p><p>思考：在修改员工数据时，要以什么做为条件呢？</p><p>答案：员工id</p></blockquote><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> username <span class="operator">=</span> <span class="string">&#x27;linghushaoxia&#x27;</span>, name <span class="operator">=</span> <span class="string">&#x27;令狐少侠&#x27;</span>, gender <span class="operator">=</span> <span class="number">1</span> , image <span class="operator">=</span> <span class="string">&#x27;1.jpg&#x27;</span> , job <span class="operator">=</span> <span class="number">2</span>, entrydate <span class="operator">=</span> <span class="string">&#x27;2012-01-01&#x27;</span>, dept_id <span class="operator">=</span> <span class="number">2</span>, update_time <span class="operator">=</span> <span class="string">&#x27;2022-10-01 12:12:12&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id修改员工信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update emp set username=#&#123;username&#125;, name=#&#123;name&#125;, gender=#&#123;gender&#125;, image=#&#123;image&#125;, job=#&#123;job&#125;, entrydate=#&#123;entrydate&#125;, dept_id=#&#123;deptId&#125;, update_time=#&#123;updateTime&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//要修改的员工信息</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setId(<span class="number">23</span>);</span><br><span class="line">        emp.setUsername(<span class="string">&quot;songdaxia&quot;</span>);</span><br><span class="line">        emp.setPassword(<span class="literal">null</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;老宋&quot;</span>);</span><br><span class="line">        emp.setImage(<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">        emp.setGender((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setJob((<span class="type">short</span>)<span class="number">2</span>);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(<span class="number">2012</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        emp.setCreateTime(<span class="literal">null</span>);</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//调用方法，修改员工数据</span></span><br><span class="line">        empMapper.update(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-查询"><a href="#5-6-查询" class="headerlink" title="5.6 查询"></a>5.6 查询</h3><h4 id="5-6-1-根据ID查询"><a href="#5-6-1-根据ID查询" class="headerlink" title="5.6.1 根据ID查询"></a>5.6.1 根据ID查询</h4><p>在员工管理的页面中，当我们进行更新数据时，会点击 “编辑” 按钮，然后此时会发送一个请求到服务端，会根据Id查询该员工信息，并将员工数据回显在页面上。</p><p><img src="/.com//image-20221212101331292.png" alt="image-20221212101331292"> </p><p>SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp;</span><br></pre></td></tr></table></figure><p>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> empMapper.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果：</p><p><img src="/.com//image-20221212103004961.png" alt="image-20221212103004961"></p><p>而在测试的过程中，我们会发现有几个字段(deptId、createTime、updateTime)是没有数据值的</p></blockquote><h4 id="5-6-2-数据封装"><a href="#5-6-2-数据封装" class="headerlink" title="5.6.2 数据封装"></a>5.6.2 数据封装</h4><p>我们看到查询返回的结果中大部分字段是有值的，但是deptId，createTime，updateTime这几个字段是没有值的，而数据库中是有对应的字段值的，这是为什么呢？</p><p><img src="/.com//image-20221212103124490.png" alt="image-20221212103124490"></p><p>原因如下： </p><ul><li>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装。</li><li>如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</li></ul><p> 解决方案：</p><ol><li>起别名</li><li>结果映射</li><li>开启驼峰命名</li></ol><p><strong>起别名</strong>：在SQL语句中，对不一样的列名起别名，别名和实体类属性名一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, &quot; +</span></span><br><span class="line"><span class="meta">        &quot;dept_id AS deptId, create_time AS createTime, update_time AS updateTime &quot; +</span></span><br><span class="line"><span class="meta">        &quot;from emp &quot; +</span></span><br><span class="line"><span class="meta">        &quot;where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>再次执行测试类：</p><p><img src="/.com//image-20221212111027396.png" alt="image-20221212111027396"></p></blockquote><p><strong>手动结果映射</strong>：通过 @Results及@Result 进行手动结果映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Results(&#123;@Result(column = &quot;dept_id&quot;, property = &quot;deptId&quot;),</span></span><br><span class="line"><span class="meta">          @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;),</span></span><br><span class="line"><span class="meta">          @Result(column = &quot;update_time&quot;, property = &quot;updateTime&quot;)&#125;)</span></span><br><span class="line"><span class="meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>@Results源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Results &#123;</span><br><span class="line">String <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">Result[] value() <span class="keyword">default</span> &#123;&#125;;  <span class="comment">//Result类型的数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Result源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Repeatable(Results.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Result &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;<span class="comment">//表示当前列是否为主键（true:是主键）</span></span><br><span class="line"></span><br><span class="line">String <span class="title function_">column</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;<span class="comment">//指定表中字段名</span></span><br><span class="line"></span><br><span class="line">String <span class="title function_">property</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;<span class="comment">//指定类中属性名</span></span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; javaType() <span class="keyword">default</span> <span class="keyword">void</span>.class;</span><br><span class="line"></span><br><span class="line">JdbcType <span class="title function_">jdbcType</span><span class="params">()</span> <span class="keyword">default</span> JdbcType.UNDEFINED;</span><br><span class="line"></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">TypeHandler</span>&gt; typeHandler() <span class="keyword">default</span> UnknownTypeHandler.class;</span><br><span class="line"></span><br><span class="line">One <span class="title function_">one</span><span class="params">()</span> <span class="keyword">default</span> <span class="meta">@One</span>;</span><br><span class="line"></span><br><span class="line">Many <span class="title function_">many</span><span class="params">()</span> <span class="keyword">default</span> <span class="meta">@Many</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>**开启驼峰命名(推荐)**：如果字段名与属性名符合驼峰命名规则，mybatis会自动通过驼峰命名规则映射</p><blockquote><p>驼峰命名规则：   abc_xyz    &#x3D;&gt;   abcXyz</p><ul><li>表中字段名：abc_xyz</li><li>类中属性名：abcXyz</li></ul></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在application.properties中添加：</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><blockquote><p>要使用驼峰命名前提是 实体类的属性 与 数据库表中的字段名严格遵守驼峰命名。</p></blockquote><h4 id="5-6-3-条件查询"><a href="#5-6-3-条件查询" class="headerlink" title="5.6.3 条件查询"></a>5.6.3 条件查询</h4><p>在员工管理的列表页面中，我们需要根据条件查询员工信息，查询条件包括：姓名、性别、入职时间。 </p><p><img src="/.com//image-20221212113422924.png" alt="image-20221212113422924"></p><p>通过页面原型以及需求描述我们要实现的查询：</p><ul><li>姓名：要求支持模糊匹配</li><li>性别：要求精确匹配</li><li>入职时间：要求进行范围查询</li><li>根据最后修改时间进行降序排序</li></ul><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span> </span><br><span class="line">      <span class="keyword">and</span> gender <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line">      <span class="keyword">and</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2020-01-01 &#x27;</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>接口方法：</p><ul><li>方式一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from emp &quot; +</span></span><br><span class="line"><span class="meta">            &quot;where name like &#x27;%$&#123;name&#125;%&#x27; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;and gender = #&#123;gender&#125; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;and entrydate between #&#123;begin&#125; and #&#123;end&#125; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;order by update_time desc&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="/.com//image-20221212115149151.png" alt="image-20221212115149151"></p><p>以上方式注意事项：</p><ol><li><p>方法中的形参名和SQL语句中的参数占位符名保持一致</p></li><li><p>模糊查询使用${…}进行字符串拼接，这种方式呢，由于是字符串拼接，并不是预编译的形式，所以效率不高、且存在sql注入风险。</p></li></ol></blockquote><ul><li>方式二（解决SQL注入风险）<ul><li>使用MySQL提供的字符串拼接函数：concat(‘%’ , ‘关键字’ , ‘%’)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from emp &quot; +</span></span><br><span class="line"><span class="meta">            &quot;where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;and gender = #&#123;gender&#125; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;and entrydate between #&#123;begin&#125; and #&#123;end&#125; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;order by update_time desc&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>执行结果：生成的SQL都是预编译的SQL语句（性能高、安全）</p><p><img src="/.com//image-20221212120006242.png" alt="image-20221212120006242"></p></blockquote><h4 id="5-6-4-参数名说明"><a href="#5-6-4-参数名说明" class="headerlink" title="5.6.4 参数名说明"></a>5.6.4 参数名说明</h4><p>在上面我们所编写的条件查询功能中，我们需要保证接口中方法的形参名和SQL语句中的参数占位符名相同。</p><blockquote><p>当方法中的形参名和SQL语句中的占位符参数名不相同时，就会出现以下问题：</p><p><img src="/.com//image-20221212150611796.png" alt="image-20221212150611796"></p></blockquote><p>参数名在不同的SpringBoot版本中，处理方案还不同：</p><ul><li>在springBoot的2.x版本（保证参数名一致）</li></ul><p><img src="/.com//image-20221212151156273.png" alt="image-20221212151156273"></p><blockquote><p>springBoot的父工程对compiler编译插件进行了默认的参数parameters配置，使得在编译时，会在生成的字节码文件中保留原方法形参的名称，所以#{…}里面可以直接通过形参名获取对应的值</p><p><img src="/.com//image-20221212151411154.png" alt="image-20221212151411154"></p></blockquote><ul><li>在springBoot的1.x版本&#x2F;单独使用mybatis（使用@Param注解来指定SQL语句中的参数名）</li></ul><p><img src="/.com//image-20221212151628715.png" alt="image-20221212151628715"></p><blockquote><p>在编译时，生成的字节码文件当中，不会保留Mapper接口中方法的形参名称，而是使用var1、var2、…这样的形参名字，此时要获取参数值时，就要通过@Param注解来指定SQL语句中的参数名</p><p><img src="/.com//image-20221212151736274.png" alt="image-20221212151736274"></p></blockquote><ol start="2"><li>Mybatis的XML配置文件</li></ol><p>Mybatis的开发有两种方式：</p><ol><li>注解</li><li>XML</li></ol><h2 id="6-XML"><a href="#6-XML" class="headerlink" title="6.XML"></a>6.XML</h2><h3 id="6-1-XML配置文件规范"><a href="#6-1-XML配置文件规范" class="headerlink" title="6.1 XML配置文件规范"></a>6.1 XML配置文件规范</h3><p>使用Mybatis的注解方式，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句，也就是将SQL语句写在XML配置文件中。</p><p>在Mybatis中使用XML映射文件方式开发，需要符合一定的规范：</p><ul><li><p><strong>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）</strong></p></li><li><p><strong>XML映射文件的namespace属性为Mapper接口全限定名一致</strong></p></li><li><p><strong>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致。</strong></p></li></ul><p><img src="/.com//image-20221212153529732.png" alt="image-20221212153529732"></p><blockquote><p>&lt;select&gt;标签：就是用于编写select查询语句的。</p><ul><li>resultType属性，指的是查询返回的单条记录所封装的类型。</li></ul></blockquote><p><img src="/.com//image-20240309163347721.png" alt="image-20240309163347721"></p><p>由于XML映射文件中的id绑定的list方法 而list方法封装的是Emp  所以 resultType为Emp的全类名</p><p><img src="/.com//image-20240309163504652.png" alt="image-20240309163504652"></p><h3 id="6-2-XML配置文件实现"><a href="#6-2-XML配置文件实现" class="headerlink" title="6.2 XML配置文件实现"></a>6.2 XML配置文件实现</h3><p>第1步：创建XML映射文件</p><p><img src="/.com//image-20221212154908306.png" alt="image-20221212154908306"></p><p><img src="/.com//image-20221212155304635.png" alt="image-20221212155304635"></p><p><img src="/.com//image-20221212155544404.png" alt="image-20221212155544404"></p><p>第2步：编写XML映射文件</p><blockquote><p>xml映射文件中的dtd约束，直接从mybatis官网复制即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置：XML映射文件的namespace属性为Mapper接口全限定名</p><p><img src="/.com//image-20221212160316644.png" alt="image-20221212160316644"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置：XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致</p><p><img src="/.com//image-20221212163528787.png" alt="image-20221212163528787"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">              and gender = #&#123;gender&#125;</span><br><span class="line">              and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">        order by update_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>运行测试类，执行结果：</p><p><img src="/.com//image-20221212163719534.png" alt="image-20221212163719534"></p></blockquote><h3 id="6-3-MybatisX的使用"><a href="#6-3-MybatisX的使用" class="headerlink" title="6.3 MybatisX的使用"></a>6.3 MybatisX的使用</h3><p>MybatisX是一款基于IDEA的快速开发Mybatis的插件，为效率而生。</p><p>MybatisX的安装：</p><p><img src="/.com//image-20221213120923252.png" alt="image-20221213120923252"></p><p>可以通过MybatisX快速定位：</p><p><img src="/.com//image-20221213121521406.png" alt="image-20221213121521406"></p><blockquote><p>MybatisX的使用在后续学习中会继续分享</p></blockquote><p>学习了Mybatis中XML配置文件的开发方式了，大家可能会存在一个疑问：到底是使用注解方式开发还是使用XML方式开发？</p><blockquote><p>官方说明：<a href="https://mybatis.net.cn/getting-started.html">https://mybatis.net.cn/getting-started.html</a></p><p><img src="/.com//image-20220901173948645.png" alt="image-20220901173948645"> </p></blockquote><p><strong>结论：</strong>*<em><strong>使用Mybatis的注解，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句</strong>。</em>*</p><h2 id="7-Mybatis动态SQL"><a href="#7-Mybatis动态SQL" class="headerlink" title="7. Mybatis动态SQL"></a>7. Mybatis动态SQL</h2><h3 id="7-1-什么是动态SQL"><a href="#7-1-什么是动态SQL" class="headerlink" title="7.1 什么是动态SQL"></a>7.1 什么是动态SQL</h3><p>在页面原型中，列表上方的条件是动态的，是可以不传递的，也可以只传递其中的1个或者2个或者全部。</p><p><img src="/.com//image-20220901172933012.png"></p><p><img src="/.com//image-20220901173203491.png" alt="image-20220901173203491"></p><p>而在我们刚才编写的SQL语句中，我们会看到，我们将三个条件直接写死了。 如果页面只传递了参数姓名name 字段，其他两个字段 性别 和 入职时间没有传递，那么这两个参数的值就是null。</p><p>此时，执行的SQL语句为：</p><p><img src="/.com//image-20220901173431554.png" alt="image-20220901173431554"> </p><p>这个查询结果是不正确的。正确的做法应该是：传递了参数，再组装这个查询条件；如果没有传递参数，就不应该组装这个查询条件。</p><p>比如：如果姓名输入了”张”, 对应的SQL为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>如果姓名输入了”张”,，性别选择了”男”，则对应的SQL为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>SQL语句会随着用户的输入或外部条件的变化而变化，我们称为：<strong>动态SQL</strong>。</p><p><img src="/.com//image-20221213122623278.png" alt="image-20221213122623278"></p><p>在Mybatis中提供了很多实现动态SQL的标签，我们学习Mybatis中的动态SQL就是掌握这些动态SQL标签。</p><h3 id="7-2-动态SQL-if"><a href="#7-2-动态SQL-if" class="headerlink" title="7.2 动态SQL-if"></a>7.2 动态SQL-if</h3><p><code>&lt;if&gt;</code>：用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件表达式&quot;</span>&gt;</span></span><br><span class="line">   要拼接的sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，我们就通过<code>&lt;if&gt;</code>标签来改造之前条件查询的案例。</p><h4 id="7-2-1-条件查询"><a href="#7-2-1-条件查询" class="headerlink" title="7.2.1 条件查询"></a>7.2.1 条件查询</h4><p>示例：把SQL语句改造为动态SQL方式</p><ul><li>原有的SQL语句</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">              and gender = #&#123;gender&#125;</span><br><span class="line">              and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">        order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>动态SQL语句</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        where</span><br><span class="line">    </span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                 name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                 and gender = #&#123;gender&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//性别数据为null、开始时间和结束时间也为null</span></span><br><span class="line">    List&lt;Emp&gt; list = empMapper.list(<span class="string">&quot;张&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(Emp emp : list)&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行的SQL语句： </p><p><img src="/.com//image-20221213140353285.png" alt="image-20221213140353285"></p></blockquote><p>下面呢，我们修改测试方法中的代码，再次进行测试，观察执行情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//姓名为null</span></span><br><span class="line">    List&lt;Emp&gt; list = empMapper.list(<span class="literal">null</span>, (<span class="type">short</span>)<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(Emp emp : list)&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/.com//image-20221213141139015.png" alt="image-20221213141139015"> </p><p><img src="/.com//image-20221213141253355.png" alt="image-20221213141253355"> </p><p>再次修改测试方法中的代码，再次进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//传递的数据全部为null</span></span><br><span class="line">    List&lt;Emp&gt; list = empMapper.list(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(Emp emp : list)&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的SQL语句：</p><p><img src="/.com//image-20221213143854434.png" alt="image-20221213143854434"></p><p>以上问题的解决方案：使用<code>&lt;where&gt;</code>标签代替SQL语句中的where关键字</p><ul><li><code>&lt;where&gt;</code>只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- if做为where标签的子元素 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                 and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                 and gender = #&#123;gender&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//只有性别</span></span><br><span class="line">    List&lt;Emp&gt; list = empMapper.list(<span class="literal">null</span>, (<span class="type">short</span>)<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(Emp emp : list)&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行的SQL语句：</p><p><img src="/.com//image-20221213141909455.png" alt="image-20221213141909455"></p></blockquote><h4 id="7-2-2-更新员工"><a href="#7-2-2-更新员工" class="headerlink" title="7.2.2 更新员工"></a>7.2.2 更新员工</h4><p>案例：完善更新员工功能，修改为动态更新员工数据信息</p><ul><li>动态更新员工信息，如果更新时传递有值，则更新；如果更新时没有传递值，则不更新</li><li>解决方案：动态SQL</li></ul><p>修改Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">//删除@Update注解编写的SQL语句</span></span><br><span class="line">    <span class="comment">//update操作的SQL语句编写在Mapper映射文件中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改Mapper映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--更新操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update emp</span><br><span class="line">        set</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                username=#&#123;username&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                name=#&#123;name&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                gender=#&#123;gender&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null&quot;</span>&gt;</span></span><br><span class="line">                image=#&#123;image&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span></span><br><span class="line">                job=#&#123;job&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;entrydate != null&quot;</span>&gt;</span></span><br><span class="line">                entrydate=#&#123;entrydate&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptId != null&quot;</span>&gt;</span></span><br><span class="line">                dept_id=#&#123;deptId&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span></span><br><span class="line">                update_time=#&#123;updateTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//要修改的员工信息</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setId(<span class="number">20</span>);</span><br><span class="line">        emp.setUsername(<span class="string">&quot;Tom111&quot;</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;汤姆111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，修改员工数据</span></span><br><span class="line">        empMapper.update(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行的SQL语句：</p><p><img src="/.com//image-20221213152533851.png" alt="image-20221213152533851"></p></blockquote><p>再次修改测试方法，观察SQL语句执行情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//要修改的员工信息</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setId(<span class="number">20</span>);</span><br><span class="line">        emp.setUsername(<span class="string">&quot;Tom222&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//调用方法，修改员工数据</span></span><br><span class="line">        empMapper.update(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行的SQL语句：</p><p><img src="/.com//image-20221213152850322.png" alt="image-20221213152850322"></p></blockquote><p>以上问题的解决方案：使用<code>&lt;set&gt;</code>标签代替SQL语句中的set关键字</p><ul><li><code>&lt;set&gt;</code>：动态的在SQL语句中插入set关键字，并会删掉额外的逗号。（用于update语句中）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--更新操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update emp</span><br><span class="line">        <span class="comment">&lt;!-- 使用set标签，代替update语句中的set关键字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                username=#&#123;username&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                name=#&#123;name&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                gender=#&#123;gender&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null&quot;</span>&gt;</span></span><br><span class="line">                image=#&#123;image&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span></span><br><span class="line">                job=#&#123;job&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;entrydate != null&quot;</span>&gt;</span></span><br><span class="line">                entrydate=#&#123;entrydate&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptId != null&quot;</span>&gt;</span></span><br><span class="line">                dept_id=#&#123;deptId&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span></span><br><span class="line">                update_time=#&#123;updateTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>再次执行测试方法，执行的SQL语句：</p><p><img src="/.com//image-20221213153329553.png" alt="image-20221213153329553"></p></blockquote><p><strong>小结</strong></p><ul><li><p><code>&lt;if&gt;</code></p><ul><li><p>用于判断条件是否成立，如果条件为true，则拼接SQL</p></li><li><p>形式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span> … <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>&lt;where&gt;</code></p><ul><li>where元素只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR</li></ul></li><li><p><code>&lt;set&gt;</code></p><ul><li>动态地在行首插入 SET 关键字，并会删掉额外的逗号。（用在update语句中）</li></ul></li></ul><h4 id="7-3-动态SQL-foreach"><a href="#7-3-动态SQL-foreach" class="headerlink" title="7.3 动态SQL-foreach"></a>7.3 动态SQL-foreach</h4><p>案例：员工删除功能（既支持删除单条记录，又支持批量删除）</p><p><img src="/.com//image-20220901181751004.png" alt="image-20220901181751004"> </p><p>SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from emp where id in (1,2,3);</span><br></pre></td></tr></table></figure><p>Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">//批量删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(List&lt;Integer&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML映射文件：</p><ul><li>使用<code>&lt;foreach&gt;</code>遍历deleteByIds方法中传递的参数ids集合</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;集合名称&quot;</span> <span class="attr">item</span>=<span class="string">&quot;集合遍历出来的元素/项&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;每一次遍历使用的分隔符&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">open</span>=<span class="string">&quot;遍历开始前拼接的片段&quot;</span> <span class="attr">close</span>=<span class="string">&quot;遍历结束后拼接的片段&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">        delete from emp where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span> </span><br></pre></td></tr></table></figure><blockquote><p><img src="/.com//image-20221213165710141.png" alt="image-20221213165710141"></p></blockquote><blockquote><p>执行的SQL语句：</p><p><img src="/.com//image-20221213164957636.png" alt="image-20221213164957636"></p></blockquote><h4 id="7-4-动态SQL-sql-include"><a href="#7-4-动态SQL-sql-include" class="headerlink" title="7.4 动态SQL-sql&amp;include"></a>7.4 动态SQL-sql&amp;include</h4><p>问题分析：</p><ul><li>在xml映射文件中配置的SQL，有时可能会存在很多重复的片段，此时就会存在很多冗余的代码</li></ul><p><img src="/.com//image-20220901182204358.png"></p><p><img src="/.com//image-20220901182249421.png"></p><p>我们可以对重复的代码片段进行抽取，将其通过<code>&lt;sql&gt;</code>标签封装到一个SQL片段，然后再通过<code>&lt;include&gt;</code>标签进行引用。</p><ul><li><p><code>&lt;sql&gt;</code>：定义可重用的SQL片段</p></li><li><p><code>&lt;include&gt;</code>：通过属性refid，指定包含的SQL片段</p></li></ul><p><img src="/.com//image-20221213171244796.png" alt="image-20221213171244796"></p><p>SQL片段： 抽取重复的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;commonSelect&quot;</span>&gt;</span></span><br><span class="line"> select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后通过<code>&lt;include&gt;</code> 标签在原来抽取的地方进行引用。操作如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">![image-20220826161735076](./JavaWeb/image-20220826161735076.png)<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;commonSelect&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">            and gender = #&#123;gender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">            and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通常当我们访问某一个网页时 登陆后才能访问后端操作数据 但我们目前实现的这个 不管登不登陆都可以访问后端操作数据</span><br></pre></td></tr></table></figure><p>为什么会出现这个问题 是因为我们缺少了最重要的一步：<strong>登录校验</strong></p><p><img src="/.com//image-20230105180811717.png"></p><p>什么是登录校验？</p><ul><li><p>所谓登录校验，指的是我们在服务器端接收到浏览器发送过来的请求之后，首先我们要对请求进行校验。先要校验一下用户登录了没有，如果用户已经登录了，就直接执行对应的业务操作就可以了；如果用户没有登录，此时就不允许他执行相关的业务操作，直接给前端响应一个错误的结果，最终跳转到登录页面，要求他登录成功之后，再来访问对应的数据。</p></li><li><p><img src="/.com//image-20230105194710533.png"></p><p>那应该怎么来实现登录校验的操作呢？具体的实现思路可以分为两部分：</p><ol><li>在员工登录成功后，需要将用户登录成功的信息存起来，记录用户已经登录成功的标记。</li><li>在浏览器发起请求时，需要在服务端进行统一拦截，拦截后进行登录校验。</li></ol></li></ul><p>我们要完成以上操作，会涉及到web开发中的两个技术：</p><ol><li>会话技术</li><li>统一拦截技术</li></ol><h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><p>什么是会话？</p><ul><li><p>在我们日常生活当中，会话指的就是谈话、交谈。</p></li><li><p>在web开发当中，会话指的就是浏览器与服务器之间的一次连接，我们就称为一次会话。</p></li></ul><blockquote><p>在用户打开浏览器第一次访问服务器的时候，这个会话就建立了，直到有任何一方断开连接，此时会话就结束了。在一次会话当中，是可以包含多次请求和响应的。</p><p>比如：打开了浏览器来访问web服务器上的资源（浏览器不能关闭、服务器不能断开）</p><ul><li>第1次：访问的是登录的接口，完成登录操作</li><li>第2次：访问的是部门管理接口，查询所有部门数据</li><li>第3次：访问的是员工管理接口，查询员工数据</li></ul><p>只要浏览器和服务器都没有关闭，以上3次请求都属于一次会话当中完成的。</p></blockquote><p><img src="/.com//image-20230105203827355.png" alt="image-20230105203827355"></p><p>会话跟踪技术有两种：</p><ol><li>Cookie（客户端会话跟踪技术）<ul><li>数据存储在客户端浏览器当中</li></ul></li><li>Session（服务端会话跟踪技术）<ul><li>数据存储在储在服务端</li></ul></li><li>令牌技术</li></ol><h3 id="方案一-Cookie"><a href="#方案一-Cookie" class="headerlink" title="方案一 - Cookie"></a>方案一 - Cookie</h3><p>cookie 是客户端会话跟踪技术，它是存储在客户端浏览器的，我们使用 cookie 来跟踪会话，我们就可以在浏览器第一次发起请求来请求服务器的时候，我们在服务器端来设置一个cookie。</p><p>比如第一次请求了登录接口，登录接口执行完成之后，我们就可以设置一个cookie，在 cookie 当中我们就可以来存储用户相关的一些数据信息。比如我可以在 cookie 当中来存储当前登录用户的用户名，用户的ID。</p><p>服务器端在给客户端在响应数据的时候，会<strong>自动</strong>的将 cookie 响应给浏览器，浏览器接收到响应回来的 cookie 之后，会<strong>自动</strong>的将 cookie 的值存储在浏览器本地。接下来在后续的每一次请求当中，都会将浏览器本地所存储的 cookie <strong>自动</strong>地携带到服务端。</p><p><img src="/.com//image-20230112101901417.png" alt="image-20230112101901417"> </p><p>接下来在服务端我们就可以获取到 cookie 的值。我们可以去判断一下这个 cookie 的值是否存在，如果不存在这个cookie，就说明客户端之前是没有访问登录接口的；如果存在 cookie 的值，就说明客户端之前已经登录完成了。这样我们就可以基于 cookie 在同一次会话的不同请求之间来共享数据。</p><p>我刚才在介绍流程的时候，用了 3 个自动：</p><ul><li><p>服务器会 <strong>自动</strong> 的将 cookie 响应给浏览器。</p></li><li><p>浏览器接收到响应回来的数据之后，会 <strong>自动</strong> 的将 cookie 存储在浏览器本地。</p></li><li><p>在后续的请求当中，浏览器会 <strong>自动</strong> 的将 cookie 携带到服务器端。</p></li></ul><p><strong>为什么这一切都是自动化进行的？</strong></p><p>是因为 cookie 它是 HTP 协议当中所支持的技术，而各大浏览器厂商都支持了这一标准。在 HTTP 协议官方给我们提供了一个响应头和请求头：</p><ul><li><p>响应头 Set-Cookie ：设置Cookie数据的</p></li><li><p>请求头 Cookie：携带Cookie数据的</p></li></ul><p><img src="/.com//image-20230112101804878.png" alt="image-20230112101804878"> </p><p><strong>代码测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置Cookie</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/c1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">cookie1</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">        response.addCookie(<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;login_username&quot;</span>,<span class="string">&quot;itheima&quot;</span>)); <span class="comment">//设置Cookie/响应Cookie</span></span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Cookie</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/c2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">cookie2</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;login_username&quot;</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;login_username: &quot;</span>+cookie.getValue()); <span class="comment">//输出name为login_username的cookie</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>A. 访问c1接口，设置Cookie，<a href="http://localhost:8080/c1">http://localhost:8080/c1</a></p><p><img src="/.com//image-20230112105410076.png" alt="image-20230112105410076"> </p><p>我们可以看到，设置的cookie，通过<strong>响应头Set-Cookie</strong>响应给浏览器，并且浏览器会将Cookie，存储在浏览器端。</p><p><img src="/.com//image-20230112105538131.png" alt="image-20230112105538131"> </p><p>B. 访问c2接口 <a href="http://localhost:8080/c2%EF%BC%8C%E6%AD%A4%E6%97%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E8%87%AA%E5%8A%A8%E7%9A%84%E5%B0%86Cookie%E6%90%BA%E5%B8%A6%E5%88%B0%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%8C%E6%98%AF%E9%80%9A%E8%BF%87**%E8%AF%B7%E6%B1%82%E5%A4%B4Cookie**%EF%BC%8C%E6%90%BA%E5%B8%A6%E7%9A%84%E3%80%82">http://localhost:8080/c2，此时浏览器会自动的将Cookie携带到服务端，是通过**请求头Cookie**，携带的。</a></p><p><img src="/.com//image-20230112105658486.png" alt="image-20230112105658486"> </p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a><strong>优缺点</strong></h4><ul><li>优点：HTTP协议中支持的技术（像Set-Cookie 响应头的解析以及 Cookie 请求头数据的携带，都是浏览器自动进行的，是无需我们手动操作的）</li><li>缺点：<ul><li>移动端APP(Android、IOS)中无法使用Cookie</li><li>不安全，用户可以自己禁用Cookie</li><li>Cookie不能跨域</li></ul></li></ul><blockquote><p>跨域介绍：</p><p>​ <img src="/.com//image-20230112103840467.png" alt="image-20230112103840467" style="zoom:80%;"> </p><ul><li>现在的项目，大部分都是前后端分离的，前后端最终也会分开部署，前端部署在服务器 192.168.150.200 上，端口 80，后端部署在 192.168.150.100上，端口 8080</li><li>我们打开浏览器直接访问前端工程，访问url：<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a></li><li>然后在该页面发起请求到服务端，而服务端所在地址不再是localhost，而是服务器的IP地址192.168.150.100，假设访问接口地址为：<a href="http://192.168.150.100:8080/login">http://192.168.150.100:8080/login</a></li><li>那此时就存在跨域操作了，因为我们是在 <a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> 这个页面上访问了<a href="http://192.168.150.100:8080/login">http://192.168.150.100:8080/login</a> 接口</li><li>此时如果服务器设置了一个Cookie，这个Cookie是不能使用的，因为Cookie无法跨域</li></ul><p>区分跨域的维度：</p><ul><li>协议</li><li>IP&#x2F;协议</li><li>端口</li></ul><p>只要上述的三个维度有任何一个维度不同，那就是跨域操作</p><p>举例：</p><p>​<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="https://192.168.150.200/login">https://192.168.150.200/login</a>   [协议不同，跨域]</p><p>​<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="http://192.168.150.100/login">http://192.168.150.100/login</a>     [IP不同，跨域]</p><p>​<a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="http://192.168.150.200:8080/login">http://192.168.150.200:8080/login</a>   [端口不同，跨域]</p><p>​    <a href="http://192.168.150.200/login.html">http://192.168.150.200/login.html</a> ———-&gt; <a href="http://192.168.150.200/login">http://192.168.150.200/login</a>     [不跨域]   </p></blockquote><h3 id="方案二-Session"><a href="#方案二-Session" class="headerlink" title="方案二 - Session"></a>方案二 - Session</h3><p>前面介绍的时候，我们提到Session，它是服务器端会话跟踪技术，所以它是存储在服务器端的。而 Session 的底层其实就是基于我们刚才所介绍的 Cookie 来实现的。</p><ul><li><p>获取Session</p><p><img src="/.com//image-20230112105938545.png" alt="image-20230112105938545"> </p><p>如果我们现在要基于 Session 来进行会话跟踪，浏览器在第一次请求服务器的时候，我们就可以直接在服务器当中来获取到会话对象Session。如果是第一次请求Session ，会话对象是不存在的，这个时候服务器会自动的创建一个会话对象Session 。而每一个会话对象Session ，它都有一个ID（示意图中Session后面括号中的1，就表示ID），我们称之为 Session 的ID。</p></li><li><p>响应Cookie (JSESSIONID)</p><p><img src="/.com//image-20230112110441075.png" alt="image-20230112110441075"> </p><p>接下来，服务器端在给浏览器响应数据的时候，它会将 Session 的 ID 通过 Cookie 响应给浏览器。其实在响应头当中增加了一个 Set-Cookie 响应头。这个  Set-Cookie  响应头对应的值是不是cookie？ cookie 的名字是固定的 JSESSIONID 代表的服务器端会话对象 Session 的 ID。浏览器会自动识别这个响应头，然后自动将Cookie存储在浏览器本地。</p></li><li><p>查找Session</p><p><img src="/.com//image-20230112101943835.png" alt="image-20230112101943835"> </p><p>接下来，在后续的每一次请求当中，都会将 Cookie 的数据获取出来，并且携带到服务端。接下来服务器拿到JSESSIONID这个 Cookie 的值，也就是 Session 的ID。拿到 ID 之后，就会从众多的 Session 当中来找到当前请求对应的会话对象Session。</p><p>这样我们是不是就可以通过 Session 会话对象在同一次会话的多次请求之间来共享数据了？好，这就是基于 Session 进行会话跟踪的流程。</p></li></ul><p><strong>代码测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/s1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">session1</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;HttpSession-s1: &#123;&#125;&quot;</span>, session.hashCode());</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, <span class="string">&quot;tom&quot;</span>); <span class="comment">//往session中存储数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/s2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">session2</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        log.info(<span class="string">&quot;HttpSession-s2: &#123;&#125;&quot;</span>, session.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginUser</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;loginUser&quot;</span>); <span class="comment">//从session中获取数据</span></span><br><span class="line">        log.info(<span class="string">&quot;loginUser: &#123;&#125;&quot;</span>, loginUser);</span><br><span class="line">        <span class="keyword">return</span> Result.success(loginUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A. 访问 s1 接口，<a href="http://localhost:8080/s1">http://localhost:8080/s1</a></p><p><img src="/.com//image-20230112111004447.png" alt="image-20230112111004447"> </p><p>请求完成之后，在响应头中，就会看到有一个Set-Cookie的响应头，里面响应回来了一个Cookie，就是JSESSIONID，这个就是服务端会话对象 Session 的ID。</p><p>B. 访问 s2 接口，<a href="http://localhost:8080/s2">http://localhost:8080/s2</a></p><p><img src="/.com//image-20230112111137207.png" alt="image-20230112111137207"> </p><p>接下来，在后续的每次请求时，都会将Cookie的值，携带到服务端，那服务端呢，接收到Cookie之后，会自动的根据JSESSIONID的值，找到对应的会话对象Session。</p><p>那经过这两步测试，大家也会看到，在控制台中输出如下日志：</p><p><img src="/.com//image-20230112111328117.png" alt="image-20230112111328117"> </p><p>两次请求，获取到的Session会话对象的hashcode是一样的，就说明是同一个会话对象。而且，第一次请求时，往Session会话对象中存储的值，第二次请求时，也获取到了。 那这样，我们就可以通过Session会话对象，在同一个会话的多次请求之间来进行数据共享了。</p><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a><strong>优缺点</strong></h4><ul><li>优点：Session是存储在服务端的，安全</li><li>缺点：<ul><li>服务器集群环境下无法直接使用Session</li><li>移动端APP(Android、IOS)中无法使用Cookie</li><li>用户可以自己禁用Cookie</li><li>Cookie不能跨域</li></ul></li></ul><blockquote><p>PS：Session 底层是基于Cookie实现的会话跟踪，如果Cookie不可用，则该方案，也就失效了。</p></blockquote><blockquote><p>服务器集群环境为何无法使用Session？</p><p>​<img src="/.com//image-20230112112557480.png" alt="image-20230112112557480" style="zoom:67%;"> </p><ul><li>首先第一点，我们现在所开发的项目，一般都不会只部署在一台服务器上，因为一台服务器会存在一个很大的问题，就是单点故障。所谓单点故障，指的就是一旦这台服务器挂了，整个应用都没法访问了。</li></ul><p>​    <img src="/.com//image-20230112112740131.png" alt="image-20230112112740131"> </p><ul><li><p>所以在现在的企业项目开发当中，最终部署的时候都是以集群的形式来进行部署，也就是同一个项目它会部署多份。比如这个项目我们现在就部署了 3 份。</p></li><li><p>而用户在访问的时候，到底访问这三台其中的哪一台？其实用户在访问的时候，他会访问一台前置的服务器，我们叫负载均衡服务器，我们在后面项目当中会详细讲解。目前大家先有一个印象负载均衡服务器，它的作用就是将前端发起的请求均匀的分发给后面的这三台服务器。</p><p><img src="/.com//image-20230112113558810.png" alt="image-20230112113558810"> </p></li><li><p>此时假如我们通过 session 来进行会话跟踪，可能就会存在这样一个问题。用户打开浏览器要进行登录操作，此时会发起登录请求。登录请求到达负载均衡服务器，将这个请求转给了第一台 Tomcat 服务器。</p><p>Tomcat 服务器接收到请求之后，要获取到会话对象session。获取到会话对象 session 之后，要给浏览器响应数据，最终在给浏览器响应数据的时候，就会携带这么一个 cookie 的名字，就是 JSESSIONID ，下一次再请求的时候，是不是又会将 Cookie 携带到服务端？</p><p>好。此时假如又执行了一次查询操作，要查询部门的数据。这次请求到达负载均衡服务器之后，负载均衡服务器将这次请求转给了第二台 Tomcat 服务器，此时他就要到第二台 Tomcat 服务器当中。根据JSESSIONID 也就是对应的 session 的 ID 值，要找对应的 session 会话对象。</p><p>我想请问在第二台服务器当中有没有这个ID的会话对象 Session， 是没有的。此时是不是就出现问题了？我同一个浏览器发起了 2 次请求，结果获取到的不是同一个会话对象，这就是Session这种会话跟踪方案它的缺点，在服务器集群环境下无法直接使用Session。</p></li></ul></blockquote><p>大家会看到上面这两种传统的会话技术，在现在的企业开发当中是不是会存在很多的问题。 为了解决这些问题，在现在的企业开发当中，基本上都会采用第三种方案，通过令牌技术来进行会话跟踪。接下来我们就来介绍一下令牌技术，来看一下令牌技术又是如何跟踪会话的。</p><h3 id="方案三-令牌技术"><a href="#方案三-令牌技术" class="headerlink" title="方案三 - 令牌技术"></a>方案三 - 令牌技术</h3><p>这里我们所提到的令牌，其实它就是一个用户身份的标识，看似很高大上，很神秘，其实本质就是一个字符串。</p><p><img src="/.com//image-20230112102022634.png" alt="image-20230112102022634"> </p><p>如果通过令牌技术来跟踪会话，我们就可以在浏览器发起请求。在请求登录接口的时候，如果登录成功，我就可以生成一个令牌，令牌就是用户的合法身份凭证。接下来我在响应数据的时候，我就可以直接将令牌响应给前端。</p><p>接下来我们在前端程序当中接收到令牌之后，就需要将这个令牌存储起来。这个存储可以存储在 cookie 当中，也可以存储在其他的存储空间(比如：localStorage)当中。</p><p>接下来，在后续的每一次请求当中，都需要将令牌携带到服务端。携带到服务端之后，接下来我们就需要来校验令牌的有效性。如果令牌是有效的，就说明用户已经执行了登录操作，如果令牌是无效的，就说明用户之前并未执行登录操作。</p><p>此时，如果是在同一次会话的多次请求之间，我们想共享数据，我们就可以将共享的数据存储在令牌当中就可以了。</p><p><strong>优缺点</strong></p><ul><li>优点：<ul><li>支持PC端、移动端</li><li>解决集群环境下的认证问题</li><li>减轻服务器的存储压力（无需在服务器端存储）</li></ul></li><li>缺点：需要自己实现（包括令牌的生成、令牌的传递、令牌的校验）</li></ul><p><strong>针对于这三种方案，现在企业开发当中使用的最多的就是第三种令牌技术进行会话跟踪。而前面的这两种传统的方案，现在企业项目开发当中已经很少使用了。所以在我们的课程当中，我们也将会采用令牌技术来解决案例项目当中的会话跟踪问题。</strong></p><h4 id="JWT令牌技术"><a href="#JWT令牌技术" class="headerlink" title="JWT令牌技术"></a>JWT令牌技术</h4><ul><li><p><strong>全称</strong>：<code>Json Web Token</code></p></li><li><p><strong>定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息，用于数字签名的存在，这些信息是可靠的</strong></p></li><li><p><strong>组成</strong>：</p><ul><li><p>第一部分：Header(头)，记录令牌类型、签名算法等，例如：{“alg”:”HS256”,”type”:”JWT”}</p></li><li><p>第二部分：Payload(有效载荷)，携带一些自定义信息，默认信息等，例如：{“id”:”1”,”username”:”tom”}</p></li><li><p>第三部分：Signature(签名)，防止Token被篡改，确保安全性，将Header、Payload，并加入指定密钥，通过指定签名算法计算而来</p></li></ul></li></ul><p><img src="/.com//image-20240325110500548.png" alt="image-20240325110500548"></p><ul><li><strong>场景</strong>：登录认证<ol><li>登录成功后，生成令牌</li><li>后续每个请求，都需要携带jwt令牌，系统在每次请求处理之前，先校验令牌，通过后，在处理</li></ol></li></ul><p><img src="/.com//image-20240325110921704.png" alt="image-20240325110921704"></p><p><img src="/.com//image-20240325114101996.png" alt="image-20240325114101996"></p><h5 id="JWT令牌-生成"><a href="#JWT令牌-生成" class="headerlink" title="JWT令牌-生成"></a><strong>JWT令牌-生成</strong></h5><ul><li>要在pom文件中引入相关的依赖</li></ul><p><img src="/.com//image-20240325113642999.png" alt="image-20240325113642999"></p><ul><li><p>编写测试类</p><p><img src="/.com//image-20240325113707625.png" alt="image-20240325113707625"></p></li></ul><h5 id="JWT令牌-解析"><a href="#JWT令牌-解析" class="headerlink" title="JWT令牌-解析"></a>JWT令牌-解析</h5><p><img src="/.com//image-20240325113912663.png" alt="image-20240325113912663"></p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ul><li>JWT校验时使用的签名密钥，必须和生成JWT令牌时使用的密钥时配套的</li><li>如果JWT令牌解析校验时报错，则说明JWT令牌被篡改或失效了，令牌非法</li></ul><h4 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 概念：Filter过滤器，是JavaWeb三大组件（Servlet、Listener、Filter）之一</span><br><span class="line">-- 过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能</span><br><span class="line">-- 过滤器一般完成一些通用的操作，比如：登录校验、统一编码处理、敏感字符处理等</span><br></pre></td></tr></table></figure><h5 id="Filter快速入门"><a href="#Filter快速入门" class="headerlink" title="Filter快速入门"></a>Filter快速入门</h5><ul><li>定义Filter：定义一个类，实现Filter接口，并重写其所有方法</li><li>配置Filter：Filter类上加<code>@WebFilter</code>注解，配置拦截资源的路径，引导类上加<code>@ServletComponentScan</code>开启Sevlet组件支持</li></ul><p>Filter类</p><p><img src="/.com//image-20240325152707043.png" alt="image-20240325152707043"></p><p>引导类</p><p><img src="/.com//image-20240325152730300.png" alt="image-20240325152730300"></p><h5 id="详解（执行流程、拦截路径、过滤器链）"><a href="#详解（执行流程、拦截路径、过滤器链）" class="headerlink" title="详解（执行流程、拦截路径、过滤器链）"></a>详解（执行流程、拦截路径、过滤器链）</h5><p>1.执行流程</p><ul><li>请求&#x3D;&#x3D;&gt;放行前的逻辑&#x3D;&#x3D;&gt;放行&#x3D;&#x3D;&gt;访问Web资源&#x3D;&#x3D;&gt;放行后的逻辑</li></ul><p>2.拦截路径</p><ul><li>&#x2F;login</li><li>&#x2F;depts&#x2F;*</li><li>&#x2F;*</li></ul><p>3.过滤器链</p><ul><li>一个web应用中，配置了多个过滤器，就形成了一个过滤器链</li><li><img src="/.com//image-20240325154952548.png" alt="image-20240325154952548"></li></ul><h5 id="登录校验-Filter"><a href="#登录校验-Filter" class="headerlink" title="登录校验-Filter"></a>登录校验-Filter</h5><ul><li><strong>所有的请求，拦截到了之后，都需要校验令牌吗？</strong><ul><li>不是 有一个例外 登录请求 因为没登陆的时候是没有jwt令牌的</li></ul></li><li><strong>拦截到请求后，什么情况下可以放行，执行业务操作？</strong><ul><li>有令牌，且令牌校验通过（合法），否则都返回登录错误的结果</li></ul></li></ul><p>步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) Request;</span><br><span class="line">      <span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> (HttpServletResponse) Response;</span><br><span class="line"><span class="comment">//1.获取请求url</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getRequestURL().toString();</span><br><span class="line">      log.info(<span class="string">&quot;请求的url:&#123;&#125;&quot;</span>,url);</span><br><span class="line">      <span class="comment">//2.判断请求url中是否含有login，如果包含，则说明是登录请求，放行</span></span><br><span class="line">      <span class="keyword">if</span> (url.contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">          log.inf<span class="title function_">o</span><span class="params">(<span class="string">&quot;登陆操作，放行&quot;</span>)</span>;</span><br><span class="line">          Chain.doFilter(Request,Response);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//3.获取请求头中的令牌</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">      <span class="comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span></span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasLength(jwt)) &#123;  <span class="comment">//判断jwt令牌是否为null或空字符串</span></span><br><span class="line">          log.info(<span class="string">&quot;请求头token为空，返回未登录的信息&quot;</span>);</span><br><span class="line">          <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">          <span class="comment">//手动转换为json格式---&gt;阿里巴巴提供的fastJSON工具类</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">          resp.getWriter().write(notLogin);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//5.解析token，如果解析失败，返回错误结果（未登录）</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          JwtUtils.parseJWT(jwt);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">//jwt解析失败</span></span><br><span class="line">          log.info(<span class="string">&quot;令牌解析失败，返回未登录的信息&quot;</span>);</span><br><span class="line">          <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">          <span class="comment">//手动转换为json格式---&gt;阿里巴巴提供的fastJSON工具类</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">          resp.getWriter().write(notLogin);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//6.放行</span></span><br><span class="line">      log.info(<span class="string">&quot;令牌合法，放行通过&quot;</span>);</span><br><span class="line">      Chain.doFilter(Request,Response);</span><br></pre></td></tr></table></figure><h4 id="Interceptor拦截器"><a href="#Interceptor拦截器" class="headerlink" title="Interceptor拦截器"></a>Interceptor拦截器</h4><ul><li>概念：是一种动态拦截方法调用的机制，类似于过滤器，Spring框架中提供，用来动态拦截控制器方法的执行</li><li>作用：拦截请求，在指定的方法调用前后，根据业务需求执行预先设定的代码</li></ul><h5 id="简介-快速入门"><a href="#简介-快速入门" class="headerlink" title="简介&amp;快速入门"></a>简介&amp;快速入门</h5><ol><li><p>定义拦截器，实现HandlerInterceptor接口，并重写其所有方法</p><p><img src="/.com//image-20240325215327083.png" alt="image-20240325215327083"></p></li><li><p>注册拦截器</p><p><img src="/.com//image-20240325215313458.png" alt="image-20240325215313458"></p></li></ol><h5 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h5><ol><li><strong>拦截器-拦截器路径</strong><ul><li>拦截器可以根据需求，配置不同的拦截路径</li><li><img src="/.com//image-20240325215510710.png"></li><li><img src="/.com//image-20240325215526255.png"></li></ul></li><li><strong>拦截器-执行流程</strong><ul><li><img src="/.com//image-20240326085139308.png" alt="image-20240326085139308"></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Filter 和 Interceptor</span><br><span class="line">接口规范不同：过滤器需要实现Filter接口，而拦截器需要实现HandlerInterceptor接口</span><br><span class="line">拦截范围不同：过滤器Filter会拦截所有资源，而Interceptor只会拦截Spring环境中的资源</span><br></pre></td></tr></table></figure><h5 id="登录校验-interceptor"><a href="#登录校验-interceptor" class="headerlink" title="登录校验-interceptor"></a>登录校验-interceptor</h5><p>步骤：</p><p>​在Filter的基础上进行更改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> req.getRequestURL().toString();</span><br><span class="line">        log.info(<span class="string">&quot;请求的url:&#123;&#125;&quot;</span>,url);</span><br><span class="line">        <span class="comment">//2.判断请求url中是否含有login，如果包含，则说明是登录请求，放行</span></span><br><span class="line">        <span class="keyword">if</span> (url.contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;登陆操作，放行&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.获取请求头中的令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasLength(jwt)) &#123;  <span class="comment">//判断jwt令牌是否为null或空字符串</span></span><br><span class="line">            log.info(<span class="string">&quot;请求头token为空，返回未登录的信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//手动转换为json格式---&gt;阿里巴巴提供的fastJSON工具类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            resp.getWriter().write(notLogin);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.解析token，如果解析失败，返回错误结果（未登录）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.parseJWT(jwt);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">//jwt解析失败</span></span><br><span class="line">            log.info(<span class="string">&quot;令牌解析失败，返回未登录的信息&quot;</span>);</span><br><span class="line">            <span class="type">Result</span> <span class="variable">error</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//手动转换为json格式---&gt;阿里巴巴提供的fastJSON工具类</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">notLogin</span> <span class="operator">=</span> JSONObject.toJSONString(error);</span><br><span class="line">            resp.getWriter().write(notLogin);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        log.info(<span class="string">&quot;令牌合法，放行通过&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><img src="/.com//image-20240327183856718.png" alt="image-20240327183856718"></p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ul><li>程序开发过程中不可避免的会遇到异常现象</li><li><img src="/.com//image-20240325221510596.png" alt="image-20240325221510596"></li></ul><p>当出现异常时，Mapper操作数据库的时候 出错的话，谁调用mapper 异常就会跑给谁</p><p><img src="/.com//image-20240325221628681.png" alt="image-20240325221628681"></p><p>其中Mapper出错 异常会抛给Service  再抛给Controller</p><ul><li>出现异常。该如何处理？<ul><li>方案一：再Controller的方法中进行try…catch处理 &#x3D;&#x3D;&#x3D;&#x3D;&gt;代码臃肿，不推荐</li><li>方案二：全局异常处理器&#x3D;&#x3D;&#x3D;&#x3D;&gt;简单、优雅、推荐</li></ul></li><li>什么时全局异常处理器<ul><li>当异常抛给Controller时，全局异常处理器 会捕获这个异常</li><li><img src="/.com//image-20240325221926403.png" alt="image-20240325221926403"><ul><li>1.添加RestControllerAdvice注解 <code>@RestControllerAdvice = @ControllerAdvice + @RestBody</code>  这个注解代表定义了一个全局异常处理器</li><li>2.ExceptionHandler代表的是捕获什么类型的异常</li></ul></li></ul></li></ul><p><img src="/.com//image-20240325222242901.png" alt="image-20240325222242901"></p><p><strong>全局处理器最后会响应一个错误的结果</strong></p><h1 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h1><ul><li>注解：<code>@Transactional</code></li><li>位置：业务层(service)的方法上、类上、接口上</li><li>作用：将当前方法交给spring进行事务管理，方法执行前，开启事务；成功执行完毕，提交事务；回滚事务</li></ul><p><img src="/.com//image-20240326091451610.png" alt="image-20240326091451610"></p><h2 id="事务属性"><a href="#事务属性" class="headerlink" title="事务属性"></a>事务属性</h2><h3 id="回滚rollback"><a href="#回滚rollback" class="headerlink" title="回滚rollback"></a>回滚rollback</h3><ul><li><code>@rollbackFor</code></li><li>默认情况下，只有出现@RuntimeException才会回滚，rollbackFor属性用于控制出现何种异常类型，回滚事务</li><li><img src="/.com//image-20240326093053231.png" alt="image-20240326093053231"></li></ul><h3 id="传播行为propagation"><a href="#传播行为propagation" class="headerlink" title="传播行为propagation"></a>传播行为propagation</h3><p>事务传播行为：指的就是当一个事务方法被另一事务方法调用时，这个事务方法该如何进行事务控制</p><ul><li>REQUIRED：大部分情况下都是用该传播行为即可</li><li>REQUIRES_NEW：当我们不希望事务之间相互影响，可以使用该传播行为，比如：下订单前需要记录日志，不论订单保存成功与否，都需要保证日志记录能够记录成功</li></ul><p><img src="/.com//image-20240326095623453.png" alt="image-20240326095623453"></p><p>例如：</p><p><img src="/.com//image-20240328104531917.png" alt="image-20240328104531917"></p><p>在上述完成删除部门操作时，不管失败与否 都要记录日志 那么deptLogService中的insert语句就要添加事务</p><p><img src="/.com//image-20240326100618155.png" alt="image-20240326100618155"></p><p>当Transaction的值为默认值时，加入delete中的语句报错 会发生回滚 到时会连带insert一起回滚</p><p>如果设置REQUIRES_NEW则不会  因为propagation的默认值会自动加入已存在的事务  REQUIRES_NEW则会创建新的事务</p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="AOP基础"><a href="#AOP基础" class="headerlink" title="AOP基础"></a>AOP基础</h2><h3 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h3><ul><li><code>AOP</code>：Aspect Oriented Progtamming(面向切面编程、面向方面编程)，其实就是棉线特定方法编程</li></ul><p> <strong>场景：</strong></p><ul><li>案例部分佛南功能运行较慢，定位执行耗时较长的业务方法，此时需要统计每一个业务方法的执行耗时</li><li><img src="/.com//image-20240326110621621.png" alt="image-20240326110621621"></li></ul><p><strong>实现：</strong></p><ul><li>动态代理时面向切面编程最主流的实现，而SpringAOP时Spring框架的高级技术，旨在管理bean对象的过程中，主要通过底层的动态代理机制，对特定的方法进行编程</li></ul><p><strong>底层原理：</strong></p><ul><li>动态代理机制</li></ul><p><strong>Spring的AOP的底层用到了两种代理机制：</strong></p><ul><li>JDK的动态代理：针对实现接口的类产生代理 </li><li>Cglib的动态代理：针对没有实现接口的类产生代理</li></ul><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><ul><li><p>导入依赖</p><p><img src="/.com//image-20240326111320941.png" alt="image-20240326111320941"></p></li><li><p>编写aop程序：针对于特定方法根据业务需要进行编程</p><p><img src="/.com//image-20240326112306354.png" alt="image-20240326112306354"></p></li></ul><h3 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h3><ul><li>连接点：<code>JoinPoint</code>，可以被AOP控制的方法（暗含方法执行的相关信息）</li><li>通知：<code>Advice</code>， 指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）</li><li>切入点：<code>PointCut</code>，匹配链接点的条件，通知仅会在切入点方法执行时被应用</li><li>切面：<code>Aspect</code>，描述通知与切入点，的对应关系（通知+切入点）</li><li>目标对象：<code>Target</code>，通知所应用的对象</li></ul><p><img src="/.com//image-20240326125641380.png" alt="image-20240326125641380"></p><h3 id="AOP执行流程"><a href="#AOP执行流程" class="headerlink" title="AOP执行流程"></a>AOP执行流程</h3><p><img src="/.com//image-20240326130435084.png" alt="image-20240326130435084"></p><h2 id="AOP进阶"><a href="#AOP进阶" class="headerlink" title="AOP进阶"></a>AOP进阶</h2><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><ul><li><code>@Around</code> ：环绕通知，此注解标注的通知方法在目标方法前、后都被执行<ul><li><img src="/.com//image-20240326144648642.png" alt="image-20240326144648642"></li></ul></li><li><code>@Before</code> ：前置通知，此注解标注的通知方法在目标方法前被执行<ul><li><img src="/.com//image-20240326144638119.png" alt="image-20240326144638119"></li></ul></li><li><code>@After</code> （<strong>重点</strong>）：后置通知，此注解标注的通知方式在目标方法后被执行<ul><li><img src="/.com//image-20240326144656721.png" alt="image-20240326144656721"></li></ul></li><li><code>@AfterRuning</code> ：返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行<ul><li><img src="/.com//image-20240326144703033.png" alt="image-20240326144703033"></li></ul></li><li><code>@AfterThrowing</code> ：异常后通知，此注解标注的通知方法发生异常后通知<ul><li><img src="/.com//image-20240326144709491.png" alt="image-20240326144709491"></li></ul></li></ul><p><strong>注意事项</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>环绕通知需要自己调用 ProceedingJoinPoint.proceed() 来让原始方法执行，其他通知不需要考虑目标方法执行</span><br><span class="line"><span class="meta">@Around</span>环绕通知方法的返回值，必须指定为Object，来接受原始方法的返回值</span><br></pre></td></tr></table></figure><p><strong>抽取：</strong></p><p><code>@PointCut</code>注解</p><ul><li>该注解的作用是将公共的切点表达式抽取出来，需要使用的时引用该切点表达式即可</li></ul><p><img src="/.com//image-20240326144849843.png" alt="image-20240326144849843"></p><p><img src="/.com//image-20240326144931497.png" alt="image-20240326144931497"></p><p>直接调用 别的类中的也可直接调用 这里取决于px的修饰符</p><ul><li>private：仅能在当前切面类中引用该表达式</li><li>public：其他外部的切面类中也可以引用该表达式</li></ul><h3 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h3><p><strong>当有多个切面的切入点都匹配到了目标方法，目标方法运行时，多个通方法都会被执行</strong></p><p>执行顺序：</p><ul><li><p>1.不同切面类中，默认按照切面类的类名字母排序</p><ul><li><p>目标方法前的通知方法：字母排名靠前的先执行</p></li><li><p>目标方法后的通知方法：字母排名靠前的后执行</p></li></ul></li><li><p>2.用<code>@Order(数字)</code> 加在切面类上来控制顺序</p><ul><li>目标方法前的通知方法：数字小的先执行</li><li>目标方法后的通知方法：数字小的后执行</li></ul></li></ul><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><ul><li>切入点表达式：描述切入点方法的一种表达式</li><li>作用：主要用来决定项目中的那些方法需要加入通知</li><li>常见形式<ul><li><code>execution(...)</code> ：根据方法的签名来匹配</li><li><code>@annotation(...)</code> ：根据注解匹配</li></ul></li></ul><h4 id="executation"><a href="#executation" class="headerlink" title="executation"></a>executation</h4><p>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹，语法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">executation(访问修饰符？ 返回值 包名.类名？ 方法名(方法参数) <span class="keyword">throws</span> 异常？ )</span><br></pre></td></tr></table></figure><ul><li>其中带<code>?</code>的表示可省略的部分<ul><li>访问修饰符：可省略(比如：public、protected)</li><li>包名.类名：可省略</li><li>throw 异常：可省略 (注意是方法向上声明抛出的异常，不是实际抛出的异常)</li></ul></li><li>可以使用通配符描述切入点<ul><li><code>*</code> ： 单个独立的任意符号，可以统配任意返回值、包名、类名、方法名、任意类型的一个参数、也可以统配包、类、方法名的一部分<ul><li><img src="/.com//image-20240326161142261.png" alt="image-20240326161142261"></li></ul></li><li><code>..</code> ： 多个连续的任意符号，可以通配任意层级的包，或任意类型，任意个数的参数<ul><li><img src="/.com//image-20240326161240834.png" alt="image-20240326161240834"></li></ul></li></ul></li></ul><p><img src="/.com//image-20240326161917056.png" alt="image-20240326161917056"></p><p><img src="/.com//image-20240326161540654.png" alt="image-20240326161540654"></p><h4 id="annotation"><a href="#annotation" class="headerlink" title="@annotation"></a>@annotation</h4><p>@annotation 切入点表达式，用于匹配表示有特定注解的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@annotation(com.raehp.anno.Log)</span><br></pre></td></tr></table></figure><p>实现步骤：</p><ul><li><p>创建Annoation注解</p></li><li><p><img src="/.com//image-20240326162858318.png" alt="image-20240326162858318"></p></li><li><p>注解中添加@Retention注解、@Target注解</p><p><img src="/.com//image-20240326162938421.png" alt="image-20240326162938421"></p></li><li><p>在需要通知的方法上添加注解</p><p><img src="/.com//image-20240326163003775.png" alt="image-20240326163003775"></p></li><li><p>通过Pointcut修改切入点表达式 声明注解</p></li></ul><p><img src="/.com//image-20240326163051297.png" alt="image-20240326163051297"></p><h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><ul><li>在Spring中用<code>JoinPoint</code>抽象了连接点，用它可以获得方法执行时的信息，如目标类名，方法名，方法参数等。<ul><li>对于<code>@Around</code> 通知，获取连接点信息只能使用，<code>ProceedingJoinPoint</code></li><li>对于其他四种通知，获取连接点信息只能使用 <code>JoinPoint</code> ，他是 <code>ProceedingJoinPoint</code> 的父类型</li></ul></li></ul><p><img src="/.com//image-20240326190904328.png" alt="image-20240326190904328"></p><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li><p>springboot中支持三种格式的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.port=<span class="number">8081</span>  --properties</span><br><span class="line">server:</span><br><span class="line">port:<span class="number">8082</span>--yml</span><br><span class="line">server:</span><br><span class="line">port:<span class="number">8083</span>--yaml</span><br></pre></td></tr></table></figure><p>其中 ：优先级<code>properties &gt; yml &gt; yaml</code></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虽然springboot支持多种格式配置文件，但是在项目开发过程中，推荐统一使用一种格式的配置 （yml是主流）</span><br></pre></td></tr></table></figure><ul><li><p>Springboot除了支持配置文件属性配置，还支持 <code>Java系统属性 </code>和 <code>命令行参数</code> 的方式进行属性配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Java系统属性</span><br><span class="line">-Dserver.port=9000</span><br><span class="line"># 命令行参数</span><br><span class="line">--server.port=10010</span><br></pre></td></tr></table></figure><p>其中：优先级<code>命令行参数</code> &gt; <code>Java系统属性</code></p><p><img src="/.com//image-20240401095305704.png" alt="image-20240401095305704"></p></li></ul><p>​<img src="/.com//image-20240401095654133.png" alt="image-20240401095654133"></p><p><strong>那么，当我们打包成jar包之后 那我们 该如何设置Java系统属性 和命令行参数</strong></p><ul><li><p>先打开jar包所在位置</p><p><img src="/.com//image-20240401095729789.png" alt="image-20240401095729789"></p></li><li><p>在当前文件地址打开cmd  输入</p><p><img src="/.com//image-20240401095818059.png" alt="image-20240401095818059"></p></li></ul><p>那么这5种配置方式的优先级大小呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令行参数 &gt; Java系统属性 &gt; properties &gt; yml &gt; yaml</span><br></pre></td></tr></table></figure><h2 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h2><h3 id="获取bean"><a href="#获取bean" class="headerlink" title="获取bean"></a>获取bean</h3><ul><li><p>默认情况下，Spring项目启动时，会把bean都创建好放在IOC容器，如果想主动获取这些bean，可以通过如下方式</p><ul><li><p>注入ApplicaionContext</p><p><img src="/.com//image-20240401102748733.png"></p></li><li><p>根据name获取bean</p><p><img src="/.com//image-20240401102528247.png" alt="image-20240401102528247"></p></li><li><p>根据类型获取</p><p><img src="/.com//image-20240401102536962.png" alt="image-20240401102536962"></p></li><li><p>根据name获取bean（带转换类型）</p><p><img src="/.com//image-20240401102617263.png"></p></li></ul></li></ul><p>运行结果：</p><p>​<img src="/.com//image-20240401102653230.png" alt="image-20240401102653230"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">上述所说的 【Spring 项目启动时，会把其中的bean都创建好】 还会受到作用域及延迟初始化影响，这里主要针对于 默认的单例非延迟加载的bean而言</span><br></pre></td></tr></table></figure><h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><ul><li><p>Spring支持五种作用域 后三者在web环境才生效</p><p><img src="/.com//image-20240401104035633.png" alt="image-20240401104035633"></p></li><li><p>可以通过<code>@Scope</code> 注解来进行配置作用域</p><p><img src="/.com//image-20240401104123066.png" alt="image-20240401104123066"></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">默认singleton 的bean  在容器启动时被创建，可以使用@Lazy注解来延迟初始化（延迟到第一次使用时）</span><br><span class="line">prototype的bean，第一次使用该bean的时候 都会创建一个新的实例</span><br><span class="line">实际开发中，绝大部分的bean是单例的，也就是说绝大部分的bean不需要设置prototype</span><br></pre></td></tr></table></figure><p>标注prototype的运行结果：</p><p><img src="/.com//image-20240401104420321.png" alt="image-20240401104420321"></p><p>默认值的运行结果</p><p><img src="/.com//image-20240401104458244.png" alt="image-20240401104458244"></p><p>添加@Lazy注解后的运行结果（scope为默认值的情况下）：在调用的时候 初始化</p><p><img src="/.com//image-20240401104748294.png" alt="image-20240401104748294"></p><p>不加@Lazy注解：在调用前 初始化</p><p><img src="/.com//image-20240401104833746.png" alt="image-20240401104833746"></p><h3 id="第三方bean"><a href="#第三方bean" class="headerlink" title="第三方bean"></a>第三方bean</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果要管理的bean对象 来自第三方（不是自己定义的） 是无法使用@Component及衍生注解来声明bean的，就需要用到@Bean注解</span><br><span class="line"></span><br><span class="line">若要管理第三方的bean对象，建议对这些bean集中管理分类配置，可以通过@Configuration注解来声明一个配置类</span><br></pre></td></tr></table></figure><ul><li>在启动类中 使用@Bean 注解 来 声明第三方类<ul><li><img src="/.com//image-20240401111143619.png" alt="image-20240401111143619"></li></ul></li><li>在通过@Autowired 注解来注入 测试<ul><li><img src="/.com//image-20240401111242081.png" alt="image-20240401111242081"></li></ul></li></ul><p>但这个时候 我们会发现 声明第三方类的过程 是在启动类中实现的（不建议）</p><p>声明配置类的方法：</p><ul><li><p>先创建一个类 标注 <code>@Configuration</code> 注解 声明配置类</p><ul><li><img src="/.com//image-20240401111541227.png" alt="image-20240401111541227"></li></ul></li><li><p>如果想要依赖注入  则直接以形参的方式 写到方法中即可</p></li></ul><h2 id="SpringBoot原理"><a href="#SpringBoot原理" class="headerlink" title="SpringBoot原理"></a>SpringBoot原理</h2><h3 id="起步依赖原理"><a href="#起步依赖原理" class="headerlink" title="起步依赖原理"></a>起步依赖原理</h3><p>起步依赖原理：Maven的依赖传递</p><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li>方案一：<code>@ComponentScan</code> 组件扫描</li></ul><p><img src="/.com//image-20240401122207578.png" alt="image-20240401122207578"></p><ul><li><p>方案二：<code>@Import</code> 导入。使用@Import 导入的类会被Spring 加载到IOC容器中，导入形式主要有以下几种</p><ul><li><h2 id="导入普通类"><a href="#导入普通类" class="headerlink" title="导入普通类"></a>导入普通类</h2><ul><li><img src="/.com//image-20240401122947934.png" alt="image-20240401122947934"></li></ul></li><li><p>导入配置类</p><ul><li><img src="/.com//image-20240401123312638.png" alt="image-20240401123312638"></li></ul></li><li><p>导入ImportSelector 接口实现类</p><ul><li><img src="/.com//image-20240401123344957.png" alt="image-20240401123344957"></li></ul></li><li><p><code>@EnableXxxx</code> 注解，封装 <code>@Import</code></p><ul><li><img src="/.com//image-20240401123509258.png" alt="image-20240401123509258"></li></ul></li></ul></li></ul><h4 id="源码跟踪"><a href="#源码跟踪" class="headerlink" title="源码跟踪"></a>源码跟踪</h4><h5 id="SpringbootApplication"><a href="#SpringbootApplication" class="headerlink" title="@SpringbootApplication"></a>@SpringbootApplication</h5><p>Springboot的启动类上有个 <code>@SpringBootApplication</code> 注解 这个注解内还 有着 以下三个注解：</p><p><img src="/.com//image-20240401151513118.png" alt="image-20240401151513118"></p><p>自动配置的核心：<code>@EnableAutoConfiguration</code></p><p><code>@SpringbootApplication</code>  该注解标注在Springboot的工程引导类上，是Springboot中<strong>最最最</strong>重要的注解。该注解由三个部分组成：</p><ul><li><code>@SpringbootConfiguration</code> ：该注解与 <code>@Configruration</code> 注解作用相同，用来声明当前也是一个配置类</li><li><code>@ComponentScan</code> ： 组件扫描，默认扫描当前引导类所在的包及其子包</li><li><code>@EnaleAutoConfiguration</code> ：SpringBoot 实现自动化配置的核心</li></ul><h5 id="ConditionalMissingBean"><a href="#ConditionalMissingBean" class="headerlink" title="@ConditionalMissingBean"></a>@ConditionalMissingBean</h5><ul><li>作用：按照一定条件进行判断，在满足给定条件后才会注册对应的bean对象到springboot的IOC容器中</li><li>位置：方法、类</li><li><code>@Conditional</code> 本身是一个父注解，派生出大量的子注解：<ul><li><code>@ConditionalOnClass</code> ：判断环境中 是否有对应的字节码文件，才会注册bean到IOC容器中<ul><li><img src="/.com//image-20240401160505935.png" alt="image-20240401160505935"></li></ul></li><li><code>@ConditionalOnMissingBean</code> ：判断环境中没有对应的bean(类型 或 名称) 才注册bean到IOC容器<ul><li><img src="/.com//image-20240401160522629.png" alt="image-20240401160522629"></li></ul></li><li><code>@ConditionalOnProperty</code> ：判断配置文件中有对应属性和值，才注册bean到IOC容器<ul><li><img src="/.com//image-20240401160537920.png" alt="image-20240401160537920"></li></ul></li></ul></li></ul><p></p><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><ul><li>场景：在实际开发中，经常会定义一些公共组件，提供给各个团队使用，而在Springboot的项目中，一般会将这些公共组件封装为SpringBoot的starter。</li><li><img src="/.com//image-20240401163617636.png" alt="image-20240401163617636"></li><li><img src="/.com//image-20240401163634021.png" alt="image-20240401163634021"></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意：springboot官方提供的起步依赖中 spring-boot在前   </span><br><span class="line">其他技术提供： 功能在前</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20240401163744139.png" alt="image-20240401163744139"></p><p>图中，黄色背景中 有粉色背景的依赖  所以 当我加载黄色依赖的时候 它会自动加载里面引入的粉色依赖</p><h4 id="自定义start"><a href="#自定义start" class="headerlink" title="自定义start"></a>自定义start</h4><p><img src="/.com//image-20240401163913668.png" alt="image-20240401163913668"></p><p><img src="/.com//image-20240401163920815.png" alt="image-20240401163920815"></p><p>步骤： </p><ul><li>将之前工程中的 AliOSSProperties.java   AliOSSUtils.java 复制到aliyun-oss-boot-autocongifure工程中 这个时候会发现报错了 <ul><li>AliOSSUtils.java 方法报错：MultipartFile 原因是没有导入spring-boot-starter-web 依赖</li><li><img src="/.com//image-20240401195856740.png" alt="image-20240401195856740"></li><li><img src="/.com//image-20240401200005244.png" alt="image-20240401200005244"></li><li>get set方法找不到 是因为AliyunOSSProperties中的 lombok依赖没有导入 这时候只需要重写以下get set方法就行了</li></ul></li><li>这个时候 发现 AliOSSProperties.java   AliOSSUtils.java   上面的<code>@compenent</code> 注解都用没用了：因为 将来如过有用户使用 我们也不想让他们扫描到  所以 要把从<code>@compenent</code> 注解删掉   但是删掉后 又有错误<ul><li>因为不是IOC容器 所以不能使用<code>@Autowired</code>  注入   但是要求中 说我们要进行注入AliOSSUtils  所以就要用到 <code>@Bean</code> 注解<ul><li>声明一个 配置类 <code>@Confirguration</code> 来进行 配置 将其交给IOC容器 <ul><li><img src="/.com//image-20240401201658838.png" alt="image-20240401201658838"></li></ul></li></ul></li><li>AliOSSProperties.java  也会报错  <ul><li><img src="/.com//image-20240401200727060.png" alt="image-20240401200727060"></li><li><img src="/.com//image-20240401200742532.png" alt="image-20240401200742532"></li><li>这时我们发现 缺少了 <code>@EnableConfirgurationProperties</code> 注解 所以我们要 在AliyunOSSConfirgue中添加 此注解<ul><li><img src="/.com//image-20240401201802085.png" alt="image-20240401201802085"></li></ul></li></ul></li></ul></li><li>此外 还会发现  AliOSSUtils 中的 aliOSSProperties 我们并没有声明值 所以我们要给他写上get set方法 <ul><li><img src="/.com//image-20240401201017568.png" alt="image-20240401201017568"></li><li>并且 在配置类的  <code>@EnableConfirgurationProperties</code>  注解内添加  并将AliOSSProperties.class类导入 <ul><li><img src="/.com//image-20240401201108735.png" alt="image-20240401201108735"></li><li>进行注入   并将方法 中的值进行返回  注入 直接在方法形参内声明<ul><li><img src="/.com//image-20240401201146741.png" alt="image-20240401201146741"></li></ul></li></ul></li></ul></li><li>最后 进行测试<ul><li><img src="/.com//image-20240401201326172.png" alt="image-20240401201326172"></li><li>引入测试类  并 在pom文件中 引入aliyun-oss-spring-boot-starter 的依赖  注意 不需要引入 aliyun-oss-spring-boot-autoconfigure 的 依赖 因为 aliyun-oss-spring-boot-starter  已经引入 又因为 依赖的传递性 所以 不用在引入了</li><li><img src="/.com//image-20240401201513561.png" alt="image-20240401201513561"></li><li>uploadController 中  注入aliOSSUtils    并调用upload方法 此时 就获得了 图像的url</li></ul></li></ul><h1 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h1><h2 id="分模块设计与开发"><a href="#分模块设计与开发" class="headerlink" title="分模块设计与开发"></a>分模块设计与开发</h2><p>当我们很多人 共同开发一个项目的时候 如何做到数据共享呢？  这个时候就要将 我们要共i想的数据  封装到一个新模块中  当我们需要使用的 时候 直接导入对应的依赖即可</p><p>将之前完成的tlias包 进行分模块    </p><ul><li>先分别创建存放pojo和utils的模块<ul><li><img src="/.com//image-20240402092430991.png" alt="image-20240402092430991"></li></ul></li><li>将pojo包下的类 一同copy 到 tlias-pojo模块中 utils同理<ul><li><img src="/.com//image-20240402092640342.png" alt="image-20240402092640342"></li><li>再将 pojo类所需要的依赖 导入到pom文件中去</li></ul></li><li>最后 在这个项目中  导入 tlais-pojo 和tlais-utils 的依赖<ul><li><img src="/.com//image-20240402092833445.png" alt="image-20240402092833445"></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.什么是分模块设计？</span><br><span class="line">·将项目按照功能拆分成若干个子模块</span><br><span class="line">2.为什么要分模块设计？</span><br><span class="line">·方便项目的管理和维护、扩展，也方便模块间的相互调用，资源共享</span><br><span class="line">3.注意事项：</span><br><span class="line">·分模块设计需要先针对模块功能进行设计，在进行编码。不会先将工程开发完毕，然后进行拆分</span><br></pre></td></tr></table></figure><h2 id="继承与聚合"><a href="#继承与聚合" class="headerlink" title="继承与聚合"></a>继承与聚合</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>概念：继承描述的是两个工程间的关系，与Java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承</li><li>作用：简化依赖配置、统一管理依赖</li><li>实现：<parent></parent></li></ul><h4 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h4><ol><li>创建maven模块，tlias-parent，该工程为父工程，设置打包方式<code>pom</code> （默认jar）<ul><li><img src="/.com//image-20240402100153810.png" alt="image-20240402100153810"></li></ul></li><li>在子工程的pom.xml文件中，配置继承关系<ul><li><img src="/.com//image-20240402100221947.png" alt="image-20240402100221947"></li><li><strong>relativePath 父工程的相对路径</strong></li></ul></li><li>在父工程中配置各个工程共有的依赖（子工程会自动继承父工程的依赖）<ul><li><img src="/.com//image-20240402100324022.png" alt="image-20240402100324022"></li></ul></li></ol><p><img src="/.com//image-20240402100116088.png" alt="image-20240402100116088"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">在子工程中，配置了继承关系之后，坐标中的groupId是可以省略的，因为会自动创建父工程的</span><br><span class="line">relativePath指定父工程的pom文件的相对位置（如果不指定，将从本地仓库/远程仓库查找该工程）</span><br></pre></td></tr></table></figure><p><strong>打包方式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jar:普通模块打包，springboot项目基本都是jar包（内嵌tomcat运行）</span><br><span class="line">war：普通web程序打包，需要部署在外部的tomcat服务器中运行</span><br><span class="line">pom：父工程或聚合工程，该模块不写代码，仅进行依赖管理</span><br></pre></td></tr></table></figure><h4 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h4><ul><li>在maven中，可以在父工程的pom文件中通过，<denpendencyManager> 来统一管理版本<ul><li><img src="/.com//image-20240402103059965.png" alt="image-20240402103059965"></li><li><strong>子工程引入依赖时，无需指定<version> 版本号，父工程统一管理，变更依赖版本，只需要在父工程中变更</version></strong></li></ul></denpendencyManager></li><li>自定义属性&#x2F;引用属性<ul><li>如果 以后引入的依赖太多 一个个版本找起来也很麻烦 这个时候 就需要定义属性了<ul><li><img src="/.com//image-20240402104254199.png" alt="image-20240402104254199"></li><li><img src="/.com//image-20240402104303201.png" alt="image-20240402104303201"></li><li><img src="/.com//image-20240402104307962.png" alt="image-20240402104307962"></li><li><img src="/.com//image-20240402104434598.png" alt="image-20240402104434598"></li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">面试题：</span><br><span class="line">&lt;dependencyManager&gt; 与 &lt;dependencies&gt; 的区别是什么？</span><br><span class="line">&lt;dependencies&gt; 是直接依赖，在父工程中配置了依赖，子工程会直接继承下来</span><br><span class="line">&lt;dependencyManager&gt; 是统一管理依赖版本，不会直接依赖，还需要在子工程中引入所需要的依赖（无需指定版本）</span><br></pre></td></tr></table></figure><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>当我们要打包项目的时候 要一个个install然后再pakage  这个时候 会很繁琐 我们就要用到耦合</p><p><img src="/.com//image-20240402112815627.png" alt="image-20240402112815627"></p><ul><li>maven 中可以通过 <models> 设置当前聚合工程所包含的子模块名称<ul><li><img src="/.com//image-20240402112947489.png" alt="image-20240402112947489"></li></ul></models></li><li><img src="/.com//image-20240402113005262.png" alt="image-20240402113005262"><ul><li>这个时候 直接运行 父工程中的package 就可实现 打包操作</li></ul></li></ul><p><strong>总结：</strong></p><ul><li>作用：<ul><li>聚合用于快速构建项目</li><li>继承用于简化依配置、统一依赖管理</li></ul></li><li>相同点：<ul><li>聚合与继承的pom.xml 文件打包方式均为pom 额可以将两种关系制作到同一个pom文件中</li><li>聚合与继承 均属于 设计性模块 并无实际的模块内容</li></ul></li><li>不同点：<ul><li>聚合实在聚合工程中配置，聚合可以感知到参与聚合的模块有那些</li><li>继承是在子模块中配置关系，父模块无法感知那些子模块 继承了自己</li></ul></li></ul><p>​ </p><h2 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h2><ul><li>私服是一种特殊的远程仓库，他是架设在局域网内的仓库服务，用来代替位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题</li><li><img src="/.com//image-20240402115910067.png" alt="image-20240402115910067"></li></ul><p>创建私服 的方法较为固定 参考 [私服配置说明.md](E:\BaiduNetdiskDownload\最新版JavaWeb开发教程\资料\day15-maven高级\资料\01. maven高级\02. 私服配置案例\私服配置说明.md) </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/29/hello-world/"/>
      <url>/2024/03/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2024/03/01/Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/03/01/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Java概述"><a href="#一、Java概述" class="headerlink" title="一、Java概述"></a>一、Java概述</h2><h3 id="1、JVM、JRE和JDK的关系"><a href="#1、JVM、JRE和JDK的关系" class="headerlink" title="1、JVM、JRE和JDK的关系"></a>1、JVM、JRE和JDK的关系</h3><p>​<strong>JVM</strong></p><p>是Java虚拟机，Java程序需要运行在虚拟机上，不同的平台有自己的虚拟机，因此Java语言可以实现跨平台。</p><p>​<strong>JRE</strong></p><p>包括Java虚拟机和Java程序所需的核心类库等。核心类库主要是java.lang包：包含了运行Java程序必不可少的系统类，如基本数据类型、基本数学函数、字符串处理、线程、异常处理类等，系统缺省加载这个包</p><p>​<strong>JDK</strong></p><p>是提供给Java开发人员使用的，其中包含了Java的开发工具，也包括了JRE。所以安装了JDK，就无需再单独安装JRE了。其中的开发工具：编译工具(javac.exe)，打包工具(jar.exe)等</p><h3 id="2、什么是跨平台性？原理是什么"><a href="#2、什么是跨平台性？原理是什么" class="headerlink" title="2、什么是跨平台性？原理是什么"></a>2、什么是跨平台性？原理是什么</h3><p>所谓跨平台性，是指java语言编写的程序，一次编译后，可以在多个系统平台上运行。</p><p>实现原理：Java程序是通过java虚拟机在系统平台上运行的，只要该系统可以安装相应的java虚拟机，该系统就可以运行java程序。</p><h3 id="Java语言有哪些特点"><a href="#Java语言有哪些特点" class="headerlink" title="Java语言有哪些特点"></a>Java语言有哪些特点</h3><p>简单易学（Java语言的语法与C语言和C++语言很接近）</p><p>面向对象（封装，继承，多态）</p><p>平台无关性（Java虚拟机实现平台无关性）</p><p>支持网络编程并且很方便（Java语言诞生本身就是为简化网络编程设计的）</p><p>支持多线程（多线程机制使应用程序在同一时间并行执行多项任）</p><p>健壮性（Java语言的强类型机制、异常处理、垃圾的自动收集等）</p><h3 id="3、什么是字节码？采用字节码的最大好处是什么"><a href="#3、什么是字节码？采用字节码的最大好处是什么" class="headerlink" title="3、什么是字节码？采用字节码的最大好处是什么"></a>3、什么是字节码？采用字节码的最大好处是什么</h3><p><strong>字节码：</strong>Java源代码经过虚拟机编译器编译后产生的文件（即扩展为.class的文件），它不面向任何特定的处理器，只面向虚拟机。</p><h3 id="4、Java和C-的区别"><a href="#4、Java和C-的区别" class="headerlink" title="4、Java和C++的区别"></a>4、Java和C++的区别</h3><ul><li><p>都是面向对象的语言，都支持封装、继承和多态</p></li><li><p>Java不提供指针来直接访问内存，程序内存更加安全</p></li><li><p>Java的类是单继承的，C++支持多重继承；虽然Java的类不可以多继承，但是接口可以多继承。</p></li><li><p>Java有自动内存管理机制，不需要程序员手动释放无用内存</p></li></ul><h2 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h2><h3 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h3><h4 id="1-Java有哪些数据类型"><a href="#1-Java有哪些数据类型" class="headerlink" title="1.Java有哪些数据类型"></a>1.Java有哪些数据类型</h4><ul><li>基本数据类型<ul><li>数值型<ul><li>整数类型(byte,short,int,long)</li><li>浮点类型(float,double)</li></ul></li><li>字符型(char)</li><li>布尔型(boolean)</li></ul></li><li>引用数据类型<ul><li>类(class)</li><li>接口(interface)</li><li>数组([])</li></ul></li></ul><p><img src="/.com//image-20240119173941173.png" alt="image-20240119173941173"></p><h4 id="2、switch-是否能作用在-byte-上，是否能作用在-long-上，是否能作用在-String-上"><a href="#2、switch-是否能作用在-byte-上，是否能作用在-long-上，是否能作用在-String-上" class="headerlink" title="2、switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上"></a>2、switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上</h4><p>​在 Java 5 以前，switch(expr)中，expr 只能是 byte、short、char、int。从 Java5 开始，Java 中引入了枚举类型，expr 也可以是 enum 类型，从 Java 7 开始，expr 还可以是字符串（String），但是长整型（long）在目前所有的版本中都是不可以的。</p><h3 id="2、编码"><a href="#2、编码" class="headerlink" title="2、编码"></a>2、编码</h3><h4 id="Java语言采用何种编码方案？有何特点？"><a href="#Java语言采用何种编码方案？有何特点？" class="headerlink" title="Java语言采用何种编码方案？有何特点？"></a>Java语言采用何种编码方案？有何特点？</h4><p>Java语言采用Unicode编码标准，Unicode（标准码），它为每个字符制订了一个唯一的数值，因此在任何的语言，平台，程序都可以放心的使用。</p><h3 id="3、注释"><a href="#3、注释" class="headerlink" title="3、注释"></a>3、注释</h3><ul><li>单行注释<br>格式： &#x2F;&#x2F; 注释文字</li><li>多行注释<br>格式： &#x2F;* 注释文字 *&#x2F;</li><li>文档注释<br>格式：&#x2F;** 注释文字 *&#x2F;</li></ul><h3 id="4、访问修饰符"><a href="#4、访问修饰符" class="headerlink" title="4、访问修饰符"></a>4、访问修饰符</h3><p>private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）<br>default (即缺省，什么也不写，不使用任何关键字）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。<br>protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。<br>public : 对所有类可见。使用对象：类、接口、变量、方法</p><p><img src="/.com//image-20240119174842955.png" alt="image-20240119174842955"></p><h3 id="5、运算符"><a href="#5、运算符" class="headerlink" title="5、运算符"></a>5、运算符</h3><h4 id="和-的区别"><a href="#和-的区别" class="headerlink" title="&amp;和&amp;&amp;的区别"></a>&amp;和&amp;&amp;的区别</h4><p>&amp;运算符有两种用法：(1)按位与；(2)逻辑与。</p><p>&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true 整个表达式的值才是 true。&amp;&amp;之所以称为短路运算，是因为如果&amp;&amp;左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。</p><p>注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p><h3 id="6、关键字"><a href="#6、关键字" class="headerlink" title="6、关键字"></a>6、关键字</h3><h4 id="1-Java-有没有-goto"><a href="#1-Java-有没有-goto" class="headerlink" title="1. Java 有没有 goto"></a>1. Java 有没有 goto</h4><p>goto 是 Java 中的保留字，在目前版本的 Java 中没有使用。</p><h4 id="2-final-有什么用？"><a href="#2-final-有什么用？" class="headerlink" title="2. final 有什么用？"></a>2. final 有什么用？</h4><p>用于修饰类、属性和方法；</p><ul><li>被final修饰的类不可以被继承</li><li>被final修饰的方法不可以被重写</li><li>被final修饰的变量不可以被改变，被final修饰不可变的是变量的引用，而不是引用指向的内容，引用指向的内容是可以改变的</li></ul><h4 id="3-final-finally-finalize区别"><a href="#3-final-finally-finalize区别" class="headerlink" title="3.final finally finalize区别"></a>3.final finally finalize区别</h4><p>final：可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。</p><p>finally：一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。</p><p>finalize：是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System.gc() 方法的时候，由垃圾回收器调用finalize()，回收垃圾，一个对象是否可回收的最后判断。</p><h4 id="4-this关键字的用法"><a href="#4-this关键字的用法" class="headerlink" title="4. this关键字的用法"></a>4. this关键字的用法</h4><p>this是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指针。</p><p><strong>this的用法在java中大体可以分为3种：</strong></p><p>①. 普通的直接引用，this相当于是指向当前对象本身。</p><p>②. 形参与成员名字重名，用this来区分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③. 引用本类的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-super关键字的用法"><a href="#5-super关键字的用法" class="headerlink" title="5. super关键字的用法"></a>5. super关键字的用法</h4><p>super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。</p><p>super也有三种用法：</p><p>①. 普通的直接引用</p><p>与this类似，super相当于是指向当前对象的父类的引用，这样就可以用super.xxx来引用父类的成员。</p><p>②. 子类中的成员变量或方法与父类中的成员变量或方法同名时，用super进行区分</p><p>③. 引用父类构造函数</p><ul><li>super（参数）：调用父类中的某一个构造函数（应该为构造函数中的第一条语句）。</li><li>this（参数）：调用本类中另一种形式的构造函数（应该为构造函数中的第一条语句）。</li></ul><h4 id="6-this与super的区别"><a href="#6-this与super的区别" class="headerlink" title="6. this与super的区别"></a>6. this与super的区别</h4><p><img src="/.com//image-20240119180341803.png" alt="image-20240119180341803"></p><h4 id="7-static存在的主要意义"><a href="#7-static存在的主要意义" class="headerlink" title="7. static存在的主要意义"></a>7. static存在的主要意义</h4><p><img src="/.com//image-20240119180404935.png" alt="image-20240119180404935"></p><h4 id="8-static的独特之处"><a href="#8-static的独特之处" class="headerlink" title="8. static的独特之处"></a>8. static的独特之处</h4><ul><li>被static修饰的变量或者方法是独立于该类的任何对象，也就是说，这些变量和方法不属于任何一个实例对象，而是被类的实例对象所共享。</li></ul><h4 id="9-static应用场景"><a href="#9-static应用场景" class="headerlink" title="9. static应用场景"></a>9. static应用场景</h4><p>因为static是被类的实例对象所共享，因此如果某个成员变量是被所有对象所共享的，那么这个成员变量就应该定义为静态变量。</p><p>因此比较常见的static应用场景有：</p><ul><li>修饰成员变量</li><li>修饰成员方法</li><li>静态代码块</li><li>修饰类【只能修饰内部类也就是静态内部类】</li><li>静态导包</li></ul><h4 id="10-static注意事项"><a href="#10-static注意事项" class="headerlink" title="10. static注意事项"></a>10. static注意事项</h4><ol><li>静态只能访问静态。</li><li>非静态既可以访问非静态的，也可以访问静态的。</li></ol><h3 id="7、流程控制语句"><a href="#7、流程控制语句" class="headerlink" title="7、流程控制语句"></a>7、流程控制语句</h3><h4 id="1、break-continue-return-的区别及作用"><a href="#1、break-continue-return-的区别及作用" class="headerlink" title="1、break ,continue ,return 的区别及作用"></a>1、break ,continue ,return 的区别及作用</h4><p><strong>break</strong> 跳出总上一层循环，不再执行循环(结束当前的循环体)</p><p><strong>continue</strong> 跳出本次循环，继续执行下次循环(结束正在执行的循环 进入下一个循环条件)</p><p><strong>return</strong> 程序返回，不再执行下面的代码(结束当前的方法 直接返回)</p><h4 id="2-在-Java-中，如何跳出当前的多重嵌套循环"><a href="#2-在-Java-中，如何跳出当前的多重嵌套循环" class="headerlink" title="2. 在 Java 中，如何跳出当前的多重嵌套循环"></a>2. 在 Java 中，如何跳出当前的多重嵌套循环</h4><p>在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ok:</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot;,j=&quot;</span> + j);</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span> ok;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、面向对象"><a href="#三、面向对象" class="headerlink" title="三、面向对象"></a>三、面向对象</h2><h3 id="1、面向对象概述"><a href="#1、面向对象概述" class="headerlink" title="1、面向对象概述"></a>1、面向对象概述</h3><h5 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别"></a>面向对象和面向过程的区别</h5><p><strong>面向过程：</strong></p><p>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、Linux&#x2F;Unix等一般采用面向过程开发，性能是最重要的因素。</p><p>缺点：没有面向对象易维护、易复用、易扩展</p><p><strong>面向对象：</strong></p><p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</p><p>缺点：性能比面向过程低</p><p><strong>面向过程是具体化的</strong>，流程化的，解决一个问题，你需要一步一步的分析，一步一步的实现。</p><p><strong>面向对象是模型化的</strong>，你只需抽象出一个类，这是一个封闭的盒子，在这里你拥有数据也拥有解决问题的方法。需要什么功能直接使用就可以了，不必去一步一步的实现，至于这个功能是如何实现的，管我们什么事？我们会用就可以了。</p><p>面向对象的底层其实还是面向过程，把面向过程抽象成类，然后封装，方便我们使用的就是面向对象了。</p><h3 id="2、面向对象三大特性"><a href="#2、面向对象三大特性" class="headerlink" title="2、面向对象三大特性"></a>2、面向对象三大特性</h3><h4 id="1-面向对象的特征有哪些方面"><a href="#1-面向对象的特征有哪些方面" class="headerlink" title="1. 面向对象的特征有哪些方面"></a>1. 面向对象的特征有哪些方面</h4><h5 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a><strong>抽象</strong></h5><p>抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。</p><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a><strong>封装</strong></h5><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a><strong>继承</strong></h5><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><p>关于继承如下 3 点请记住：</p><ul><li><p>子类拥有父类非 private 的属性和方法。</p></li><li><p>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p></li><li><p>子类可以用自己的方式实现父类的方法。（以后介绍）。</p></li></ul><h5 id="多态"><a href="#多态" class="headerlink" title="多态"></a><strong>多态</strong></h5><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p><strong>在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</strong></p><p><strong>其中Java 面向对象编程三大特性：封装 继承 多态</strong></p><p>方法重载（overload）实现的是编译时的多态性（也称为前绑定），</p><p>方法重写（override）实现的是运行时的多态性（也称为后绑定）。</p><ul><li>方法重写（子类继承父类并重写父类中已有的或抽象的方法）；</li><li>对象造型（用父类型引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。</li></ul><h4 id="2-Java语言是如何实现多态的？"><a href="#2-Java语言是如何实现多态的？" class="headerlink" title="2. Java语言是如何实现多态的？"></a>2. Java语言是如何实现多态的？</h4><h5 id="多态的实现"><a href="#多态的实现" class="headerlink" title="多态的实现"></a>多态的实现</h5><p>Java实现多态有三个必要条件：继承、重写、向上转型。</p><p>继承：在多态中必须存在有继承关系的子类和父类。</p><p>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</p><p>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</p><h4 id="3-面向对象五大基本原则是什么（可选）"><a href="#3-面向对象五大基本原则是什么（可选）" class="headerlink" title="3. 面向对象五大基本原则是什么（可选）"></a>3. 面向对象五大基本原则是什么（可选）</h4><ul><li><p>单一职责原则SRP(Single Responsibility Principle)</p></li><li><p>开放封闭原则OCP(Open－Close Principle)</p></li><li><p>里式替换原则LSP(the Liskov Substitution Principle LSP)</p></li><li><p>依赖倒置原则DIP(the Dependency Inversion Principle DIP)</p></li><li><p>接口分离原则ISP(the Interface Segregation Principle ISP)</p></li></ul><h3 id="3、类与接口"><a href="#3、类与接口" class="headerlink" title="3、类与接口"></a>3、类与接口</h3><h4 id="1-抽象类和接口的对比"><a href="#1-抽象类和接口的对比" class="headerlink" title="1.抽象类和接口的对比"></a><strong>1.抽象类和接口的对比</strong></h4><p>抽象类是用来捕捉子类的通用特性的。接口是抽象方法的集合。</p><p>从设计层面来说，抽象类是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</p><p><strong>相同点</strong></p><p>接口和抽象类都不能实例化</p><p>都位于继承的顶端，用于被其他实现或继承</p><p>都包含抽象方法，其子类都必须覆写这些抽象方法</p><p><strong>不同点</strong></p><p><img src="/.com//image-20240119181802331.png" alt="image-20240119181802331"></p><p>接口和抽象类各有优缺点，在接口和抽象类的选择上，必须遵守这样一个原则：</p><ul><li>行为模型应该总是通过接口而不是抽象类定义，所以通常是优先选用接口，尽量少用抽象类。</li><li>选择抽象类的时候通常是如下情况：需要定义子类的行为，又要为子类提供通用的功能。</li></ul><h4 id="2-普通类和抽象类有哪些区别？"><a href="#2-普通类和抽象类有哪些区别？" class="headerlink" title="2. 普通类和抽象类有哪些区别？"></a>2. 普通类和抽象类有哪些区别？</h4><ul><li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li><li>抽象类不能直接实例化，普通类可以直接实例化。</li></ul><h4 id="3-抽象类能使用-final-修饰吗？"><a href="#3-抽象类能使用-final-修饰吗？" class="headerlink" title="3. 抽象类能使用 final 修饰吗？"></a>3. 抽象类能使用 final 修饰吗？</h4><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类</p><h4 id="4-创建一个对象用什么关键字？对象实例与对象引用有何不同？"><a href="#4-创建一个对象用什么关键字？对象实例与对象引用有何不同？" class="headerlink" title="4. 创建一个对象用什么关键字？对象实例与对象引用有何不同？"></a>4. 创建一个对象用什么关键字？对象实例与对象引用有何不同？</h4><p>new关键字</p><p>new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。 </p><h3 id="4、变量与方法"><a href="#4、变量与方法" class="headerlink" title="4、变量与方法"></a>4、变量与方法</h3><h4 id="1-成员变量与局部变量的区别有哪些"><a href="#1-成员变量与局部变量的区别有哪些" class="headerlink" title="1. 成员变量与局部变量的区别有哪些"></a>1. 成员变量与局部变量的区别有哪些</h4><p>变量：在程序执行的过程中，在某个范围内其值可以发生改变的量。从本质上讲，变量其实是内存中的一小块区域</p><p>成员变量：方法外部，类内部定义的变量</p><p>局部变量：类的方法中的变量。</p><h5 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h5><p>成员变量：针对整个类有效。<br>局部变量：只在某个范围内有效。(一般指的就是方法,语句体内)</p><h5 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h5><p>成员变量：随着对象的创建而存在，随着对象的消失而消失，存储在堆内存中。<br>局部变量：在方法被调用，或者语句被执行的时候存在，存储在栈内存中。当方法调用完，或者语句结束后，就自动释放。</p><h5 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h5><p>成员变量：随着对象的创建而存在，随着对象的消失而消失<br>局部变量：当方法调用完，或者语句结束后，就自动释放。</p><h5 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h5><p>成员变量：有默认初始值。</p><p>局部变量：没有默认初始值，使用前必须赋值。</p><h5 id="使用原则"><a href="#使用原则" class="headerlink" title="使用原则"></a>使用原则</h5><p>在使用变量时需要遵循的原则为：就近原则<br>首先在局部范围找，有就使用；接着在成员位置找。</p><h4 id="2-在Java中定义一个不做事且没有参数的构造方法的作用"><a href="#2-在Java中定义一个不做事且没有参数的构造方法的作用" class="headerlink" title="2. 在Java中定义一个不做事且没有参数的构造方法的作用"></a>2. 在Java中定义一个不做事且没有参数的构造方法的作用</h4><p>Java程序在执行子类的构造方法之前，如果没有用super()来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。</p><h4 id="3-在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？"><a href="#3-在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？" class="headerlink" title="3. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？"></a>3. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？</h4><p>帮助子类做初始化工作。</p><h4 id="4-一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？"><a href="#4-一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？" class="headerlink" title="4. 一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？"></a>4. 一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？</h4><p>主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。</p><h4 id="5-构造方法有哪些特性？"><a href="#5-构造方法有哪些特性？" class="headerlink" title="5. 构造方法有哪些特性？"></a>5. 构造方法有哪些特性？</h4><p>名字与类名相同；</p><p>没有返回值，但不能用void声明构造函数；</p><p>生成类的对象时自动执行，无需调用。</p><h4 id="6-静态变量和实例变量区别"><a href="#6-静态变量和实例变量区别" class="headerlink" title="6.静态变量和实例变量区别"></a>6.静态变量和实例变量区别</h4><p><strong>静态变量</strong>： 静态变量由于不属于任何实例对象，属于类的，所以在内存中只会有一份，在类的加载过程中，JVM只为静态变量分配一次内存空间。</p><p><strong>实例变量</strong>： 每次创建对象，都会为每个对象分配成员变量内存空间，实例变量是属于实例对象的，在内存中，创建几次对象，就有几份成员变量。</p><h3 id="5、内部类"><a href="#5、内部类" class="headerlink" title="5、内部类"></a>5、内部类</h3><h4 id="1-什么是内部类？"><a href="#1-什么是内部类？" class="headerlink" title="1. 什么是内部类？"></a>1. 什么是内部类？</h4><p>在Java中，可以将一个类的定义放在另外一个类的定义内部，这就是内部类。内部类本身就是类的一个属性，与其他属性定义方式一致。</p><h4 id="2-内部类的分类有哪些"><a href="#2-内部类的分类有哪些" class="headerlink" title="2. 内部类的分类有哪些"></a>2. 内部类的分类有哪些</h4><p>内部类可以分为四种：<strong>成员内部类</strong>、<strong>局部内部类</strong>、<strong>匿名内部类</strong>和<strong>静态内部类</strong>。</p><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><p>定义在类内部的静态类，就是静态内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">radius</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticInner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;visit outer static variable:&quot;</span> + radius);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类可以访问外部类所有的静态变量，而不可访问外部类的非静态变量；静态内部类的创建方式，<code>new 外部类.静态内部类()</code>，如下：、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Outer.<span class="type">StaticInner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.StaticInner();</span><br><span class="line">inner.visit();</span><br></pre></td></tr></table></figure><h5 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h5><p>定义在类内部，成员位置上的非静态类，就是成员内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">int</span> <span class="variable">radius</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">()</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;visit outer static  variable:&quot;</span> + radius);</span><br><span class="line">           System.out.println(<span class="string">&quot;visit outer   variable:&quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​成员内部类可以访问外部类所有的变量和方法，包括静态和非静态，私有和公有。成员内部类依赖于外部类的实例，它的创建方式<code>外部类实例.new 内部类()</code>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">inner.visit();</span><br></pre></td></tr></table></figure><h5 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h5><p>定义在方法中的内部类，就是局部内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">out_a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">STATIC_b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFunctionClass</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">inner_c</span> <span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(out_a);</span><br><span class="line">                System.out.println(STATIC_b);</span><br><span class="line">                System.out.println(inner_c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner</span>  <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.fun();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStaticFunctionClass</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="comment">// System.out.println(out_a); 编译错误，定义在静态方法中的局部类不可以访问外部类的实例变量</span></span><br><span class="line">                System.out.println(STATIC_b);</span><br><span class="line">                System.out.println(d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Inner</span>  <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义在实例方法中的局部类可以访问外部类的所有变量和方法</p><p>定义在静态方法中的局部类只能访问外部类的静态变量和方法。局部内部类的创建方式，在对应方法内，<code>new 内部类()</code>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStaticFunctionClass</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>匿名内部类就是没有名字的内部类，日常开发中使用的比较多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Service</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;匿名内部类&quot;</span> );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//匿名内部类必须继承或实现一个已有的接口 </span></span><br><span class="line"> <span class="keyword">interface</span> <span class="title class_">Service</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了没有名字，匿名内部类还有以下特点：</p><ul><li><p>匿名内部类必须继承一个抽象类或者实现一个接口。</p></li><li><p>匿名内部类不能定义任何静态成员和静态方法。</p></li><li><p>当所在的方法的形参需要被匿名内部类使用时，必须声明为 final。</p></li><li><p>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</p></li></ul><p>匿名内部类创建方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类/接口&#123; </span><br><span class="line">  <span class="comment">//匿名内部类实现部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-内部类的优点"><a href="#3-内部类的优点" class="headerlink" title="3. 内部类的优点"></a>3. 内部类的优点</h4><p>我们为什么要使用内部类呢？因为它有以下优点：</p><ul><li>一个内部类对象可以访问创建它的外部类对象的内容，包括私有数据！</li><li>内部类不为同一包的其他类所见，具有很好的封装性；</li><li>内部类有效实现了“多重继承”，优化 java 单继承的缺陷。</li><li>匿名内部类可以很方便的定义回调。</li></ul><h4 id="4-内部类有哪些应用场景"><a href="#4-内部类有哪些应用场景" class="headerlink" title="4. 内部类有哪些应用场景"></a>4. 内部类有哪些应用场景</h4><ol><li>一些多算法场合</li><li>解决一些非面向对象的语句块。</li><li>适当使用内部类，使得代码更加灵活和富有扩展性。</li><li>当某个类除了它的外部类，不再被其他的类使用时。</li></ol><h4 id="5-局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？"><a href="#5-局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？" class="headerlink" title="5. 局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？"></a>5. 局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？</h4><p>public class Outer {</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">outMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是因为生命周期不一致， 局部变量直接存储在栈中，当方法执行结束后，非final的局部变量就被销毁。</p><p>而局部内部类对局部变量的引用依然存在，如果局部内部类要调用局部变量时，就会出错。</p><p>加了final，可以确保局部内部类使用的变量与外层的局部变量区分开，解决了这个问题。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">14</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;局部变量：&quot;</span> + age);</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类变量：&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">            System.out.println(<span class="string">&quot;外部类变量：&quot;</span> + Outer.<span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Outer.<span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">   in.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">局部变量：<span class="number">14</span></span><br><span class="line">内部类变量：<span class="number">13</span></span><br><span class="line">外部类变量：<span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="6、重写与重载"><a href="#6、重写与重载" class="headerlink" title="6、重写与重载"></a>6、重写与重载</h3><h4 id="1-构造器（constructor）是否可被重写（override）"><a href="#1-构造器（constructor）是否可被重写（override）" class="headerlink" title="1. 构造器（constructor）是否可被重写（override）"></a>1. 构造器（constructor）是否可被重写（override）</h4><p>构造器不能被继承，因此不能被重写，但可以被重载。</p><h4 id="2-重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"><a href="#2-重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？" class="headerlink" title="2. 重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"></a>2. 重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</h4><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p><p><strong>重载</strong>：发生在同一个类中，方法名相同参数列表不同（参数类型不同、个数不同、顺序不同），与方法返回值和访问修饰符无关，即重载的方法不能根据返回类型进行区分</p><p><strong>重写</strong>：发生在父子类中，方法名、参数列表必须相同，返回值小于等于父类，抛出的异常小于等于父类，访问修饰符大于等于父类（里氏代换原则）；如果父类方法访问修饰符为private则子类中就不是重写。</p><h3 id="7、对象相等判断"><a href="#7、对象相等判断" class="headerlink" title="7、对象相等判断"></a>7、对象相等判断</h3><h4 id="1-和-equals-的区别是什么"><a href="#1-和-equals-的区别是什么" class="headerlink" title="1. &#x3D;&#x3D; 和 equals 的区别是什么"></a>1. &#x3D;&#x3D; 和 equals 的区别是什么</h4><p><strong>&#x3D;&#x3D; :</strong> 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象。(基本数据类型 &#x3D;&#x3D; 比较的是值，引用数据类型 &#x3D;&#x3D; 比较的是内存地址)</p><p><strong>equals()</strong> : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><p>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“&#x3D;&#x3D;”比较这两个对象。</p><p>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来两个对象的内容相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>); <span class="comment">// a 为一个引用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ab&quot;</span>); <span class="comment">// b为另一个引用,对象的内容一样</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// 放在常量池中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>; <span class="comment">// 从常量池中查找</span></span><br><span class="line">        <span class="keyword">if</span> (aa == bb) <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;aa==bb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == b) <span class="comment">// false，非同一对象</span></span><br><span class="line">            System.out.println(<span class="string">&quot;a==b&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (a.equals(b)) <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;aEQb&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">42</span> == <span class="number">42.0</span>) &#123; <span class="comment">// true</span></span><br><span class="line">            System.out.println(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>String中的equals方法是被重写过的，因为object的equals方法是比较的对象的内存地址，而String的equals方法比较的是对象的值。<br>当创建String类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个String对象。</p><h4 id="2-hashCode-与-equals-重要"><a href="#2-hashCode-与-equals-重要" class="headerlink" title="2. hashCode 与 equals (重要)"></a>2. hashCode 与 equals (重要)</h4><p>HashSet如何检查重复</p><p>两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？</p><p>hashCode和equals方法的关系</p><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写equals时必须重写hashCode方法？”</p><p><strong>hashCode()介绍</strong></p><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode()函数。</p><p><strong>hashCode()与equals()的相关规定</strong></p><p>如果两个对象相等，则hashcode一定也是相同的</p><p>两个对象相等，对两个对象分别调用equals方法都返回true</p><p>两个对象有相同的hashcode值，它们也不一定是相等的</p><p><strong>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</strong></p><p>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p><h3 id="8、值传递"><a href="#8、值传递" class="headerlink" title="8、值传递"></a>8、值传递</h3><h5 id="1-当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递"><a href="#1-当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递" class="headerlink" title="1.当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递"></a>1.<strong>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递</strong></h5><p>是值传递。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的</p><h5 id="2-为什么-Java-中只有值传递"><a href="#2-为什么-Java-中只有值传递" class="headerlink" title="2.为什么 Java 中只有值传递"></a>2.<strong>为什么 Java 中只有值传递</strong></h5><p>首先回顾一下在程序设计语言中有关将参数传递给方法（或函数）的一些专业术语。按值调用(call by value)表示方法接收的是调用者提供的值，而按引用调用（call by reference)表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。 它用来描述各种程序设计语言（不只是Java)中方法参数传递方式。</p><p><strong>Java程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。</strong></p><p><strong>例1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line">    swap(num1, num2);</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;num1 = &quot;</span> + num1);</span><br><span class="line">    System.out.println(<span class="string">&quot;num2 = &quot;</span> + num2);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line"> </span><br><span class="line">    System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">    System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 20</span><br><span class="line">b = 10</span><br><span class="line">num1 = 10</span><br><span class="line">num2 = 20</span><br></pre></td></tr></table></figure><p><img src="/.com//Snipaste_2024-02-02_15-31-57.jpg"></p><p><strong>通过上面例子，我们已经知道了一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不一样，请看 例2.</strong></p><p><strong>例2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        change(arr);</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="comment">// 将数组的第一个元素变为0</span></span><br><span class="line">        array[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p><img src="/.com//Snipaste_2024-02-02_15-33-41.jpg"></p><p><strong>通过 example2 我们已经看到，实现一个改变对象参数状态的方法并不是一件难事。理由很简单，方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。</strong></p><p><strong>很多程序设计语言（特别是，C++和Pascal)提供了两种参数传递的方式：值调用和引用调用。有些程序员（甚至本书的作者）认为Java程序设计语言对对象采用的是引用调用，实际上，这种理解是不对的。由于这种误解具有一定的普遍性，所以下面给出一个反例来详细地阐述一下这个问题。</strong></p><p><strong>例3：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小张&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        Test.swap(s1, s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;s1:&quot;</span> + s1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;s2:&quot;</span> + s2.getName());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Student x, Student y)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">temp</span> <span class="operator">=</span> x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = temp;</span><br><span class="line">        System.out.println(<span class="string">&quot;x:&quot;</span> + x.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;y:&quot;</span> + y.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x:小李</span><br><span class="line">y:小张</span><br><span class="line">s1:小张</span><br><span class="line">s2:小李</span><br></pre></td></tr></table></figure><p>交换之前：</p><p><img src="/.com//Snipaste_2024-02-02_15-37-29.jpg"></p><p>交换之后：</p><p><img src="/.com//Snipaste_2024-02-02_15-37-35.jpg"></p><p>通过上面两张图可以很清晰的看出： 方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap方法的参数x和y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h5><p>Java程序设计语言对对象采用的不是引用调用，实际上，对象引用是按值传递的。</p><p>下面再总结一下Java中方法参数的使用情况：</p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型》</li><li>一个方法可以改变一个对象参数的状态。</li><li>一个方法不能让对象参数引用一个新的对象。</li></ul><h5 id="3-值传递和引用传递有什么区别"><a href="#3-值传递和引用传递有什么区别" class="headerlink" title="3.值传递和引用传递有什么区别"></a>3.值传递和引用传递有什么区别</h5><p><strong>值传递</strong>：指的是在方法调用时，传递的参数是按值的拷贝传递，传递的是值的拷贝，也就是说传递后就互不相关了。</p><p><strong>引用传递</strong>：指的是在方法调用时，传递的参数是按引用进行传递，其实传递的引用的地址，也就是变量所对应的内存空间的地址。传递的是值的引用，也就是说传递前和传递后都指向同一个引用（也就是同一个内存空间）。</p><p>Java基础知识点总结归纳，超级全面！（2021版）</p><p>Java程序员-张凯</p><p>于 2021-05-03 12:28:26 发布</p><p>阅读量7.8w<br> 收藏 1.2k</p><p>点赞数 270<br>文章标签： Java基础知识点 java Java基础知识点整理 Java基础知识点总结归纳<br>版权<br>凯哥今天看了网上好多关于Java基础知识点汇总的博客，but，感觉都不尽如人意，要么不全面，要么不准确，要么排版太乱了！</p><p>所以今天花了一天时间整理了一份Java基础知识点总结归纳，超级全面！希望对大家有帮助哈~</p><p>由于本文篇幅过长，博主为了方便大家阅读和收藏，特意将本文转成了一份PDF版的文档。</p><p>需要PDF版的朋友可以关注微信公众号：Java团长，发送“ 基础知识 ”即可获取哈~</p><p>一、Java概述<br>1、何为编程<br>编程就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</p><p>为了使计算机能够理解人的意图，人类就必须要将需解决的问题的思路、方法、和手段通过计算机能够理解的形式告诉计算机，使得计算机能够根据人的指令一步一步去工作，完成某种特定的任务。这种人和计算机之间交流的过程就是编程。</p><p>2、什么是Java<br>Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p><p>3、jdk1.5之后的三大版本<br>Java SE（J2SE，Java 2 Platform Standard Edition，标准版）<br>Java SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为Java EE和Java ME提供基础。</p><p>Java EE（J2EE，Java 2 Platform Enterprise Edition，企业版）<br>Java EE 以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web2.0应用程序。2018年2月，Eclipse 宣布正式将 JavaEE 更名为 JakartaEE</p><p>Java ME（J2ME，Java 2 Platform Micro Edition，微型版）<br>Java ME 以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。</p><p>4、JVM、JRE和JDK的关系<br>JVM<br>Java Virtual Machine是Java虚拟机，Java程序需要运行在虚拟机上，不同的平台有自己的虚拟机，因此Java语言可以实现跨平台。</p><p>JRE<br>Java Runtime Environment包括Java虚拟机和Java程序所需的核心类库等。核心类库主要是java.lang包：包含了运行Java程序必不可少的系统类，如基本数据类型、基本数学函数、字符串处理、线程、异常处理类等，系统缺省加载这个包</p><p>如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</p><p>JDK<br>Java Development Kit是提供给Java开发人员使用的，其中包含了Java的开发工具，也包括了JRE。所以安装了JDK，就无需再单独安装JRE了。其中的开发工具：编译工具(javac.exe)，打包工具(jar.exe)等</p><p>JVM&amp;JRE&amp;JDK关系图：</p><p>5、什么是跨平台性？原理是什么<br>所谓跨平台性，是指java语言编写的程序，一次编译后，可以在多个系统平台上运行。</p><p>实现原理：Java程序是通过java虚拟机在系统平台上运行的，只要该系统可以安装相应的java虚拟机，该系统就可以运行java程序。</p><p>6、Java语言有哪些特点<br>简单易学（Java语言的语法与C语言和C++语言很接近）</p><p>面向对象（封装，继承，多态）</p><p>平台无关性（Java虚拟机实现平台无关性）</p><p>支持网络编程并且很方便（Java语言诞生本身就是为简化网络编程设计的）</p><p>支持多线程（多线程机制使应用程序在同一时间并行执行多项任）</p><p>健壮性（Java语言的强类型机制、异常处理、垃圾的自动收集等）</p><p>安全性</p><p>7、什么是字节码？采用字节码的最大好处是什么<br>字节码：Java源代码经过虚拟机编译器编译后产生的文件（即扩展为.class的文件），它不面向任何特定的处理器，只面向虚拟机。</p><p>采用字节码的好处：</p><p>Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以Java程序运行时比较高效，而且，由于字节码并不专对一种特定的机器，因此，Java程序无须重新编译便可在多种不同的计算机上运行。</p><p>先看下java中的编译器和解释器：</p><p>Java中引入了虚拟机的概念，即在机器和编译程序之间加入了一层抽象的虚拟机器。这台虚拟的机器在任何平台上都提供给编译程序一个的共同的接口。编译程序只需要面向虚拟机，生成虚拟机能够理解的代码，然后由解释器来将虚拟机代码转换为特定系统的机器码执行。在Java中，这种供虚拟机理解的代码叫做字节码（即扩展为.class的文件），它不面向任何特定的处理器，只面向虚拟机。每一种平台的解释器是不同的，但是实现的虚拟机是相同的。Java源程序经过编译器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每一条要执行的字节码送给解释器，解释器将其翻译成特定机器上的机器码，然后在特定的机器上运行，这就是上面提到的Java的特点的编译与解释并存的解释。</p><p>Java源代码—-&gt;编译器—-&gt;jvm可执行的Java字节码(即虚拟指令)—-&gt;jvm—-&gt;jvm中解释器—–&gt;机器可执行的二进制机器码—-&gt;程序运行。</p><p>8、什么是Java程序的主类？应用程序和小程序的主类有何不同？<br>一个程序中可以有多个类，但只能有一个类是主类。在Java应用程序中，这个主类是指包含main()方法的类。而在Java小程序中，这个主类是一个继承自系统类JApplet或Applet的子类。应用程序的主类不一定要求是public类，但小程序的主类要求必须是public类。主类是Java程序执行的入口点。</p><p>9、Java应用程序与小程序之间有那些差别？<br>简单说应用程序是从主线程启动(也就是main()方法)。applet小程序没有main方法，主要是嵌在浏览器页面上运行(调用init()线程或者run()来启动)，嵌入浏览器这点跟flash的小游戏类似。</p><p>10、Java和C++的区别<br>我知道很多人没学过C++，但是面试官就是没事喜欢拿咱们Java和C++比呀！没办法！！！就算没学过C++，也要记下来！</p><p>都是面向对象的语言，都支持封装、继承和多态<br>Java不提供指针来直接访问内存，程序内存更加安全<br>Java的类是单继承的，C++支持多重继承；虽然Java的类不可以多继承，但是接口可以多继承。<br>Java有自动内存管理机制，不需要程序员手动释放无用内存<br>11、Oracle JDK 和 OpenJDK 的对比<br>Oracle JDK版本将每三年发布一次，而OpenJDK版本每三个月发布一次；<br>OpenJDK 是一个参考模型并且是完全开源的，而Oracle JDK是OpenJDK的一个实现，并不是完全开源的；<br>Oracle JDK 比 OpenJDK 更稳定。OpenJDK和Oracle JDK的代码几乎相同，但Oracle JDK有更多的类和一些错误修复。因此，如果您想开发企业&#x2F;商业软件，我建议您选择Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到Oracle JDK就可以解决问题；<br>在响应性和JVM性能方面，Oracle JDK与OpenJDK相比提供了更好的性能；<br>Oracle JDK不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；<br>Oracle JDK根据二进制代码许可协议获得许可，而OpenJDK根据GPL v2许可获得许可。<br>二、基础语法<br>1、数据类型</p><ol><li>Java有哪些数据类型<br>定义：Java语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</li></ol><p>分类</p><p>基本数据类型<br>数值型<br>整数类型(byte,short,int,long)<br>浮点类型(float,double)<br>字符型(char)<br>布尔型(boolean)<br>引用数据类型<br>类(class)<br>接口(interface)<br>数组([])<br>Java基本数据类型图</p><ol start="2"><li><p>switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上<br>在 Java 5 以前，switch(expr)中，expr 只能是 byte、short、char、int。从 Java5 开始，Java 中引入了枚举类型，expr 也可以是 enum 类型，从 Java 7 开始，expr 还可以是字符串（String），但是长整型（long）在目前所有的版本中都是不可以的。</p></li><li><p>用最有效率的方法计算 2 乘以 8<br>2 &lt;&lt; 3（左移 3 位相当于乘以 2 的 3 次方，右移 3 位相当于除以 2 的 3 次方）。</p></li><li><p>Math.round(11.5) 等于多少？Math.round(-11.5)等于多少<br>Math.round(11.5)的返回值是 12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加 0.5 然后进行下取整。</p></li><li><p>float f&#x3D;3.4;是否正确<br>不正确。3.4 是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f &#x3D;(float)3.4; 或者写成 float f &#x3D;3.4F;。</p></li><li><p>short s1 &#x3D; 1; s1 &#x3D; s1 + 1;有错吗?short s1 &#x3D; 1; s1 +&#x3D; 1;有错吗<br>对于 short s1 &#x3D; 1; s1 &#x3D; s1 + 1;由于 1 是 int 类型，因此 s1+1 运算结果也是 int型，需要强制转换类型才能赋值给 short 型。</p></li></ol><p>而 short s1 &#x3D; 1; s1 +&#x3D; 1;可以正确编译，因为 s1+&#x3D; 1;相当于 s1 &#x3D; (short(s1 + 1);其中有隐含的强制类型转换。</p><p>2、编码<br>Java语言采用何种编码方案？有何特点？<br>Java语言采用Unicode编码标准，Unicode（标准码），它为每个字符制订了一个唯一的数值，因此在任何的语言，平台，程序都可以放心的使用。</p><p>3、注释</p><ol><li>什么Java注释<br>定义：用于解释说明程序的文字</li></ol><p>分类</p><p>单行注释<br>格式： &#x2F;&#x2F; 注释文字<br>多行注释<br>格式： &#x2F;* 注释文字 <em>&#x2F;<br>文档注释<br>格式：&#x2F;</em>* 注释文字 *&#x2F;<br>作用</p><p>在程序中，尤其是复杂的程序中，适当地加入注释可以增加程序的可读性，有利于程序的修改、调试和交流。注释的内容在程序编译的时候会被忽视，不会产生目标代码，注释的部分不会对程序的执行结果产生任何影响。</p><p>注意事项：多行和文档注释都不能嵌套使用。</p><p>4、访问修饰符</p><ol><li>访问修饰符 public,private,protected,以及不写（默认）时的区别<br>定义：Java中，可以使用访问修饰符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</li></ol><p>分类</p><p>private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）<br>default (即缺省，什么也不写，不使用任何关键字）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。<br>protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。<br>public : 对所有类可见。使用对象：类、接口、变量、方法</p><p>访问修饰符图</p><p>5、运算符<br>&amp;和&amp;&amp;的区别<br>&amp;运算符有两种用法：(1)按位与；(2)逻辑与。</p><p>&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true 整个表达式的值才是 true。&amp;&amp;之所以称为短路运算，是因为如果&amp;&amp;左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。</p><p>注意：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p><p>6、关键字</p><ol><li><p>Java 有没有 goto<br>goto 是 Java 中的保留字，在目前版本的 Java 中没有使用。</p></li><li><p>final 有什么用？<br>用于修饰类、属性和方法；</p></li></ol><p>被final修饰的类不可以被继承<br>被final修饰的方法不可以被重写<br>被final修饰的变量不可以被改变，被final修饰不可变的是变量的引用，而不是引用指向的内容，引用指向的内容是可以改变的</p><ol start="3"><li>final finally finalize区别<br>final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。<br>finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。<br>finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System.gc() 方法的时候，由垃圾回收器调用finalize()，回收垃圾，一个对象是否可回收的最后判断。</li><li>this关键字的用法<br>this是自身的一个对象，代表对象本身，可以理解为：指向对象本身的一个指针。</li></ol><p>this的用法在java中大体可以分为3种：</p><p>①. 普通的直接引用，this相当于是指向当前对象本身。</p><p>②. 形参与成员名字重名，用this来区分：</p><p>public Person(String name, int age) {<br>    this.name &#x3D; name;<br>    this.age &#x3D; age;<br>}<br>③. 引用本类的构造函数</p><p>class Person{<br>    private String name;<br>    private int age;</p><pre><code>public Person() &#123;&#125; public Person(String name) &#123;    this.name = name;&#125;public Person(String name, int age) &#123;    this(name);    this.age = age;&#125;</code></pre><p>}</p><ol start="5"><li>super关键字的用法<br>super可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类。</li></ol><p>super也有三种用法：</p><p>①. 普通的直接引用</p><p>与this类似，super相当于是指向当前对象的父类的引用，这样就可以用super.xxx来引用父类的成员。</p><p>②. 子类中的成员变量或方法与父类中的成员变量或方法同名时，用super进行区分</p><p>class Person{<br>    protected String name;</p><pre><code>public Person(String name) &#123;    this.name = name;&#125;</code></pre><p>}</p><p>class Student extends Person{<br>    private String name;</p><pre><code>public Student(String name, String name1) &#123;    super(name);    this.name = name1;&#125; public void getInfo()&#123;    System.out.println(this.name);      //Child    System.out.println(super.name);     //Father&#125;</code></pre><p>}</p><p>public class Test {<br>    public static void main(String[] args) {<br>       Student s1 &#x3D; new Student(“Father”,”Child”);<br>       s1.getInfo();</p><pre><code>&#125;</code></pre><p>}</p><p>③. 引用父类构造函数</p><p>super（参数）：调用父类中的某一个构造函数（应该为构造函数中的第一条语句）。<br>this（参数）：调用本类中另一种形式的构造函数（应该为构造函数中的第一条语句）。</p><ol start="6"><li>this与super的区别<br>super:　它引用当前对象的直接父类中的成员（用来访问直接父类中被隐藏的父类中成员数据或函数，基类与派生类中有相同成员定义时如：super.变量名 super.成员函数据名（实参）<br>this：它代表当前对象名（在程序中易产生二义性之处，应使用this来指明当前对象；如果函数的形参与类中的成员数据同名，这时需用this来指明成员变量名）<br>super()和this()类似,区别是，super()在子类中调用父类的构造方法，this()在本类内调用本类的其它构造方法。<br>super()和this()均需放在构造方法内第一行。<br>尽管可以用this调用一个构造器，但却不能调用两个。<br>this和super不能同时出现在一个构造函数里面，因为this必然会调用其它的构造函数，其它的构造函数必然也会有super语句的存在，所以在同一个构造函数里面有相同的语句，就失去了语句的意义，编译器也不会通过。<br>this()和super()都指的是对象，所以，均不可以在static环境中使用。包括：static变量,static方法，static语句块。<br>从本质上讲，this是一个指向本对象的指针, 然而super是一个Java关键字。</li><li>static存在的主要意义<br>static的主要意义是在于创建独立于具体对象的域变量或者方法。以致于即使没有创建对象，也能使用属性和调用方法！</li></ol><p>static关键字还有一个比较关键的作用就是 用来形成静态代码块以优化程序性能。static块可以置于类中的任何地方，类中可以有多个static块。在类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次。</p><p>为什么说static块可以用来优化程序性能，是因为它的特性:只会在类加载的时候执行一次。因此，很多时候会将一些只需要进行一次的初始化操作都放在static代码块中进行。</p><ol start="8"><li>static的独特之处<br>被static修饰的变量或者方法是独立于该类的任何对象，也就是说，这些变量和方法不属于任何一个实例对象，而是被类的实例对象所共享。<br>怎么理解 “被类的实例对象所共享” 这句话呢？就是说，一个类的静态成员，它是属于大伙的【大伙指的是这个类的多个对象实例，我们都知道一个类可以创建多个实例！】，所有的类对象共享的，不像成员变量是自个的【自个指的是这个类的单个实例对象】…我觉得我已经讲的很通俗了，你明白了咩？</li></ol><p>在该类被第一次加载的时候，就会去加载被static修饰的部分，而且只在类第一次使用时加载并进行初始化，注意这是第一次用就要初始化，后面根据需要是可以再次赋值的。<br>static变量值在类加载的时候分配空间，以后创建类对象的时候不会重新分配。赋值的话，是可以任意赋值的！<br>被static修饰的变量或者方法是优先于对象存在的，也就是说当一个类加载完毕之后，即便没有创建对象，也可以去访问。</p><ol start="9"><li>static应用场景<br>因为static是被类的实例对象所共享，因此如果某个成员变量是被所有对象所共享的，那么这个成员变量就应该定义为静态变量。</li></ol><p>因此比较常见的static应用场景有：</p><p>修饰成员变量<br>修饰成员方法<br>静态代码块<br>修饰类【只能修饰内部类也就是静态内部类】<br>静态导包</p><ol start="10"><li>static注意事项<br>静态只能访问静态。<br>非静态既可以访问非静态的，也可以访问静态的。<br>7、流程控制语句</li><li>break ,continue ,return 的区别及作用<br>break 跳出总上一层循环，不再执行循环(结束当前的循环体)</li></ol><p>continue 跳出本次循环，继续执行下次循环(结束正在执行的循环 进入下一个循环条件)</p><p>return 程序返回，不再执行下面的代码(结束当前的方法 直接返回)</p><ol start="2"><li>在 Java 中，如何跳出当前的多重嵌套循环<br>在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。例如：</li></ol><p>public static void main(String[] args) {<br>    ok:<br>    for (int i &#x3D; 0; i &lt; 10; i++) {<br>        for (int j &#x3D; 0; j &lt; 10; j++) {<br>            System.out.println(“i&#x3D;” + i + “,j&#x3D;” + j);<br>            if (j &#x3D;&#x3D; 5) {<br>                break ok;<br>            }</p><pre><code>    &#125;&#125;</code></pre><p>}<br>三、面向对象<br>1、面向对象概述<br>面向对象和面向过程的区别<br>面向过程：</p><p>优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、Linux&#x2F;Unix等一般采用面向过程开发，性能是最重要的因素。</p><p>缺点：没有面向对象易维护、易复用、易扩展</p><p>面向对象：</p><p>优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</p><p>缺点：性能比面向过程低</p><p>面向过程是具体化的，流程化的，解决一个问题，你需要一步一步的分析，一步一步的实现。</p><p>面向对象是模型化的，你只需抽象出一个类，这是一个封闭的盒子，在这里你拥有数据也拥有解决问题的方法。需要什么功能直接使用就可以了，不必去一步一步的实现，至于这个功能是如何实现的，管我们什么事？我们会用就可以了。</p><p>面向对象的底层其实还是面向过程，把面向过程抽象成类，然后封装，方便我们使用的就是面向对象了。</p><p>2、面向对象三大特性</p><ol><li>面向对象的特征有哪些方面<br>面向对象的特征主要有以下几个方面：</li></ol><p>抽象：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。</p><p>封装</p><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><p>继承</p><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。</p><p>关于继承如下 3 点请记住：</p><p>子类拥有父类非 private 的属性和方法。<br>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。<br>子类可以用自己的方式实现父类的方法。（以后介绍）。<br>多态</p><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><p>其中Java 面向对象编程三大特性：封装 继承 多态</p><p>封装：隐藏对象的属性和实现细节，仅对外提供公共访问方式，将变化隔离，便于使用，提高复用性和安全性。</p><p>继承：继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承可以提高代码复用性。继承是多态的前提。</p><p>关于继承如下 3 点请记住：</p><p>子类拥有父类非 private 的属性和方法。</p><p>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p><p>子类可以用自己的方式实现父类的方法。</p><p>多态性：父类或接口定义的引用变量可以指向子类或具体实现类的实例对象。提高了程序的拓展性。</p><p>在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><p>方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）。</p><p>一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：</p><p>方法重写（子类继承父类并重写父类中已有的或抽象的方法）；<br>对象造型（用父类型引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。</p><ol start="2"><li>什么是多态机制？Java语言是如何实现多态的？<br>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。</li></ol><p>多态分为编译时多态和运行时多态。其中编辑时多态是静态的，主要是指方法的重载，它是根据参数列表的不同来区分不同的函数，通过编辑之后会变成两个不同的函数，在运行时谈不上多态。而运行时多态是动态的，它是通过动态绑定来实现的，也就是我们所说的多态性。</p><p>多态的实现</p><p>Java实现多态有三个必要条件：继承、重写、向上转型。</p><p>继承：在多态中必须存在有继承关系的子类和父类。</p><p>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</p><p>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</p><p>只有满足了上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。</p><p>对于Java而言，它多态的实现机制遵循一个原则：当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。</p><ol start="3"><li>面向对象五大基本原则是什么（可选）<br>单一职责原则SRP(Single Responsibility Principle)<br>类的功能要单一，不能包罗万象，跟杂货铺似的。</li></ol><p>开放封闭原则OCP(Open－Close Principle)<br>一个模块对于拓展是开放的，对于修改是封闭的，想要增加功能热烈欢迎，想要修改，哼，一万个不乐意。</p><p>里式替换原则LSP(the Liskov Substitution Principle LSP)<br>子类可以替换父类出现在父类能够出现的任何地方。比如你能代表你爸去你姥姥家干活。哈哈~~</p><p>依赖倒置原则DIP(the Dependency Inversion Principle DIP)<br>高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。就是你出国要说你是中国人，而不能说你是哪个村子的。比如说中国人是抽象的，下面有具体的xx省，xx市，xx县。你要依赖的抽象是中国人，而不是你是xx村的。</p><p>接口分离原则ISP(the Interface Segregation Principle ISP)<br>设计时采用多个与特定客户类有关的接口比采用一个通用的接口要好。就比如一个手机拥有打电话，看视频，玩游戏等功能，把这几个功能拆分成不同的接口，比在一个接口里要好的多。</p><p>3、类与接口</p><ol><li>抽象类和接口的对比<br>抽象类是用来捕捉子类的通用特性的。接口是抽象方法的集合。</li></ol><p>从设计层面来说，抽象类是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</p><p>相同点</p><p>接口和抽象类都不能实例化<br>都位于继承的顶端，用于被其他实现或继承<br>都包含抽象方法，其子类都必须覆写这些抽象方法</p><p>不同点</p><p>备注：Java8中接口中引入默认方法和静态方法，以此来减少抽象类和接口之间的差异。</p><p>现在，我们可以为接口提供默认实现的方法了，并且不用强制子类来实现它。</p><p>接口和抽象类各有优缺点，在接口和抽象类的选择上，必须遵守这样一个原则：</p><p>行为模型应该总是通过接口而不是抽象类定义，所以通常是优先选用接口，尽量少用抽象类。<br>选择抽象类的时候通常是如下情况：需要定义子类的行为，又要为子类提供通用的功能。</p><ol start="2"><li><p>普通类和抽象类有哪些区别？<br>普通类不能包含抽象方法，抽象类可以包含抽象方法。<br>抽象类不能直接实例化，普通类可以直接实例化。</p></li><li><p>抽象类能使用 final 修饰吗？<br>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类</p></li><li><p>创建一个对象用什么关键字？对象实例与对象引用有何不同？<br>new关键字，new创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向0个或1个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有n个引用指向它（可以用n条绳子系住一个气球）</p></li></ol><p>4、变量与方法</p><ol><li>成员变量与局部变量的区别有哪些<br>变量：在程序执行的过程中，在某个范围内其值可以发生改变的量。从本质上讲，变量其实是内存中的一小块区域</li></ol><p>成员变量：方法外部，类内部定义的变量</p><p>局部变量：类的方法中的变量。</p><p>成员变量和局部变量的区别</p><p>作用域</p><p>成员变量：针对整个类有效。<br>局部变量：只在某个范围内有效。(一般指的就是方法,语句体内)</p><p>存储位置</p><p>成员变量：随着对象的创建而存在，随着对象的消失而消失，存储在堆内存中。<br>局部变量：在方法被调用，或者语句被执行的时候存在，存储在栈内存中。当方法调用完，或者语句结束后，就自动释放。</p><p>生命周期</p><p>成员变量：随着对象的创建而存在，随着对象的消失而消失<br>局部变量：当方法调用完，或者语句结束后，就自动释放。</p><p>初始值</p><p>成员变量：有默认初始值。</p><p>局部变量：没有默认初始值，使用前必须赋值。</p><p>使用原则</p><p>在使用变量时需要遵循的原则为：就近原则<br>首先在局部范围找，有就使用；接着在成员位置找。</p><ol start="2"><li><p>在Java中定义一个不做事且没有参数的构造方法的作用<br>Java程序在执行子类的构造方法之前，如果没有用super()来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用super()来调用父类中特定的构造方法，则编译时将发生错误，因为Java程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。</p></li><li><p>在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？<br>帮助子类做初始化工作。</p></li><li><p>一个类的构造方法的作用是什么？若一个类没有声明构造方法，改程序能正确执行吗？为什么？<br>主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。</p></li><li><p>构造方法有哪些特性？<br>名字与类名相同；</p></li></ol><p>没有返回值，但不能用void声明构造函数；</p><p>生成类的对象时自动执行，无需调用。</p><ol start="6"><li>静态变量和实例变量区别<br>静态变量： 静态变量由于不属于任何实例对象，属于类的，所以在内存中只会有一份，在类的加载过程中，JVM只为静态变量分配一次内存空间。</li></ol><p>实例变量： 每次创建对象，都会为每个对象分配成员变量内存空间，实例变量是属于实例对象的，在内存中，创建几次对象，就有几份成员变量。</p><ol start="7"><li>静态变量与普通变量区别<br>static变量也称作静态变量，静态变量和非静态变量的区别是：静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。而非静态变量是对象所拥有的，在创建对象的时候被初始化，存在多个副本，各个对象拥有的副本互不影响。</li></ol><p>还有一点就是static成员变量的初始化顺序按照定义的顺序进行初始化。</p><ol start="8"><li>静态方法和实例方法有何不同？<br>静态方法和实例方法的区别主要体现在两个方面：</li></ol><p>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。<br>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制</p><ol start="9"><li><p>在一个静态方法内调用一个非静态成员为什么是非法的？<br>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p></li><li><p>什么是方法的返回值？返回值的作用是什么？<br>方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用:接收出结果，使得它可以用于其他的操作！</p></li></ol><p>5、内部类</p><ol><li><p>什么是内部类？<br>在Java中，可以将一个类的定义放在另外一个类的定义内部，这就是内部类。内部类本身就是类的一个属性，与其他属性定义方式一致。</p></li><li><p>内部类的分类有哪些<br>内部类可以分为四种：成员内部类、局部内部类、匿名内部类和静态内部类。</p></li></ol><p>静态内部类</p><p>定义在类内部的静态类，就是静态内部类。</p><p>public class Outer {</p><pre><code>private static int radius = 1; static class StaticInner &#123;    public void visit() &#123;        System.out.println(&quot;visit outer static  variable:&quot; + radius);    &#125;&#125;</code></pre><p>}</p><p>静态内部类可以访问外部类所有的静态变量，而不可访问外部类的非静态变量；静态内部类的创建方式，new 外部类.静态内部类()，如下：</p><p>Outer.StaticInner inner &#x3D; new Outer.StaticInner();<br>inner.visit();<br>成员内部类</p><p>定义在类内部，成员位置上的非静态类，就是成员内部类。</p><p>public class Outer {</p><pre><code>private static  int radius = 1;private int count =2; class Inner &#123;    public void visit() &#123;        System.out.println(&quot;visit outer static  variable:&quot; + radius);        System.out.println(&quot;visit outer   variable:&quot; + count);    &#125;&#125;</code></pre><p>}</p><p>成员内部类可以访问外部类所有的变量和方法，包括静态和非静态，私有和公有。成员内部类依赖于外部类的实例，它的创建方式外部类实例.new 内部类()，如下：</p><p>Outer outer &#x3D; new Outer();<br>Outer.Inner inner &#x3D; outer.new Inner();<br>inner.visit();<br>局部内部类</p><p>定义在方法中的内部类，就是局部内部类。</p><p>public class Outer {</p><pre><code>private  int out_a = 1;private static int STATIC_b = 2; public void testFunctionClass()&#123;    int inner_c =3;    class Inner &#123;        private void fun()&#123;            System.out.println(out_a);            System.out.println(STATIC_b);            System.out.println(inner_c);        &#125;    &#125;    Inner  inner = new Inner();    inner.fun();&#125;public static void testStaticFunctionClass()&#123;    int d =3;    class Inner &#123;        private void fun()&#123;            // System.out.println(out_a); 编译错误，定义在静态方法中的局部类不可以访问外部类的实例变量            System.out.println(STATIC_b);            System.out.println(d);        &#125;    &#125;    Inner  inner = new Inner();    inner.fun();&#125;</code></pre><p>}<br>定义在实例方法中的局部类可以访问外部类的所有变量和方法，定义在静态方法中的局部类只能访问外部类的静态变量和方法。局部内部类的创建方式，在对应方法内，new 内部类()，如下：</p><p> public static void testStaticFunctionClass(){<br>    class Inner {<br>    }<br>    Inner  inner &#x3D; new Inner();<br> }<br>匿名内部类</p><p>匿名内部类就是没有名字的内部类，日常开发中使用的比较多。</p><p>public class Outer {</p><pre><code>private void test(final int i) &#123;    new Service() &#123;        public void method() &#123;            for (int j = 0; j &lt; i; j++) &#123;                System.out.println(&quot;匿名内部类&quot; );            &#125;        &#125;    &#125;.method();&#125;</code></pre><p> }<br> &#x2F;&#x2F;匿名内部类必须继承或实现一个已有的接口<br> interface Service{<br>    void method();<br>}<br>除了没有名字，匿名内部类还有以下特点：</p><p>匿名内部类必须继承一个抽象类或者实现一个接口。<br>匿名内部类不能定义任何静态成员和静态方法。<br>当所在的方法的形参需要被匿名内部类使用时，必须声明为 final。<br>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。<br>匿名内部类创建方式：</p><p>new 类&#x2F;接口{<br>  &#x2F;&#x2F;匿名内部类实现部分<br>}</p><ol start="3"><li>内部类的优点<br>我们为什么要使用内部类呢？因为它有以下优点：</li></ol><p>一个内部类对象可以访问创建它的外部类对象的内容，包括私有数据！<br>内部类不为同一包的其他类所见，具有很好的封装性；<br>内部类有效实现了“多重继承”，优化 java 单继承的缺陷。<br>匿名内部类可以很方便的定义回调。</p><ol start="4"><li>内部类有哪些应用场景<br>一些多算法场合<br>解决一些非面向对象的语句块。<br>适当使用内部类，使得代码更加灵活和富有扩展性。<br>当某个类除了它的外部类，不再被其他的类使用时。</li><li>局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final？<br>局部内部类和匿名内部类访问局部变量的时候，为什么变量必须要加上final呢？它内部原理是什么呢？</li></ol><p>先看这段代码：</p><p>public class Outer {</p><pre><code>void outMethod()&#123;    final int a =10;    class Inner &#123;        void innerMethod()&#123;            System.out.println(a);        &#125;     &#125;&#125;</code></pre><p>}<br>以上例子，为什么要加final呢？是因为生命周期不一致， 局部变量直接存储在栈中，当方法执行结束后，非final的局部变量就被销毁。而局部内部类对局部变量的引用依然存在，如果局部内部类要调用局部变量时，就会出错。加了final，可以确保局部内部类使用的变量与外层的局部变量区分开，解决了这个问题。</p><ol start="6"><li><p>内部类相关，看程序说出运行结果<br>public class Outer {<br> private int age &#x3D; 12;</p><p> class Inner {<br> private int age &#x3D; 13;<br> public void print() {<br>     int age &#x3D; 14;<br>     System.out.println(“局部变量：” + age);<br>     System.out.println(“内部类变量：” + this.age);<br>     System.out.println(“外部类变量：” + Outer.this.age);<br> }<br> }</p><p> public static void main(String[] args) {<br> Outer.Inner in &#x3D; new Outer().new Inner();<br> in.print();<br> }</p></li></ol><p>}<br>运行结果：</p><p>局部变量：14<br>内部类变量：13<br>外部类变量：12<br>6、重写与重载</p><ol><li><p>构造器（constructor）是否可被重写（override）<br>构造器不能被继承，因此不能被重写，但可以被重载。</p></li><li><p>重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？<br>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p></li></ol><p>重载：发生在同一个类中，方法名相同参数列表不同（参数类型不同、个数不同、顺序不同），与方法返回值和访问修饰符无关，即重载的方法不能根据返回类型进行区分</p><p>重写：发生在父子类中，方法名、参数列表必须相同，返回值小于等于父类，抛出的异常小于等于父类，访问修饰符大于等于父类（里氏代换原则）；如果父类方法访问修饰符为private则子类中就不是重写。</p><p>7、对象相等判断</p><ol><li>&#x3D;&#x3D; 和 equals 的区别是什么<br>&#x3D;&#x3D; : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象。(基本数据类型 &#x3D;&#x3D; 比较的是值，引用数据类型 &#x3D;&#x3D; 比较的是内存地址)</li></ol><p>equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><p>情况1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“&#x3D;&#x3D;”比较这两个对象。</p><p>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来两个对象的内容相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</p><p>举个例子：</p><p>public class test1 {<br>    public static void main(String[] args) {<br>        String a &#x3D; new String(“ab”); &#x2F;&#x2F; a 为一个引用<br>        String b &#x3D; new String(“ab”); &#x2F;&#x2F; b为另一个引用,对象的内容一样<br>        String aa &#x3D; “ab”; &#x2F;&#x2F; 放在常量池中<br>        String bb &#x3D; “ab”; &#x2F;&#x2F; 从常量池中查找<br>        if (aa &#x3D;&#x3D; bb) &#x2F;&#x2F; true<br>            System.out.println(“aa&#x3D;&#x3D;bb”);<br>        if (a &#x3D;&#x3D; b) &#x2F;&#x2F; false，非同一对象<br>            System.out.println(“a&#x3D;&#x3D;b”);<br>        if (a.equals(b)) &#x2F;&#x2F; true<br>            System.out.println(“aEQb”);<br>        if (42 &#x3D;&#x3D; 42.0) { &#x2F;&#x2F; true<br>            System.out.println(“true”);<br>        }<br>    }<br>}<br>说明：</p><p>String中的equals方法是被重写过的，因为object的equals方法是比较的对象的内存地址，而String的equals方法比较的是对象的值。<br>当创建String类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个String对象。</p><ol start="2"><li>hashCode 与 equals (重要)<br>HashSet如何检查重复</li></ol><p>两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？</p><p>hashCode和equals方法的关系</p><p>面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写equals时必须重写hashCode方法？”</p><p>hashCode()介绍</p><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK的Object.java中，这就意味着Java中的任何类都包含有hashCode()函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）</p><p>为什么要有 hashCode</p><p>我们以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：</p><p>当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 equals()方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的Java启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p>hashCode()与equals()的相关规定</p><p>如果两个对象相等，则hashcode一定也是相同的</p><p>两个对象相等，对两个对象分别调用equals方法都返回true</p><p>两个对象有相同的hashcode值，它们也不一定是相等的</p><p>因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖</p><p>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p><p>8、值传递</p><ol><li><p>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递<br>是值传递。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的</p></li><li><p>为什么 Java 中只有值传递<br>首先回顾一下在程序设计语言中有关将参数传递给方法（或函数）的一些专业术语。按值调用(call by value)表示方法接收的是调用者提供的值，而按引用调用（call by reference)表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。 它用来描述各种程序设计语言（不只是Java)中方法参数传递方式。</p></li></ol><p>Java程序设计语言总是采用按值调用。也就是说，方法得到的是所有参数值的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容。</p><p>下面通过 3 个例子来给大家说明</p><p>example 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><pre><code>swap(num1, num2); System.out.println(&quot;num1 = &quot; + num1);System.out.println(&quot;num2 = &quot; + num2);</code></pre><p>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br></pre></td></tr></table></figure><p>}<br>结果：</p><p>a &#x3D; 20<br>b &#x3D; 10<br>num1 &#x3D; 10<br>num2 &#x3D; 20<br>解析：</p><p>在swap方法中，a、b的值进行交换，并不会影响到 num1、num2。因为，a、b中的值，只是从 num1、num2 的复制过来的。也就是说，a、b相当于num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。</p><p>通过上面例子，我们已经知道了一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不一样，请看 example2.</p><p>example 2</p><pre><code>public static void main(String[] args) &#123;    int[] arr = &#123; 1, 2, 3, 4, 5 &#125;;    System.out.println(arr[0]);    change(arr);    System.out.println(arr[0]);&#125; public static void change(int[] array) &#123;    // 将数组的第一个元素变为0    array[0] = 0;&#125;</code></pre><p>结果：</p><p>1<br>0<br>解析：</p><p>array 被初始化 arr 的拷贝也就是一个对象的引用，也就是说 array 和 arr 指向的时同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上。</p><p>通过 example2 我们已经看到，实现一个改变对象参数状态的方法并不是一件难事。理由很简单，方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。</p><p>很多程序设计语言（特别是，C++和Pascal)提供了两种参数传递的方式：值调用和引用调用。有些程序员（甚至本书的作者）认为Java程序设计语言对对象采用的是引用调用，实际上，这种理解是不对的。由于这种误解具有一定的普遍性，所以下面给出一个反例来详细地阐述一下这个问题。</p><p>example 3</p><p>public class Test {</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小张&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">    Test.swap(s1, s2);</span><br><span class="line">    System.out.println(<span class="string">&quot;s1:&quot;</span> + s1.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;s2:&quot;</span> + s2.getName());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Student x, Student y)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">temp</span> <span class="operator">=</span> x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">    System.out.println(<span class="string">&quot;x:&quot;</span> + x.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;y:&quot;</span> + y.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><p>结果：</p><p>x:小李<br>y:小张<br>s1:小张<br>s2:小李<br>解析：</p><p>交换之前：</p><p>交换之后：</p><p>通过上面两张图可以很清晰的看出： 方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap方法的参数x和y被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝</p><p>总结</p><p>Java程序设计语言对对象采用的不是引用调用，实际上，对象引用是按值传递的。</p><p>下面再总结一下Java中方法参数的使用情况：</p><p>一个方法不能修改一个基本数据类型的参数（即数值型或布尔型》<br>一个方法可以改变一个对象参数的状态。<br>一个方法不能让对象参数引用一个新的对象。</p><ol start="3"><li>值传递和引用传递有什么区别<br>值传递：指的是在方法调用时，传递的参数是按值的拷贝传递，传递的是值的拷贝，也就是说传递后就互不相关了。</li></ol><p>引用传递：指的是在方法调用时，传递的参数是按引用进行传递，其实传递的引用的地址，也就是变量所对应的内存空间的地址。传递的是值的引用，也就是说传递前和传递后都指向同一个引用（也就是同一个内存空间）。</p><h3 id="9、Java包"><a href="#9、Java包" class="headerlink" title="9、Java包"></a>9、Java包</h3><h5 id="1-JDK-中常用的包有哪些"><a href="#1-JDK-中常用的包有哪些" class="headerlink" title="1. JDK 中常用的包有哪些"></a>1. JDK 中常用的包有哪些</h5><ul><li>java.lang：这个是系统的基础类；</li><li>java.io：这里面是所有输入输出有关的类，比如文件操作等；</li><li>java.nio：为了完善 io 包中的功能，提高 io 包中性能而写的一个新包；</li><li>java.net：这里面是与网络有关的类；</li><li>java.util：这个是系统辅助类，特别是集合类；</li><li>java.sql：这个是数据库操作的类。</li></ul><h5 id="2-import-java和javax有什么区别"><a href="#2-import-java和javax有什么区别" class="headerlink" title="2.import java和javax有什么区别"></a>2.import java和javax有什么区别</h5><p>刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来说使用。然而随着时间的推移，javax 逐渐的扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java 包将是太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准API的一部分。</p><p>所以，实际上java和javax没有区别。这都是一个名字。</p><h2 id="四、IO流"><a href="#四、IO流" class="headerlink" title="四、IO流"></a>四、IO流</h2><h3 id="1、java-中-IO-流分为几种"><a href="#1、java-中-IO-流分为几种" class="headerlink" title="1、java 中 IO 流分为几种?"></a>1、java 中 IO 流分为几种?</h3><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul><p>Java Io流共涉及40多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0流的40多个类都是从如下4个抽象类基类中派生出来的。</p><ul><li><p>InputStream&#x2F;Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</p></li><li><p>OutputStream&#x2F;Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</p><p><img src="/.com//aaaa.png" alt="aaaa"></p><p><img src="/.com//aaaaaaaaaaaaaaa.png" alt="aaaaaaaaaaaaaaa"></p></li></ul><h3 id="2、Files的常用方法都有哪些？"><a href="#2、Files的常用方法都有哪些？" class="headerlink" title="2、Files的常用方法都有哪些？"></a>2、Files的常用方法都有哪些？</h3><ul><li>Files. exists()：检测文件路径是否存在。</li><li>Files. createFile()：创建文件。</li><li>Files. createDirectory()：创建文件夹。</li><li>Files. delete()：删除一个文件或目录。</li><li>Files. copy()：复制文件。</li><li>Files. move()：移动文件。</li><li>Files. size()：查看文件个数。</li><li>Files. read()：读取文件。</li><li>Files. write()：写入文件。</li></ul><h3 id="3、字节流和字符流的区别"><a href="#3、字节流和字符流的区别" class="headerlink" title="3、字节流和字符流的区别"></a>3、字节流和字符流的区别</h3><p>1.字节流读取的时候，读到一个字节就返回一个字节； 字符流使用了字节流读到一个或多个字节（中文对应的字节数是两个，在UTF-8码表中是3个字节）时。先去查指定的编码表，将查到的字符返回。<br>2.字节流可以处理所有类型数据，如：图片，MP3，AVI视频文件，而字符流只能处理字符数据。只要是处理纯文本数据，就要优先考虑使用字符流，除此之外都用字节流。</p><h3 id="4、转换流"><a href="#4、转换流" class="headerlink" title="4、转换流"></a>4、转换流</h3><p>InputStreamReader 是字节流通向字符流的桥梁<br>OutputStreamWriter 是字符流通向字节流的桥梁<br>转换流可以将字节转成字符，原因在于，将获取到的字节通过查编码表获取到指定对应字符。<br>转换流的最强功能就是基于 字节流 + 编码表 。没有转换，没有字符流</p><h3 id="5、打印流"><a href="#5、打印流" class="headerlink" title="5、打印流"></a>5、打印流</h3><p>PrintWriter<br>PrintStream<br>注:<br>A:只操作目的地,不操作数据源<br>B:可以操作任意类型的数据<br>C:如果启用了自动刷新，在调用println(),printf(),format()方法的时候，能够换行并刷新<br>D:可以直接操作文件</p><h3 id="6、序列化流"><a href="#6、序列化流" class="headerlink" title="6、序列化流"></a>6、序列化流</h3><p>ObjectOutputStream序列化流<br>ObjectInputStream反序列化流<br>序列化：把对象作为一个整体按照流一样的方式传输或者存储。<br>反序列化：把网络中的流数据或者文件中的流数据还原成对象<br>主要方法有：<br>1.Object readObject();该方法抛出异常：ClassNotFountException。</p><ol start="2"><li>void writeObject(Object)：被写入的对象必须实现一个接口：Serializable，否则就会抛出：NotSerializableException<br>3.如果实现了该接口，想解决黄线问题就生成一个随机的serialVersionUID号码</li></ol><p>7、综合小案例:  键盘录入数据保存到文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReaderDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//创建键盘录入</span></span><br><span class="line">    InputStream is=System.in;</span><br><span class="line">    <span class="comment">//将字节流转换为字符流</span></span><br><span class="line">    InputStreamReader isr=<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">    <span class="comment">//高效字符流读取数据</span></span><br><span class="line">    BufferedReader br=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">    <span class="comment">//打印流写入数据,第一个true表示如果文件中有内容就追加数据,第二个true表示启用自动刷新</span></span><br><span class="line">    PrintWriter pw=<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;a.txt&quot;</span>,<span class="literal">true</span>),<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    String line=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;over&quot;</span>.equals(line))&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//PrintWriter启用自动刷新</span></span><br><span class="line">        pw.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    pw.close();</span><br><span class="line">    br.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、反射"><a href="#五、反射" class="headerlink" title="五、反射"></a>五、反射</h2><h3 id="1、什么是反射机制？"><a href="#1、什么是反射机制？" class="headerlink" title="1、什么是反射机制？"></a>1、什么是反射机制？</h3><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p><strong>静态编译和动态编译</strong></p><p><strong>静态编译：</strong>在编译时确定类型，绑定对象<br><strong>动态编译：</strong>运行时确定类型，绑定对象</p><h3 id="2、反射机制优缺点"><a href="#2、反射机制优缺点" class="headerlink" title="2、反射机制优缺点"></a>2、反射机制优缺点</h3><ul><li>优点： 运行期类型的判断，动态加载类，提高代码灵活度。</li><li>缺点： 性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能比直接的java代码要慢很多。</li></ul><h3 id="3、-反射机制的应用场景有哪些？"><a href="#3、-反射机制的应用场景有哪些？" class="headerlink" title="3、 反射机制的应用场景有哪些？"></a>3、 反射机制的应用场景有哪些？</h3><p>反射是框架设计的灵魂。</p><p>在我们平时的项目开发过程中，基本上很少会直接使用到反射机制，但这不能说明反射机制没有用，实际上有很多设计、开发都与反射机制有关，例如模块化的开发，通过反射去调用对应的字节码；动态代理设计模式也采用了反射机制，还有我们日常使用的 Spring／Hibernate 等框架也大量使用到了反射机制。</p><h3 id="4、Java获取反射的三种方法"><a href="#4、Java获取反射的三种方法" class="headerlink" title="4、Java获取反射的三种方法"></a>4、Java获取反射的三种方法</h3><p>1.通过new对象实现反射机制</p><p>2.通过路径实现反射机制</p><p>3.通过类名实现反射机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Get</span> &#123;</span><br><span class="line">    <span class="comment">//获取反射机制三种方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//方式一(通过建立对象)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">classobj1</span> <span class="operator">=</span> stu.getClass();</span><br><span class="line">        System.out.println(classobj1.getName());</span><br><span class="line">        <span class="comment">//方式二（所在通过路径-相对路径）</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">classobj2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;fanshe.Student&quot;</span>);</span><br><span class="line">        System.out.println(classobj2.getName());</span><br><span class="line">        <span class="comment">//方式三（通过类名）</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">classobj3</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(classobj3.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、网络编程"><a href="#六、网络编程" class="headerlink" title="六、网络编程"></a>六、网络编程</h2><h3 id="1、网络协议是什么？"><a href="#1、网络协议是什么？" class="headerlink" title="1、网络协议是什么？"></a>1、网络协议是什么？</h3><p>在计算机网络要做到有条不紊地交换数据，就必须遵守一些事先约定好的规则，比如交换数据的格式、是否需要发送一个应答信息。这些规则被称为网络协议。</p><h3 id="2、为什么要对网络协议分层？"><a href="#2、为什么要对网络协议分层？" class="headerlink" title="2、为什么要对网络协议分层？"></a>2、为什么要对网络协议分层？</h3><ul><li>简化问题难度和复杂度。由于各层之间独立，我们可以分割大问题为小问题。</li><li>灵活性好。当其中一层的技术变化时，只要层间接口关系保持不变，其他层不受影响。</li><li>易于实现和维护。</li><li>促进标准化工作。分开后，每层功能可以相对简单地被描述。</li></ul><p>网络协议分层的缺点： 功能可能出现在多个层里，产生了额外开销。</p><p>四层协议，五层协议和七层协议的关系如下：</p><ul><li>TCP&#x2F;IP是一个四层的体系结构，主要包括：应用层、运输层、网际层和网络接口层。</li><li>五层协议的体系结构主要包括：应用层、运输层、网络层，数据链路层和物理层。</li><li>OSI七层协议模型主要包括是：应用层（Application）、表示层（Presentation）、会话层（Session）、运输层（Transport）、网络层（Network）、数据链路层（Data Link）、物理层（Physical）。</li></ul><p><img src="/.com//20200316173310511.png" alt="20200316173310511"></p><p>注：五层协议的体系结构只是为了介绍网络原理而设计的，实际应用还是 TCP&#x2F;IP 四层体系结构。</p><h3 id="3、TCP-UDP协议"><a href="#3、TCP-UDP协议" class="headerlink" title="3、TCP&#x2F;UDP协议"></a>3、TCP&#x2F;UDP协议</h3><p><strong>UDP协议</strong></p><ul><li><p>用户数据报协议(User Datagram Protocol)</p></li><li><p>UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p></li><li><p>由于使用UDP协议消耗系统资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输</p></li><li><p>例如视频会议通常采用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议</p></li></ul><p><strong>TCP协议</strong></p><ul><li><p>传输控制协议 (Transmission Control Protocol)</p></li><li><p>TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”</p></li><li><p>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠</p><p>第一次握手，客户端向服务器端发出连接请求，等待服务器确认</p><p>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求</p><p>第三次握手，客户端再次向服务器端发送确认信息，确认连接</p></li><li><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛。例如上传文件、下载文件、浏览网页等</p></li></ul><h3 id="4、UDP通信程序"><a href="#4、UDP通信程序" class="headerlink" title="4、UDP通信程序"></a>4、UDP通信程序</h3><h4 id="1、UDP发送数据"><a href="#1、UDP发送数据" class="headerlink" title="1、UDP发送数据"></a>1、UDP发送数据</h4><ul><li><p>Java中的UDP通信</p></li><li><p>UDP协议是一种不可靠的网络协议，它在通信的两端各建立一个Socket对象，但是这两个Socket只是发送，接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念</p></li><li><p>Java提供了DatagramSocket类作为基于UDP协议的Socket</p></li><li><p>构造方法</p><p>|方法名|说明| |-|-| |DatagramSocket()|创建数据报套接字并将其绑定到本机地址上的任何可用端口| |DatagramPacket(byte[] buf,int len,InetAddress add,int port)|创建数据包,发送长度为len的数据包到指定主机的指定端口|</p></li><li><p>相关方法</p><p>|方法名|说明| |-|-| |void send(DatagramPacket p)|发送数据报包| |void close()|关闭数据报套接字| |void receive(DatagramPacket p)|从此套接字接受数据报包|</p></li><li><p>发送数据的步骤</p></li><li><p>创建发送端的Socket对象(DatagramSocket)</p></li><li><p>个创建数据，并把数据打包</p></li><li><p>调用DatagramSocket对象的方法发送数据</p></li><li><p>关闭发送端</p></li><li><p>代码演示</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建发送端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="comment">// DatagramSocket() 构造数据报套接字并将其绑定到本地主机上的任何可用端口</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建数据，并把数据打包</span></span><br><span class="line">        <span class="comment">//DatagramPacket(byte[] buf, int length, InetAddress address, int port)</span></span><br><span class="line">        <span class="comment">//构造一个数据包，发送长度为 length的数据包到指定主机上的指定端口号。</span></span><br><span class="line">        <span class="type">byte</span>[] bys = <span class="string">&quot;hello,udp,我来了&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys,bys.length,InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用DatagramSocket对象的方法发送数据</span></span><br><span class="line">        <span class="comment">//void send(DatagramPacket p) 从此套接字发送数据报包</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        <span class="comment">//void close() 关闭此数据报套接字</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、UDP接收数据"><a href="#2、UDP接收数据" class="headerlink" title="2、UDP接收数据"></a>2、UDP接收数据</h4><ul><li><p>接收数据的步骤</p></li><li><p>创建接收端的Socket对象(DatagramSocket)</p></li><li><p>创建一个数据包，用于接收数据</p></li><li><p>调用DatagramSocket对象的方法接收数据</p></li><li><p>解析数据包，并把数据在控制台显示</p></li><li><p>关闭接收端</p></li><li><p>构造方法</p><p>|方法名|说明| |-|-| |DatagramPacket(byte[] buf, int len)|创建一个DatagramPacket用于接收长度为len的数据包|</p></li><li><p>相关方法</p><p>|方法名|说明| |-|-| |byte[] getData()|返回数据缓冲区| |int getLength()|返回要发送的数据的长度或接收的数据的长度|</p></li><li><p>示例代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          <span class="comment">//创建接收端的Socket对象(DatagramSocket)</span></span><br><span class="line">          <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">          <span class="type">byte</span>[] bys = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">          <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys, bys.length);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">          ds.receive(dp);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//解析数据包，并把数据在控制台显示</span></span><br><span class="line">          System.out.println(<span class="string">&quot;数据是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(), <span class="number">0</span>,                                             dp.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、UDP通信程序练习"><a href="#3、UDP通信程序练习" class="headerlink" title="3、UDP通信程序练习"></a>3、UDP通信程序练习</h4><ul><li><p>案例需求</p><p>UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束</p><p>UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</p></li><li><p>代码实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    UDP发送数据：</span></span><br><span class="line"><span class="comment">        数据来自于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建发送端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="comment">//键盘录入数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">              <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="comment">//输入的数据是886，发送数据结束</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(s)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建数据，并把数据打包</span></span><br><span class="line">            <span class="type">byte</span>[] bys = s.getBytes();</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys, bys.length, InetAddress.getByName(<span class="string">&quot;192.168.1.66&quot;</span>), <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用DatagramSocket对象的方法发送数据</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    UDP接收数据：</span></span><br><span class="line"><span class="comment">        因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建接收端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">12345</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">            <span class="type">byte</span>[] bys = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bys, bys.length);</span><br><span class="line">            <span class="comment">//调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">            ds.receive(dp);</span><br><span class="line">            <span class="comment">//解析数据包，并把数据在控制台显示</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(), <span class="number">0</span>, dp.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭接收端</span></span><br><span class="line"><span class="comment">//        ds.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、UDP三种通讯方式"><a href="#4、UDP三种通讯方式" class="headerlink" title="4、UDP三种通讯方式"></a>4、UDP三种通讯方式</h4><ul><li><p>单播</p><p>单播用于两个主机之间的端对端通信</p></li><li><p>组播</p><p>组播用于对一组特定的主机进行通信</p></li><li><p>广播</p><p>广播用于一个主机对整个局域网上所有主机上的数据通信</p></li></ul><h4 id="5、UDP组播实现"><a href="#5、UDP组播实现" class="headerlink" title="5、UDP组播实现"></a>5、UDP组播实现</h4><ul><li>实现步骤</li><li>发送端<ol><li>创建发送端的Socket对象(DatagramSocket)</li><li>创建数据，并把数据打包(DatagramPacket)</li><li>调用DatagramSocket对象的方法发送数据(在单播中,这里是发给指定IP的电脑但是在组播当中,这里是发给组播地址)</li><li>释放资源</li></ol></li><li>接收端<ol><li>创建接收端Socket对象(MulticastSocket)</li><li>创建一个箱子,用于接收数据</li><li>把当前计算机绑定一个组播地址</li><li>将数据接收到箱子中</li><li>解析数据包,并打印数据</li><li>释放资源</li></ol></li><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClinetDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建发送端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello 组播&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = s.getBytes();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;224.0.1.0&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="comment">// 2. 创建数据，并把数据打包(DatagramPacket)</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length,address,port);</span><br><span class="line">        <span class="comment">// 3. 调用DatagramSocket对象的方法发送数据(在单播中,这里是发给指定IP的电脑但是在组播当中,这里是发给组播地址)</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建接收端Socket对象(MulticastSocket)</span></span><br><span class="line">        <span class="type">MulticastSocket</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MulticastSocket</span>(<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// 2. 创建一个箱子,用于接收数据</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>],<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 3. 把当前计算机绑定一个组播地址,表示添加到这一组中.</span></span><br><span class="line">        ms.joinGroup(InetAddress.getByName(<span class="string">&quot;224.0.1.0&quot;</span>));</span><br><span class="line">        <span class="comment">// 4. 将数据接收到箱子中</span></span><br><span class="line">        ms.receive(dp);</span><br><span class="line">        <span class="comment">// 5. 解析数据包,并打印数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,length));</span><br><span class="line">        <span class="comment">// 6. 释放资源</span></span><br><span class="line">        ms.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、UDP广播实现"><a href="#6、UDP广播实现" class="headerlink" title="6、UDP广播实现"></a>6、UDP广播实现</h4><ul><li>实现步骤</li><li>发送端<ol><li>创建发送端Socket对象(DatagramSocket)</li><li>创建存储数据的箱子,将广播地址封装进去</li><li>发送数据</li><li>释放资源</li></ol></li><li>接收端<ol><li>创建接收端的Socket对象(DatagramSocket)</li><li>创建一个数据包，用于接收数据</li><li>调用DatagramSocket对象的方法接收数据</li><li>解析数据包，并把数据在控制台显示</li><li>关闭接收端</li></ol></li><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">          <span class="comment">// 1. 创建发送端Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="comment">// 2. 创建存储数据的箱子,将广播地址封装进去</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;广播 hello&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = s.getBytes();</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;255.255.255.255&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes,bytes.length,address,port);</span><br><span class="line">        <span class="comment">// 3. 发送数据</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line">        <span class="comment">// 4. 释放资源</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 创建接收端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// 2. 创建一个数据包，用于接收数据</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>],<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">// 3. 调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">        ds.receive(dp);</span><br><span class="line">        <span class="comment">// 4. 解析数据包，并把数据在控制台显示</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> dp.getLength();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,length));</span><br><span class="line">        <span class="comment">// 5. 关闭接收端</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、TCP通信程序"><a href="#5、TCP通信程序" class="headerlink" title="5、TCP通信程序"></a>5、TCP通信程序</h3><h4 id="1、TCP发送数据"><a href="#1、TCP发送数据" class="headerlink" title="1、TCP发送数据"></a>1、TCP发送数据</h4><ul><li><p>Java中的TCP通信</p></li><li><p>Java对基于TCP协议的的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过Socket产生IO流来进行网络通信。</p></li><li><p>Java为客户端提供了Socket类，为服务器端提供了ServerSocket类</p></li><li><p>构造方法</p><p>|方法名|说明| |-|-| |Socket(InetAddress address,int port)|创建流套接字并将其连接到指定IP指定端口号| |Socket(String host, int port)|创建流套接字并将其连接到指定主机上的指定端口号|</p></li><li><p>相关方法</p><p>|方法名|说明| |-|-| |InputStream getInputStream()|返回此套接字的输入流| |OutputStream getOutputStream()|返回此套接字的输出流|</p></li><li><p>示例代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//TCP协议，发送数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建Socket对象</span></span><br><span class="line">        <span class="comment">//细节：在创建对象的同时会连接服务端</span></span><br><span class="line">        <span class="comment">//      如果连接不上，代码会报错</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.可以从连接通道中获取输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//写出数据</span></span><br><span class="line">        os.write(<span class="string">&quot;aaa&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、TCP接收数据"><a href="#2、TCP接收数据" class="headerlink" title="2、TCP接收数据"></a>2、TCP接收数据</h4><ul><li><p>构造方法</p><p>|方法名|说明| |-|-| |ServerSocket(int port)|创建绑定到指定端口的服务器套接字|</p></li><li><p>相关方法</p><p>|方法名|说明| |-|-| |Socket accept()|监听要连接到此的套接字并接受它|</p></li><li><p>注意事项</p></li></ul><ol><li>accept方法是阻塞的,作用就是等待客户端连接</li><li>客户端创建对象并连接服务器,此时是通过三次握手协议,保证跟服务器之间的连接</li><li>针对客户端来讲,是往外写的,所以是输出流 针对服务器来讲,是往里读的,所以是输入流</li><li>read方法也是阻塞的</li><li>客户端在关流的时候,还多了一个往服务器写结束标记的动作</li><li>最后一步断开连接,通过四次挥手协议保证连接终止</li></ol><ul><li><p>三次握手和四次挥手</p></li><li><p>三次握手</p><p><img src="/.com//image1.png" alt="image1">!](.&#x2F;assets&#x2F;image1.png)</p></li><li><p>四次挥手</p><p><img src="/.com//image2.png" alt="image2">!](.&#x2F;assets&#x2F;image2.png)</p></li><li><p>示例代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//TCP协议，接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象ServerSocker</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.监听客户端的链接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.从连接通道中获取输入流读取数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = is.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="type">char</span>) b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、TCP程序练习（传输中文）"><a href="#3、TCP程序练习（传输中文）" class="headerlink" title="3、TCP程序练习（传输中文）"></a>3、TCP程序练习（传输中文）</h4><p>发送端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//TCP协议，发送数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建Socket对象</span></span><br><span class="line">        <span class="comment">//细节：在创建对象的同时会连接服务端</span></span><br><span class="line">        <span class="comment">//      如果连接不上，代码会报错</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.可以从连接通道中获取输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="comment">//写出数据</span></span><br><span class="line">        os.write(<span class="string">&quot;你好你好&quot;</span>.getBytes());<span class="comment">//12字节</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//TCP协议，接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建对象ServerSocker</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.监听客户端的链接</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.从连接通道中获取输入流读取数据</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        <span class="keyword">while</span> ((b = br.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>) b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        ss.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、多线程"><a href="#七、多线程" class="headerlink" title="七、多线程"></a>七、多线程</h2><h3 id="1、线程和进程"><a href="#1、线程和进程" class="headerlink" title="1、线程和进程"></a>1、线程和进程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">进程：</span><br><span class="line">是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间。</span><br><span class="line">线程：</span><br><span class="line">是进程中的一个执行路径，共享一个内存空间，线程之间可以自由切换，并发执行，一个进程最少有一个线程。</span><br><span class="line">线程实际上是在进程基础之上的进一步划分，一个进程启动之后，里面的若干执行路径又可以划分成若干个线程。</span><br></pre></td></tr></table></figure><h3 id="2、线程调度"><a href="#2、线程调度" class="headerlink" title="2、线程调度"></a>2、线程调度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">分时调度</span><br><span class="line">所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间。</span><br><span class="line"></span><br><span class="line">抢占式调度</span><br><span class="line">优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会随机选择一个（线程随机性），java使用的为抢占式调度。</span><br><span class="line">CPU使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核心而言，某个时刻，只能执行一个线程，而CPU在多个线程间切换速度相对我们的感觉要快，看上去就是 在同一时刻运行，其实，多线程程序（基于一个CPU）并不能提高程序的运行速度，但能够提高程序的运行效率，让CPU使用率更高。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">扩展：数据库服务器，上千线程使用数据库，数据库只有8个CPU，同时开启1k个连接，让1k个人操作他，8个CPU交替执行效率快，还是1k个人排队用8个CPU快?</span><br><span class="line">答：1k人排队用8个CPU效率更高，（A完成B开始，B完成C开始），缺少了切换的时间。</span><br></pre></td></tr></table></figure><h3 id="3、同步与异步"><a href="#3、同步与异步" class="headerlink" title="3、同步与异步"></a>3、同步与异步</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">之前谈的线程安全是同步，线程不安全是异步。</span><br><span class="line">同步：排队执行，效率低但是安全</span><br><span class="line">异步：同时执行，效率高但是数据不安全</span><br></pre></td></tr></table></figure><h3 id="4、并发与并行"><a href="#4、并发与并行" class="headerlink" title="4、并发与并行"></a>4、并发与并行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">并发：指两个or多个事件在 同一个时间段内 发生</span><br><span class="line">并行：指两个or多个事件在 同一时刻 发生（同时发生）</span><br></pre></td></tr></table></figure><h3 id="5、实现多线程的三种方式"><a href="#5、实现多线程的三种方式" class="headerlink" title="5、实现多线程的三种方式"></a>5、实现多线程的三种方式</h3><h4 id="1、继承Thread"><a href="#1、继承Thread" class="headerlink" title="1、继承Thread"></a>1、继承Thread</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread是Java提供的线程类，继承了该类的就是一个线程类。</span><br><span class="line"></span><br><span class="line">主线程和分支线程是并发执行的，谁在前谁在后  是随机的  抢占式分配</span><br><span class="line"></span><br><span class="line">编写一个类extends Thread，重写线程类的run方法，触发方式是调用Thread对象的start()方法启动任务</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">由一个线程执行的方法，那么这个方法也会执行在这个线程里面。</span><br><span class="line">每个线程都有自己的栈空间，共用一份堆内存。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line"> System.out.println(i);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadDemo</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">MyThread</span> <span class="variable">my1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"> <span class="type">MyThread</span> <span class="variable">my2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"><span class="comment">// my1.run();</span></span><br><span class="line"><span class="comment">// my2.run();</span></span><br><span class="line"> <span class="comment">//void start() 导致此线程开始执⾏; Java虚拟机调⽤此线程的run⽅法</span></span><br><span class="line"> my1.start();</span><br><span class="line"> my2.start();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>两个⼩问题 为什么要重写run()⽅法？ </p><ul><li>因为run()是⽤来封装被线程执⾏的代码</li></ul></li><li><p>run()⽅法和start()⽅法的区别？</p><ul><li>run()：封装线程执⾏的代码，直接调⽤，相当于普通⽅法的调⽤ </li><li>start()：启动线程；然后由JVM调⽤此线程的run()⽅法</li></ul></li></ul><h4 id="2、实现Runnable接口"><a href="#2、实现Runnable接口" class="headerlink" title="2、实现Runnable接口"></a>2、实现Runnable接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">编写一个类implements Runnable接口，并实现run()方法</span><br><span class="line"></span><br><span class="line">实现Runnable与继承Thread相比有如下优势：</span><br><span class="line">1.通过创建任务，然后给线程分配的方式来实现的多线程，更适合多个线程同时执行相同任务的情况。即1个任务多个线程执行，很方便。</span><br><span class="line">2.可以避免单继承所带来的局限性。(最有优势的点)。Java中extends只能继承一个类，单继承，implements是实现接口，可以多实现，并且还可以extends一个类。</span><br><span class="line">3.任务与线程本身是分离的，提高了程序的健壮性。</span><br><span class="line">4.后续学习的线程池技术（管理的是任务而不是线程），只接受Runnable类型的任务，不接受Thread类型的线程。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line"> System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnableDemo</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="comment">//创建MyRunnable类的对象</span></span><br><span class="line"> <span class="type">MyRunnable</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"> <span class="comment">//创建Thread类的对象，把MyRunnable对象作为构造⽅法的参数</span></span><br><span class="line"> <span class="comment">//Thread(Runnable target)</span></span><br><span class="line"><span class="comment">// Thread t1 = new Thread(my);</span></span><br><span class="line"><span class="comment">// Thread t2 = new Thread(my);</span></span><br><span class="line"> <span class="comment">//Thread(Runnable target, String name)</span></span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(my,<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line"> <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(my,<span class="string">&quot;⻜机&quot;</span>);</span><br><span class="line"> <span class="comment">//启动线程</span></span><br><span class="line"> t1.start();</span><br><span class="line"> t2.start();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、Callable接口"><a href="#3、Callable接口" class="headerlink" title="3、Callable接口"></a>3、Callable接口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java中的第三种线程实现方式</span><br><span class="line">创建线程一般就继承Thread和实现Runnable，这两种方法创建的线程和主线程是一块执行的，两个一块走。</span><br><span class="line">Callable实现线程的话既可以两个一块走，也可以实现主线程等子线程执行完毕返回结果</span><br></pre></td></tr></table></figure><h5 id="1、Runnable与Callable"><a href="#1、Runnable与Callable" class="headerlink" title="1、Runnable与Callable"></a>1、Runnable与Callable</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">接口定义</span><br><span class="line">//Callable接口</span><br><span class="line">public interface Callable&lt;V&gt; &#123;</span><br><span class="line">V call() throws Exception;</span><br><span class="line">&#125;</span><br><span class="line">//Runnable接口</span><br><span class="line">public interface Runnable &#123;</span><br><span class="line">public abstract void run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、Callable使用步骤"><a href="#2、Callable使用步骤" class="headerlink" title="2、Callable使用步骤"></a>2、Callable使用步骤</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1. 编写类实现Callable接口 , 实现call方法</span><br><span class="line">    class XXX implements Callable&lt;T&gt; &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public &lt;T&gt; call() throws Exception &#123;</span><br><span class="line">        return T;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">2. 创建FutureTask对象 , 并传入第一步编写的Callable类对象</span><br><span class="line">FutureTask&lt;Integer&gt; future = new FutureTask&lt;&gt;(callable);</span><br><span class="line">3. 通过Thread,启动线程</span><br><span class="line">new Thread(future).start();</span><br><span class="line"></span><br><span class="line">Callable相对麻烦一点，实现Callable接口的类需要使用泛型，任务执行完毕以后进行return返回什么类型的结果给启动线程的人。</span><br><span class="line"></span><br><span class="line">FutureTask有get()方法获取线程执行的结果，但要知道，比如说主线程调用了线程A，线程A需要花10s完成某件事情并返回结果，那么主线程如果没调用get方法，它就不会等这10s，并发执行两个线程，但如果调了这个方法，主线程就会等这10s，等待线程A执行完毕，主线程获取结果之后再往下执行。</span><br><span class="line">还有一个get(long timeout,TimeUnit unit)，给一个最多能能带的时间，要是超时，算了不要了。</span><br><span class="line"></span><br><span class="line">FutureTask对象名.isDone()可以判断任务是否执行完毕</span><br><span class="line">FutureTask对象名.cancel(true)  取消任务，其返回值为true 取消成功，任务还没完成被干掉了。return FALSE的情况绝大多数是因为任务已经执行完毕，执行成功了，没有办法再取消了。</span><br><span class="line"></span><br><span class="line">该方法作为了解，用得并不多。</span><br></pre></td></tr></table></figure><h3 id="6、Thread类"><a href="#6、Thread类" class="headerlink" title="6、Thread类"></a>6、Thread类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">构造方法：</span><br><span class="line">Thread(Runnable target) 分配新的 Thread对象。  </span><br><span class="line">Thread(Runnable target, String name) 分配新的 Thread对象。不仅传一个任务，也可以传任务name。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">常用方法：</span><br><span class="line">getName()   返回此线程名称</span><br><span class="line">getId()    返回此Thread的标识符</span><br><span class="line">getPriority()    返回此线程的优先级</span><br><span class="line">getPriority(int newPriority)    更改此线程的优先级，控制线程抢到时间片的几率  可以传入静态修饰的常量  MAX_PRIORITY(线程可以拥有的最大优先级)  MIN_PRIORITY(线程可以拥有的最低优先级)   NORM_PRIORITY(分配给线程的默认优先级)</span><br><span class="line">start()    此线程开始执行，Java虚拟机调用此线程的run方法。</span><br><span class="line">stop()    已过时，这种方式本质上不安全。比如 正在IO，停了，正在使用某些资源无法释放，资源依然被占用。</span><br><span class="line">那么怎么停止线程这一单独执行路径呢？可以设置变量作为标记，线程一直监听该变量的值，一旦变了，通知线程，线程自杀，run方法return 。</span><br><span class="line">sleep(long millis)    导致当前正在执行的线程休眠(暂时停止执行)指定的毫秒数。</span><br><span class="line">sleep(long millis,int nanos)    导致当前正在执行的线程休眠(暂时停止执行)指定的毫秒数加上指定的纳秒数。</span><br><span class="line">sleep很常见，比如想每个1秒输出一个数字，则sleep(1000)</span><br><span class="line">setDaemon(boolean on)    将此线程标记为守护线程(当所有用户线程全部死亡后，守护线程自动死亡，它依附于用户线程)or用户线程(主线程和子线程都称为用户线程，所有用户线程必须全部死亡，程序才会结束)</span><br></pre></td></tr></table></figure><h4 id="1、设置和获取线程名称"><a href="#1、设置和获取线程名称" class="headerlink" title="1、设置和获取线程名称"></a>1、设置和获取线程名称</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread类有一个static方法currentThread()获取当前线程，所以可以通过 类名.方法名 调用该方法。</span><br><span class="line">getName()方法返回线程名称</span><br><span class="line">构造时不传name也有默认name——Thread-0、Thread-1...</span><br><span class="line"></span><br><span class="line">也可以new出来接收一下，设置线程name,再start方法调用run</span><br></pre></td></tr></table></figure><h4 id="2、线程休眠"><a href="#2、线程休眠" class="headerlink" title="2、线程休眠"></a>2、线程休眠</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Thread类的static方法sleep，也是直接通过 类.方法名 方式调用。</span><br><span class="line">下图运行时会每隔一秒输出一个数字</span><br></pre></td></tr></table></figure><h4 id="3、线程阻塞-interrupt"><a href="#3、线程阻塞-interrupt" class="headerlink" title="3、线程阻塞 interrupt()"></a>3、线程阻塞 interrupt()</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不只指的是线程休眠了 睡了，线程是一条执行路径，比如一个线程执行路径代码100行，可能有10行是读取某个文件，这个文件读取耗时1s，那么这1秒也是阻塞的，它停在那读文件，后面读完才会继续执行。</span><br><span class="line">可以把线程阻塞简单理解为所有比较耗时间的操作，比如常见的文件读取，会导致线程等待在那个位置，代码不会继续执行，除非文件读完。</span><br><span class="line">再比如说等待用户输入，用户不输入，代码就会等在那不会继续执行，线程阻塞 又称为耗时操作。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在需要杀死线程的代码块处调用 线程对象.interrupt()</span><br><span class="line">调用该方法会告知Thread该死亡了，Thread之后怎么办还是看Thread try到中断异常后如何处理的代码块。</span><br><span class="line">就会进入该线程run方法的try catch中断异常，然后怎么做是看程序员在catch异常后的catch块里写的什么操作，一般这个位置拿来释放资源(交代线程后事)，然后return，return即正常结束了run方法，Thread正常自杀。</span><br></pre></td></tr></table></figure><p><img src="/.com//s1-1709083445233-32.png" alt="s1"></p><p><img src="/.com//s2-1709083445234-35.png" alt="s2"></p><p><img src="/.com//s3-1709083445234-33.png" alt="s3"></p><h4 id="4、守护线程"><a href="#4、守护线程" class="headerlink" title="4、守护线程"></a>4、守护线程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">线程：分为守护线程和用户线程</span><br><span class="line">用户线程：当一个进程不包含任何的存活的用户线程时，进程结束。</span><br><span class="line">守护线程：守护用户线程的，当最后一个用户线程结束时，所有守护线程自动死亡。</span><br><span class="line"></span><br><span class="line">直接创建的线程都是用户线程，若想设置守护线程需要创建Thread对象之后，start之前调用setDaemon方法，实参为true。</span><br><span class="line">主线程输出到5，main方法还要结束，此时子线程又输出了一个6，这是在上一个中断线程的源码的基础上加了一个设置守护线程的方法。</span><br></pre></td></tr></table></figure><p><img src="/.com//a1-1709083445234-34.png" alt="a1"></p><h4 id="5、线程安全问题"><a href="#5、线程安全问题" class="headerlink" title="5、线程安全问题"></a>5、线程安全问题</h4><h4 id="1、线程不安全"><a href="#1、线程不安全" class="headerlink" title="1、线程不安全"></a>1、线程不安全</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">举个例子，不能一直空说大汉吃一碗面</span><br><span class="line">卖票，实现Runnable的任务类，类的方法就是对当前票数--，sleep是故意为了让它出线程不安全的问题，演示线程不安全的事，启动三个Thread，共同执行卖票这个任务。</span><br><span class="line"></span><br><span class="line">分析结果：单看逻辑，怎么都不会出现负数。出现负数是因为有可能A线程发现count为1(极端情况)进入while循环，还没进行count--操作，其他两个线程插足(抢到时间片)也通过count&gt;0进入线程，所以后面进行count--，出现了-1   -2</span><br></pre></td></tr></table></figure><h4 id="2、线程安全"><a href="#2、线程安全" class="headerlink" title="2、线程安全"></a>2、线程安全</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">首先明确线程不安全的原因：</span><br><span class="line">多个线程同时执行，去同时操作一个数据，导致某个数据看到的和在自己使用时数据不一致，因为其看到的和使用的中间间隔代码执行时被其他线程插足了(其他线程进来把数据改了)，所以最终导致运行不符合预期。</span><br><span class="line"></span><br><span class="line">很简单，就让某个线程在执行 看到的和使用时的数据 之间的代码块时，其他线程不插足，排队执行。</span><br><span class="line">大汉排队吃锅里的食物，每个人看到的和吃到嘴里的 不会有差异。</span><br><span class="line"></span><br><span class="line">关于线程同步，有三种不同的关于让线程排队执行的方式，都是通过上锁，加锁的方式。</span><br></pre></td></tr></table></figure><h5 id="1、实现线程安全1-同步代码块"><a href="#1、实现线程安全1-同步代码块" class="headerlink" title="1、实现线程安全1-同步代码块"></a>1、实现线程安全1-同步代码块</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">可以简单认为，被括住的代码块是排队执行的。</span><br><span class="line">格式</span><br><span class="line">synchronized(锁对象)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Java中任何对象都可以作为锁对象存在，可以认为任何对象都可以打锁标记。打锁标记我们不用管，是内存底层的机制。线程会观察锁对象是否打了锁的标记，如果被打了，说明有人正在执行，他就会等，一直等，一直看标记是不是解锁了。某个线程执行完毕后，解锁，其他人抢，抢到就上锁。一般回首掏比较nb，见下图的运行结果，大部分是Thread-0抢到了。</span><br><span class="line">注意：100个线程要上同一把锁才能实现排队的效果。</span><br><span class="line"></span><br><span class="line">下图就是在卖票的例子上加了一个private Object o = new Object()和synchronized  就实现了线程安全。 </span><br><span class="line">卖票的例子   就new了一个Ticket对象(任务)，所以线程用的是一个锁对象o。</span><br></pre></td></tr></table></figure><p><img src="/.com//a2-1709083445234-38.png" alt="a2">!](.&#x2F;assets&#x2F;a2.png)</p><p><img src="/.com//a3-1709083445234-36.png" alt="a3">!](.&#x2F;assets&#x2F;a3.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所有线程要共用一把锁，线程.start()方法会调用run方法，如果在run方法里new 锁对象，则成了每个线程都有自己独立的锁，就没有线程安全的说法了。如下图，还是会出现-1  -2</span><br></pre></td></tr></table></figure><p><img src="/.com//a4-1709083445234-37.png" alt="a4">!](.&#x2F;assets&#x2F;a4.png)</p><h5 id="2、实现线程安全2-同步方法"><a href="#2、实现线程安全2-同步方法" class="headerlink" title="2、实现线程安全2-同步方法"></a>2、实现线程安全2-同步方法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">同步代码甚至可以以一行代码为单位进行加锁，但同步方法以方法为单位进行加锁。</span><br><span class="line">格式</span><br><span class="line">给方法添加synchronized修饰词</span><br><span class="line"></span><br><span class="line">这里的锁就是任务Ticket对象，一个任务多个线程调用，才会安全。</span><br><span class="line">Runnable run = new Ticket();</span><br><span class="line">new Thread(run).start();</span><br><span class="line">new Thread(run).start();</span><br><span class="line">new Thread(run).start();</span><br><span class="line"></span><br><span class="line">同步方法用的是一个this这把锁，要是有多个同步方法，or有个同步代码是传的this为锁对象，则若有一个同步方法在执行，其他同步方法都执行不了(Thread-0上锁之后，其他Thread都不能执行别的同步方法)，都是排队的，因为上的是同一把锁。</span><br></pre></td></tr></table></figure><p><img src="/.com//b1-1709083445234-40.png" alt="b1">!](.&#x2F;assets&#x2F;b1.png)</p><p><img src="/.com//b2-1709083445234-42.png" alt="b2">!](.&#x2F;assets&#x2F;b2.png)</p><h5 id="3、实现线程安全3-Lock锁"><a href="#3、实现线程安全3-Lock锁" class="headerlink" title="3、实现线程安全3-Lock锁"></a>3、实现线程安全3-Lock锁</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">同步代码块和同步方法都属于隐式锁，就是具体是怎么锁的我们不用管，只需把格式写好，它就自己锁，自己开，这就叫隐式锁。</span><br><span class="line">显式锁就是自己创建锁对象，自己上锁，自己解锁。</span><br><span class="line"></span><br><span class="line">在Ticket类里定义一个属性显式锁l</span><br><span class="line">private lock l = new ReentrantLock();</span><br><span class="line">在需要上锁的地方 l.lock()</span><br><span class="line">在需要解锁的地方 l.unlock()</span><br><span class="line"></span><br><span class="line">因为是new一个任务(Ticket)对象 所以用的是同一把显式锁l</span><br><span class="line"></span><br><span class="line">显式锁比隐式锁更好一些，更能体现程序员在控制 锁的概念</span><br><span class="line"></span><br><span class="line">while true里的代码如下，就是法1同步代码块的地方</span><br></pre></td></tr></table></figure><p><img src="/.com//b3-1709083445236-48.png" alt="b3">!](.&#x2F;assets&#x2F;b3.png)</p><h3 id="7、公平锁与非公平锁"><a href="#7、公平锁与非公平锁" class="headerlink" title="7、公平锁与非公平锁"></a>7、公平锁与非公平锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">公平锁</span><br><span class="line">排队 先来先到，A线程先来等，那么解锁之后A线程先执行并上锁</span><br><span class="line"></span><br><span class="line">非公平锁</span><br><span class="line">一旦解锁，大家一起抢</span><br><span class="line"></span><br><span class="line">Java里默认的，上述三种线程安全方法都是非公平锁。</span><br><span class="line"></span><br><span class="line">显式锁l里，fair参数为true，表示是公平锁，构造方法的实参：</span><br><span class="line">private lock l = new ReentrantLock(true)</span><br></pre></td></tr></table></figure><h3 id="8、线程死锁"><a href="#8、线程死锁" class="headerlink" title="8、线程死锁"></a>8、线程死锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">死锁  互相等待的一种僵局</span><br><span class="line"></span><br><span class="line">避免的话  在开发时，在任何有锁的方法(点播里的是给方法加synchronized修饰词)里尽量不要编写另一个带锁的方法</span><br></pre></td></tr></table></figure><h3 id="9、-悲观锁和乐观锁"><a href="#9、-悲观锁和乐观锁" class="headerlink" title="9、 悲观锁和乐观锁"></a>9、 悲观锁和乐观锁</h3><p><strong>synchronized和CAS的区别 :</strong></p><p><strong>相同点：</strong>在多线程情况下，都可以保证共享数据的安全性。</p><p><strong>不同点：</strong>synchronized总是从最坏的角度出发，认为每次获取数据的时候，别人都有可能修改。所以在每 次操作共享数据之前，都会上锁。（悲观锁）</p><p> cas是从乐观的角度出发，假设每次获取数据别人都不会修改，所以不会上锁。只不过在修改共享数据的时候，会检查一下，别人有没有修改过这个数据。</p><p> 如果别人修改过，那么我再次获取现在最新的值。</p><p> 如果别人没有修改过，那么我现在直接修改共享数据的值.(乐观锁）</p><h3 id="10、生产者与消费者"><a href="#10、生产者与消费者" class="headerlink" title="10、生产者与消费者"></a>10、生产者与消费者</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">食物类，为了让他在做菜时更容易出问题，设置name和taste之间sleep一会，执行设置name后，时间片被占，再次抢占到时间片时回来执行设置taste</span><br></pre></td></tr></table></figure><p><img src="/.com//c1-1709083445235-43.png" alt="c1">!](.&#x2F;assets&#x2F;c1.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">厨师   声明为线程，就做饭。</span><br></pre></td></tr></table></figure><p><img src="/.com//c2-1709083445235-46.png" alt="c2">!](.&#x2F;assets&#x2F;c2.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务员，因为厨师的run方法里的set方法sleep了100ms，所以这里也sleep一下。</span><br></pre></td></tr></table></figure><p><img src="/.com//c3-1709083445235-44.png" alt="c3">!](.&#x2F;assets&#x2F;c3.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main方法</span><br><span class="line">代码里写的是老干妈小米粥香辣味，运行结果是甜辣味。就说明出问题了，厨师刚生产设置了name，sleep 的时候，服务员线程把菜端走了，所以taste没有设置，还是之前的甜辣味。</span><br><span class="line">出现了两个线程进行协作时不协调的问题。</span><br></pre></td></tr></table></figure><p><img src="/.com//c4-1709083445235-45.png" alt="c4">!](.&#x2F;assets&#x2F;c4.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于这个问题，多数人认为可以给食物类的get set上锁，给方法加synchronized修饰词，都是用的this锁，所以厨师在做菜的时候，服务员不能端走，但厨师会一直回手掏，会出更大的问题，所以不能解决上述问题。</span><br></pre></td></tr></table></figure><p><img src="/.com//c5-1709083445235-47.png" alt="c5">!](.&#x2F;assets&#x2F;c5.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">解决方案：</span><br><span class="line">厨师做饭时，服务员睡着，厨师做完饭，叫醒服务员，服务员去上菜然后厨师睡着，服务员上完菜把盘子端回来再把厨师叫醒，服务员睡着...</span><br><span class="line"></span><br><span class="line">可以在上锁后(synchronized)再加以设置标记实现。</span><br><span class="line">给Food类加一个private boolean flag = true</span><br><span class="line">假设true表示可以生产</span><br><span class="line">flag判完设置为FALSE，确保不会连续执行第二次，一次做饭，一次端盘子，notifyAll是唤醒当前处于等待的所有线程，然后自己等待。</span><br></pre></td></tr></table></figure><p><img src="/.com//c6-1709083445236-49.png" alt="c6">!](.&#x2F;assets&#x2F;c6.png)</p><p><img src="/.com//c7-1709083445236-51.png" alt="c7">!](.&#x2F;assets&#x2F;c7.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">运行结果   没有任何问题了</span><br></pre></td></tr></table></figure><p><img src="/.com//c8-1709083445236-50.png" alt="c8">!](.&#x2F;assets&#x2F;c8.png)</p><p>线程的六种状态</p><ul><li>New</li></ul><p>​刚被创建 尚未启动的线程处于此状态</p><ul><li>Runnable</li></ul><p>​Java虚拟机中执行的线程处于此状态</p><ul><li>Blocked</li></ul><p>​被阻塞等待监视器锁定的线程处于此状态</p><p>​线程安全里提过上锁的概念，多个线程从一起执行到排队执行，当处于排队的时候就处于Blocked状态，排完队进入Runnable状态</p><ul><li>Waiting</li></ul><p>​无限期等待另一个线程执行特定操作的线程处于此状态 比如没有指定休眠时间的休眠，一直睡，知道被唤醒则进入Runnable状态</p><ul><li>Timed_Waiting</li></ul><p>​无限期等待另一个线程执行最多指定等待时间的操作的线程处于此状态 可以不用等别人唤醒，毕竟是指定时间的，倒也可以被唤醒，醒了直接进入Runnable状态</p><ul><li>Terminated</li></ul><p>​已退出的线程处于此状态</p><p><img src="/.com//q1-1709083445237-52.png" alt="q1">!](.&#x2F;assets&#x2F;q1.png)</p><h3 id="11、线程池"><a href="#11、线程池" class="headerlink" title="11、线程池"></a>11、线程池</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建线程-&gt;创建任务-&gt;执行任务-&gt;销毁线程</span><br><span class="line">有时候创建任务和执行任务只占整个过程大概5%的时间，真正花时间的是创建线程和销毁线程。</span><br><span class="line"></span><br><span class="line">如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低 系统的效率，因为频繁创建线程和销毁线程需要时间. 线程池就是一个容纳多个线程的容器，池中的线程可以反复使用，省去了频繁创建线程对象的操作，节省了大量的时间和资源。</span><br><span class="line"></span><br><span class="line">合理设置线程池的长度也很有必要，依次领任务。如果是非定长线程池，见到任务来了没相应闲状态的线程，就会new一个Thread并且线程池长度+1了。既然能自动扩容也有自动清缓存，如果有多个线程一直处于闲，就销毁了。</span><br><span class="line"></span><br><span class="line">Java中自己主动使用线程池的还是少的，后端开发本来就是基于多线程的，已经有池缓存的概念了，不需要额外加线程池了。</span><br></pre></td></tr></table></figure><h5 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h5><ul><li>降低资源消耗</li><li>提高响应速度</li><li>提高线程的可管理性</li></ul><h3 id="12、volatitle关键字"><a href="#12、volatitle关键字" class="headerlink" title="12、volatitle关键字"></a>12、volatitle关键字</h3><p> 当A线程修改了共享数据时，B线程没有及时获取到最新的值，如果还在使用原先的值，就会出现问题</p><p> 1，堆内存是唯一的，每一个线程都有自己的线程栈。</p><p> 2 ，每一个线程在使用堆里面变量的时候，都会先拷贝一份到变量的副本中。</p><p> 3 ，在线程中，每一次使用是从变量的副本中获取的。</p><p><strong>Volatile关键字 :</strong> 强制线程每次在使用的时候，都会看一下共享区域最新的值</p><p><strong>Volatile解决：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        t1.setName(<span class="string">&quot;小路同学&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        t2.setName(<span class="string">&quot;小皮同学&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(Money.money == <span class="number">100000</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结婚基金已经不是十万了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.itheima.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Money.money = <span class="number">90000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>synchronized解决：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        t1.setName(<span class="string">&quot;小路同学&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        t2.setName(<span class="string">&quot;小皮同学&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.itheima.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.itheima.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Money.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Money.money != <span class="number">100000</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;结婚基金已经不是十万了&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.itheima.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Money.lock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Money.money = <span class="number">90000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、常用API"><a href="#八、常用API" class="headerlink" title="八、常用API"></a>八、常用API</h2><h3 id="1、String相关"><a href="#1、String相关" class="headerlink" title="1、String相关"></a>1、String相关</h3><h4 id="1、字符型常量和字符串常量的区别"><a href="#1、字符型常量和字符串常量的区别" class="headerlink" title="1、字符型常量和字符串常量的区别"></a>1、字符型常量和字符串常量的区别</h4><p>形式上: 字符常量是单引号引起的一个字符 字符串常量是双引号引起的若干个字符<br>含义上: 字符常量相当于一个整形值(ASCII值),可以参加表达式运算 字符串常量代表一个地址值(该字符串在内存中存放位置)<br>占内存大小：字符常量只占一个字节 字符串常量占若干个字节(至少一个字符结束标志)</p><h4 id="2、什么是字符串常量池？"><a href="#2、什么是字符串常量池？" class="headerlink" title="2、什么是字符串常量池？"></a>2、什么是字符串常量池？</h4><p>字符串常量池位于堆内存中，专门用来存储字符串常量，可以提高内存的使用率，避免开辟多块空间存储相同的字符串，在创建字符串时 JVM 会首先检查字符串常量池，如果该字符串已经存在池中，则返回它的引用，如果不存在，则实例化一个字符串放到池中，并返回其引用。</p><h4 id="3、String-是最基本的数据类型吗？"><a href="#3、String-是最基本的数据类型吗？" class="headerlink" title="3、String 是最基本的数据类型吗？"></a>3、String 是最基本的数据类型吗？</h4><p>不是。Java 中的基本数据类型只有 8 个 ：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（referencetype），Java 5 以后引入的枚举类型也算是一种比较特殊的引用类型。</p><p>这是很基础的东西，但是很多初学者却容易忽视，Java 的 8 种基本数据类型中不包括 String，基本数据类型中用来描述文本数据的是 char，但是它只能表示单个字符，比如 ‘a’,‘好’ 之类的，如果要描述一段文本，就需要用多个 char 类型的变量，也就是一个 char 类型数组，比如“你好” 就是长度为2的数组 char[] chars &#x3D; {‘你’,‘好’};</p><p>但是使用数组过于麻烦，所以就有了 String，String 底层就是一个 char 类型的数组，只是使用的时候开发者不需要直接操作底层数组，用更加简便的方式即可完成对字符串的使用。</p><h4 id="4、String有哪些特性"><a href="#4、String有哪些特性" class="headerlink" title="4、String有哪些特性"></a>4、String有哪些特性</h4><p>不变性：String 是只读字符串，是一个典型的 immutable 对象，对它进行任何操作，其实都是创建一个新的对象，再把引用指向该对象。不变模式的主要作用在于当一个对象需要被多线程共享并频繁访问时，可以保证数据的一致性。</p><p>常量池优化：String 对象创建之后，会在字符串常量池中进行缓存，如果下次创建同样的对象时，会直接返回缓存的引用。</p><p>final：使用 final 来定义 String 类，表示 String 类不能被继承，提高了系统的安全性。</p><h4 id="5、String为什么是不可变的吗？"><a href="#5、String为什么是不可变的吗？" class="headerlink" title="5、String为什么是不可变的吗？"></a>5、String为什么是不可变的吗？</h4><p>简单来说就是String类利用了final修饰的char类型数组存储字符，源码如下图所以：</p><p>&#x2F;** The value is used for character storage. *&#x2F;<br>private final char value[];</p><h4 id="6、String真的是不可变的吗？"><a href="#6、String真的是不可变的吗？" class="headerlink" title="6、String真的是不可变的吗？"></a>6、String真的是不可变的吗？</h4><p>我觉得如果别人问这个问题的话，回答不可变就可以了。 下面只是给大家看两个有代表性的例子：</p><ol><li>String不可变但不代表引用不可以变</li></ol><p>String str &#x3D; “Hello”;<br>str &#x3D; str + “ World”;<br>System.out.println(“str&#x3D;” + str);<br>结果：</p><p>str&#x3D;Hello World<br>解析：</p><p>实际上，原来String的内容是不变的，只是str由原来指向”Hello”的内存地址转为指向”Hello World”的内存地址而已，也就是说多开辟了一块内存区域给”Hello World”字符串。</p><ol start="2"><li><p>通过反射是可以修改所谓的“不可变”对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符串&quot;Hello World&quot;， 并赋给引用s</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">&quot;s = &quot;</span> + s); <span class="comment">// Hello World</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取String类中的value字段</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">valueFieldOfString</span> <span class="operator">=</span> String.class.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 改变value属性的访问权限</span></span><br><span class="line">valueFieldOfString.setAccessible(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取s对象上的value属性的值</span></span><br><span class="line"><span class="type">char</span>[] value = (<span class="type">char</span>[]) valueFieldOfString.get(s);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 改变value所引用的数组中的第5个字符</span></span><br><span class="line">value[<span class="number">5</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">&quot;s = &quot;</span> + s); <span class="comment">// Hello_World</span></span><br></pre></td></tr></table></figure></li></ol><p>结果：</p><p>s &#x3D; Hello World<br>s &#x3D; Hello_World<br>解析：</p><p>用反射可以访问私有成员， 然后反射出String对象中的value属性， 进而改变通过获得的value引用改变数组的结构。但是一般我们不会这么做，这里只是简单提一下有这个东西。</p><h4 id="7、是否可以继承-String-类"><a href="#7、是否可以继承-String-类" class="headerlink" title="7、是否可以继承 String 类"></a>7、是否可以继承 String 类</h4><p>String 类是 final 类，不可以被继承。</p><h4 id="8、String-str-”i”与-String-str-new-String-“i”-一样吗？"><a href="#8、String-str-”i”与-String-str-new-String-“i”-一样吗？" class="headerlink" title="8、String str&#x3D;”i”与 String str&#x3D;new String(“i”)一样吗？"></a>8、String str&#x3D;”i”与 String str&#x3D;new String(“i”)一样吗？</h4><p>不一样，因为内存的分配方式不一样。String str&#x3D;”i”的方式，java 虚拟机会将其分配到常量池中；而 String str&#x3D;new String(“i”) 则会被分到堆内存中。</p><h4 id="9、String-s-new-String-“xyz”-创建了几个字符串对象"><a href="#9、String-s-new-String-“xyz”-创建了几个字符串对象" class="headerlink" title="9、String s &#x3D; new String(“xyz”);创建了几个字符串对象"></a>9、String s &#x3D; new String(“xyz”);创建了几个字符串对象</h4><p>两个对象，一个是静态区的”xyz”，一个是用new创建在堆上的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>; <span class="comment">//str1指向静态区</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);  <span class="comment">//str2指向堆上的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(str1.equals(str2)); <span class="comment">//true</span></span><br><span class="line">System.out.println(str2.equals(str4)); <span class="comment">//true</span></span><br><span class="line">System.out.println(str1 == str3); <span class="comment">//true</span></span><br><span class="line">System.out.println(str1 == str2); <span class="comment">//false</span></span><br><span class="line">System.out.println(str2 == str4); <span class="comment">//false</span></span><br><span class="line">System.out.println(str2 == <span class="string">&quot;hello&quot;</span>); <span class="comment">//false</span></span><br><span class="line">str2 = str1;</span><br><span class="line">System.out.println(str2 == <span class="string">&quot;hello&quot;</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="10、如何将字符串反转？"><a href="#10、如何将字符串反转？" class="headerlink" title="10、如何将字符串反转？"></a>10、如何将字符串反转？</h4><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StringBuffer reverse</span></span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">stringBuffer. append(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">System. out. println(stringBuffer. reverse()); <span class="comment">// gfedcba</span></span><br><span class="line"><span class="comment">// StringBuilder reverse</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">stringBuilder. append(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line">System. out. println(stringBuilder. reverse()); <span class="comment">// gfedcba</span></span><br></pre></td></tr></table></figure><h4 id="11、数组有没有-length-方法？String-有没有-length-方法"><a href="#11、数组有没有-length-方法？String-有没有-length-方法" class="headerlink" title="11、数组有没有 length()方法？String 有没有 length()方法"></a>11、数组有没有 length()方法？String 有没有 length()方法</h4><p>数组没有 length()方法 ，有 length 的属性。String 有 length()方法。JavaScript中，获得字符串的长度是通过 length 属性得到的，这一点容易和 Java 混淆。</p><h4 id="12、String-类的常用方法都有那些？"><a href="#12、String-类的常用方法都有那些？" class="headerlink" title="12、String 类的常用方法都有那些？"></a>12、String 类的常用方法都有那些？</h4><p>indexOf()：返回指定字符的索引。<br>charAt()：返回指定索引处的字符。<br>replace()：字符串替换。<br>trim()：去除字符串两端空白。<br>split()：分割字符串，返回一个分割后的字符串数组。<br>getBytes()：返回字符串的 byte 类型数组。<br>length()：返回字符串长度。<br>toLowerCase()：将字符串转成小写字母。<br>toUpperCase()：将字符串转成大写字符。<br>substring()：截取字符串。<br>equals()：字符串比较。</p><h4 id="13、在使用-HashMap-的时候，用-String-做-key-有什么好处？"><a href="#13、在使用-HashMap-的时候，用-String-做-key-有什么好处？" class="headerlink" title="13、在使用 HashMap 的时候，用 String 做 key 有什么好处？"></a>13、在使用 HashMap 的时候，用 String 做 key 有什么好处？</h4><p>HashMap 内部实现是通过 key 的 hashcode 来确定 value 的存储位置，因为字符串是不可变的，所以当创建字符串时，它的 hashcode 被缓存下来，不需要再次计算，所以相比于其他对象更快。</p><h4 id="14、String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的"><a href="#14、String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的" class="headerlink" title="14、String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的"></a>14、String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的</h4><p>可变性</p><p>String类中使用字符数组保存字符串，private　final　char　value[]，所以string对象是不可变的。StringBuilder与StringBuffer都继承自AbstractStringBuilder类，在AbstractStringBuilder中也是使用字符数组保存字符串，char[] value，这两种对象都是可变的。</p><p>线程安全性</p><p>String中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder是StringBuilder与StringBuffer的公共父类，定义了一些字符串的基本操作，如expandCapacity、append、insert、indexOf等公共方法。StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。</p><p>性能</p><p>每次对String 类型进行改变的时候，都会生成一个新的String对象，然后将指针指向新的String 对象。StringBuffer每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用StirngBuilder 相比使用StringBuffer 仅能获得10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p>对于三者使用的总结</p><p>如果要操作少量的数据用 &#x3D; String</p><p>单线程操作字符串缓冲区 下操作大量数据 &#x3D; StringBuilder</p><p>多线程操作字符串缓冲区 下操作大量数据 &#x3D; StringBuffer</p><h3 id="2、Date相关"><a href="#2、Date相关" class="headerlink" title="2、Date相关"></a>2、Date相关</h3><h3 id="3、包装类相关"><a href="#3、包装类相关" class="headerlink" title="3、包装类相关"></a>3、包装类相关</h3><h4 id="1、自动装箱与拆箱"><a href="#1、自动装箱与拆箱" class="headerlink" title="1、自动装箱与拆箱"></a>1、自动装箱与拆箱</h4><p><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</p><p><strong>拆箱</strong>：将包装类型转换为基本数据类型；</p><h4 id="2、int-和-Integer-有什么区别"><a href="#2、int-和-Integer-有什么区别" class="headerlink" title="2、int 和 Integer 有什么区别"></a>2、int 和 Integer 有什么区别</h4><p>Java 是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本数据类型，但是为了能够将这些基本数据类型当成对象操作，Java 为每一个基本数据类型都引入了对应的包装类型（wrapper class），int 的包装类就是 Integer，从 Java 5 开始引入了自动装箱&#x2F;拆箱机制，使得二者可以相互转换。</p><p>Java 为每个原始类型提供了包装类型：</p><p>原始类型: boolean，char，byte，short，int，long，float，double</p><p>包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double</p><h4 id="3、Integer-a-127-与-Integer-b-127相等吗？"><a href="#3、Integer-a-127-与-Integer-b-127相等吗？" class="headerlink" title="3、Integer a&#x3D; 127 与 Integer b &#x3D; 127相等吗？"></a>3、Integer a&#x3D; 127 与 Integer b &#x3D; 127相等吗？</h4><p>对于对象引用类型：&#x3D;&#x3D;比较的是对象的内存地址。<br>对于基本数据类型：&#x3D;&#x3D;比较的是值。</p><p>如果整型字面量的值在-128到127之间，那么自动装箱时不会new新的Integer对象，而是直接引用常量池中的Integer对象，超过范围 a1&#x3D;&#x3D;b1的结果是false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;  <span class="comment">// 将3自动装箱成Integer类型</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    System.out.println(a == b); <span class="comment">// false 两个引用没有引用同一对象</span></span><br><span class="line">    System.out.println(a == c); <span class="comment">// true a自动拆箱成int类型再和c比较</span></span><br><span class="line">    System.out.println(b == c); <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">Integer</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    System.out.println(a1 == b1); <span class="comment">// false</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">Integer</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">    System.out.println(a2 == b2); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/02/11/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/02/11/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>1212213</p><p>1232</p><p><img src="/.com//image-20240211140624354.png" alt="image-20240211140624354"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
